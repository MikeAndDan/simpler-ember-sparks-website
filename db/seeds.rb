# tyrion is a subscriber & an admin
# jon is not a subscriber, and look where that got him
User.create!([
  {email: "tyrion@lannister.co", password: 'password', password_confirmation: 'password', subscribed: true, stripe_customer_id: "", admin: true, organization_id: 4, organization_permission_level: "admin", invitation_token: "", invitation_status: nil, reset_password_token: nil, reset_password_sent_at: nil, remember_created_at: nil, sign_in_count: 30, current_sign_in_at: "2016-02-13 10:51:42", last_sign_in_at: "2016-02-07 21:27:14", current_sign_in_ip: "127.0.0.1", last_sign_in_ip: "127.0.0.1"},
  {email: "jon@snow.net", password: 'password', password_confirmation: 'password', subscribed: false, stripe_customer_id: "", admin: false, organization_id: nil, organization_permission_level: nil, invitation_token: "", invitation_status: nil, reset_password_token: nil, reset_password_sent_at: nil, remember_created_at: nil, sign_in_count: 1, current_sign_in_at: "2016-02-13 11:03:48", last_sign_in_at: "2016-02-13 11:03:48", current_sign_in_ip: "127.0.0.1", last_sign_in_ip: "127.0.0.1"}
])
# This is used for ActiveAdmin
AdminUser.create!([
  {email: "petyr@baelish.com", password: 'password', password_confirmation: 'password', reset_password_token: nil, reset_password_sent_at: nil, remember_created_at: nil, sign_in_count: 31, current_sign_in_at: "2016-02-07 21:20:55", last_sign_in_at: "2015-12-13 17:53:06", current_sign_in_ip: "127.0.0.1", last_sign_in_ip: "24.242.70.29"}
])
Organization.create!([
  {name: "The North", stripe_customer_id: "", subscribed: true}
])
Post.create!([
  {title: "57 - ember-cli-flash", video_url: "", description: "ember-cli-flash lets you easily create and customize flash messages for your app.\r\n  \r\nFlash messages are useful for notifying users about things such as the effects of their actions.  In this episode, our example is notification of a successful save.", transcript: "null", publish_date: "2015-07-19", links: "* [ember-cli-flash addon](https://www.npmjs.com/package/ember-cli-flash)\r\n* [Github diff for basic flash](https://github.com/jeffreybiles/simpler-ember-sparks-website/commit/1a758b9db858247c4aef9102b706e620fcafb269)", thumbnail_image: "Screenshot_2015-07-07_17.01.39.png", permalink: "57-ember-cli-flash", free: false, difficulty: "intermediate", seconds: 246, wistia_embed: "<div id=\"wistia_hvypq3cbi6\" class=\"wistia_embed\" style=\"width:800px;height:478px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"hvypq3cbi6\");\r\n</script>", code: "", guid: "6b1a6cb822f1791a790e79055881988349ec198a"},
  {title: "56 - ember-pikaday", video_url: "", description: " Pikaday is a great date selector.  ember-pikaday wraps it up nicely as a component.\r\n \r\n In this episode, we explore using ember-pikaday and how to use some of the options.", transcript: "null", publish_date: "2015-07-18", links: "* [ember-pikaday](https://github.com/edgycircle/ember-pikaday)\r\n* [Pikaday](https://github.com/dbushell/Pikaday)\r\n* [my (hopefully temporary) fork](https://github.com/jeffreybiles/ember-pikaday/tree/fix-disabled)\r\n* [moment formatting](http://momentjs.com/docs/#/parsing/string-format/)\r\n", thumbnail_image: "Screenshot_2015-07-07_17.02.12.png", permalink: "56-ember-pikaday", free: true, difficulty: "intermediate", seconds: 252, wistia_embed: "<div id=\"wistia_k6wgmkdug1\" class=\"wistia_embed\" style=\"width:800px;height:478px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"56-ember-pikaday\" /><meta itemprop=\"duration\" content=\"PT4M11S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/0afe7356c462cc5d49818296b74e2528ecda0c4a.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/df82c9a77308f2e1e6c91ac31871ce70961f6384.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=720&hdUrl%5Bsize%5D=24053787&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F81cea4f5e1ec6a2181e6641897237a78d2cf5e34.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=251.98&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F0afe7356c462cc5d49818296b74e2528ecda0c4a.bin%3Fimage_crop_resized%3D800x450&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fdf82c9a77308f2e1e6c91ac31871ce70961f6384.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-07-07T22:00:23Z\" /><object id=\"wistia_k6wgmkdug1_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:450px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=720&hdUrl%5Bsize%5D=24053787&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F81cea4f5e1ec6a2181e6641897237a78d2cf5e34.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=251.98&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F0afe7356c462cc5d49818296b74e2528ecda0c4a.bin%3Fimage_crop_resized%3D800x450&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fdf82c9a77308f2e1e6c91ac31871ce70961f6384.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=720&hdUrl%5Bsize%5D=24053787&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F81cea4f5e1ec6a2181e6641897237a78d2cf5e34.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=251.98&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F0afe7356c462cc5d49818296b74e2528ecda0c4a.bin%3Fimage_crop_resized%3D800x450&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fdf82c9a77308f2e1e6c91ac31871ce70961f6384.bin\" name=\"wistia_k6wgmkdug1_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">Pikaday is a great date selector. ember-pikaday wraps it up nicely as a component. In this episode, we explore using ember-pikaday and how to use some of the options.</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"k6wgmkdug1\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/k6wgmkdug1/metadata.js\"></script>", code: "", guid: "cf0d58da44402ade515ca907d20d13c6abcb1417"},
  {title: "47 - Time series Line Graphs with ember-cli-chart", video_url: "https://www.youtube.com/embed/yNj2Bf8KXzE", description: "Create a time-series line graph with the ember-cli-chart addon.\r\n  \r\nThis screencast shows how to corral unruly data so that it can be used in a time-series graph.", transcript: "", publish_date: "2015-06-15", links: "* [ember-cli-chart addon](https://www.npmjs.com/package/ember-cli-chart)\r\n* [chartjs line chart documentation](http://www.chartjs.org/docs/#line-chart)", thumbnail_image: "Screenshot_2015-06-13_17.31.18.png", permalink: "47-time-series-line-graphs-with-ember-cli-chart", free: false, difficulty: "advanced", seconds: 360, wistia_embed: "<div id=\"wistia_z2tstxdxn8\" class=\"wistia_embed\" style=\"width:800px;height:500px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"z2tstxdxn8\");\r\n</script>", code: "", guid: "153de78a4cc46812bb35cdd196c8d332e8b75e76"},
  {title: "45 - Custom Test Helpers in Ember CLI", video_url: "https://www.youtube.com/embed/ub5FAtv3qvo", description: "Custom test helpers take (some of) the tedium out of testing by letting you reuse steps across tests.\r\n \r\nDiscover how to create them- with all their gotchas and all their glory.", transcript: "", publish_date: "2015-06-07", links: "* [ember-cli documentation](http://www.ember-cli.com/#writing-your-own-test-helpers)\r\n* [emberjs documentation](http://guides.emberjs.com/v1.11.0/testing/test-helpers/)\r\n* [slides](http://slides.com/jeffreybiles/deck-15#/)", thumbnail_image: "Screenshot_2015-05-31_21.01.31.png", permalink: "custom-test-helpers-in-ember-cli", free: false, difficulty: "intermediate", seconds: 153, wistia_embed: "<div id=\"wistia_vo2ihht2gz\" class=\"wistia_embed\" style=\"width:800px;height:500px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"vo2ihht2gz\");\r\n</script>", code: "", guid: "df730e37ab8e85eaa5cf20f7d3f6f9fefaaeef6e"},
  {title: "41 - Mixins", video_url: "https://www.youtube.com/embed/9ffHQa8gOvI", description: "Mixins add flexibility to Ember's Object system. \r\n\r\nIn this episode we see how to create and use mixins, and how they work with the Inheritance Chain.", transcript: "", publish_date: "2015-05-24", links: "* [Ember.Mixin Documentation](http://emberjs.com/api/classes/Ember.Mixin.html)", thumbnail_image: "Screenshot_2015-05-23_19.56.11.png", permalink: "41-mixins", free: false, difficulty: "basic", seconds: 132, wistia_embed: "<div id=\"wistia_nhilr5o9mv\" class=\"wistia_embed\" style=\"width:800px;height:500px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"nhilr5o9mv\");\r\n</script>", code: "", guid: "f6ef607b7be7ea45a28280ac2d999d82c7f4617d"},
  {title: "8: Persistence with Ember Data and Ember App Kit", video_url: "http://www.youtube.com/embed/S-1vV8PnkdY", description: "Connecting to a separate server can be difficult, especially on localhost.  Here's how to do it with Ember Data and Ember App Kit.\r\n\r\n", transcript: "Welcome back to Ember Sparks. Up to now, we've been working solely within the comfortable confines of front-end JavaScript, but it is time communicate with the outside world, to explore the depths of the internet, to expand our world to that of JSON. \r\n\r\nYou can imagine that we are using whatever you're using on the server side, whether that is Ruby, Python, Elixir, Node, Java, PHP or Visual Basic, whatever, it doesn't matter because we'll be showing none of those in this screencast series. However, even though we are only stepping slightly outside the bounds of our application, being able to access JSON API greatly expands what we are able to do.\r\n\r\nFor the purposes of our podcast today, what we are gaining is the ability to process data. Right now, when you make an edit, and then reload the page, your edit is gone.  We want to fix that. Here is an example of the JSON that we'll be using. In this case, it's the post resource accessed via a get call. It's the same type of data that we've been using so far, the same format, but now it's coming from the server. In order to get this API working with our application, we'll need to change just a few things. \r\n\r\nThe first is to change the adapter. Most of you will want the REST adapter, but if you happen to be using active model serializers, then you'll use the ActiveModel adapter.\r\n\r\nNow Ember knows how to expect your JSON to be formatted. If your API is not very consistent, go ahead and check out episode 1 to see how to make a per-model adapter. We'll also need to make sure that Ember data knows the namespace for our API. We'll use the namespace option and just give it a string. In this case, our namespace is api/v1. \r\n\r\nNext we need to setup a proxy server in order to get around Cross Origin Resource Sharing woes, or CORS. CORS is built to protect your website but it is also annoying when you are working in a dead environment. The proxy server is a weird work-around, but with Ember App Kit it's not that hard to pull off. All you have to do to set it up is to put these 3 lines in your package.json. As you can see they'll be replacing the stub method that was there before, and we'll have to put quotes around it, and then of course we'll have to change it that it matches our server's configuration. Then you'll have to restart your Grunt server so that you'll have the new proxies. \r\n\r\nNow our app is loading from the server, but still if we edit something like, say, correcting this spelling error, then if we reload it still won't save. That's because we never tell it to! Fortunately, Ember Data makes this very easy. All we have to do is call this.get('model') and then save that model, and that will happen when we hit the done editing button. Now we can edit it again, we can correct the spelling again, and when we reload we'll see that it has saved. \r\n\r\nAnd that's all there is to it! Of course once you have relationships between your models stuff gets a bit more complicated, but that's for another episode. Happy coding!", publish_date: "2014-04-29", links: "* [Source code](https://github.com/jeffreybiles/ember-sparks-website/tree/8/persistence)", thumbnail_image: "8-persistence-data-and-appkit.jpg", permalink: "8-persistence-with-ember-data-and-ember-app-kit", free: false, difficulty: "basic", seconds: 225, wistia_embed: "<div id=\"wistia_n1thmabb09\" class=\"wistia_embed\" style=\"width:800px;height:500px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"n1thmabb09\");\r\n</script>", code: "", guid: "85e990647f803095824929b729c9f82b2e5ce3c7"},
  {title: "2: Switching to Ember Data", video_url: "http://www.youtube.com/embed/i1Qzaf6lV1Q", description: "If you want your ember application to have a cleaner interface with the server, Ember Data can help.  \r\n\r\nIn this episode, I show how to switch to using Ember Data.\r\n\r\nErrata:\r\n\r\nEmber.FixtureAdapter.extend() should be DS.FixtureAdapter.extend()\r\nthis.store.find('posts') should be this.store.find('post')\r\n\r\n", transcript: "Hello, and welcome to Ember Sparks episode 2! Today I'm going to demonstrate how to get started with Ember Data in a preexisting application. \r\n\r\nEmber Data is persistence library that communicates with your server or database, doing all the hard work so that you'll never have to directly touch Ajax again. The version of the Ember Data that we'll be using is 1.0 Beta- it is much easier to use than the pre-beta versions and much less buggy as well, and there should be very few breaking changes between now and the 1.0 official release. \r\n\r\nThe application that we are going to use is the blogger client that Tom Dale showed us how to create in a screencast last year. It's pretty simple- it has a list of posts and then it has a post resource which you can edit. The current architecture of the app is an array of hashes that is stored on post and then it is called either finding entire array or by finding it by ID. \r\n\r\nWhen you reload, none of your changes are saved. You'll eventually need it to switch to a server. You are going to talk to the server most likely with an Ajax call. However, when your app grows and gains more API end-points and data interactions, you are likely in depth with a big mess of random spaghetti Ajax.\r\n\r\nThis is how the Ember Data architecture will be when we are done today; then when your app grows, your data connection layer will be able to handle it much better. In order to migrate this or any app to Ember Data we need to accomplish 4 task. The first is to add the adapter. The second is create the models. The third is to create either the server, or in this case the fixtures. Finally we need to connect all of the code to the servers, or in this case the fixtures, and in this case we'll connect it using the router. And I almost forgot, we need to take in the Ember Data library, put it in our libs directory and then, in index.html, put it inside a script tag. \r\n\r\nFirst let's add the adapter.  ApplicationAdapter is Ember's name for the top level adapter. We are going to extend FixtureAdapter but in real life situations you'll probably want to connect to a server. \r\n\r\nNext we'll create our models. In this application we are only going to need to make one model, that for post. We are going to subclass it from DS.Model and then we are going to find its attributes. We are going to define a title, and then an author, and then a date, and finally a body. DS.attr signifies that the attribute should be saved between sessions. Notice that we don't define ID; Ember Data does that for us. \r\n\r\nNow we'll setup the fixtures. Luckily, we only have to repurpose the hash that is already there. We are going to store fixtures on the App.Post model- and that is all there is to setting up fixtures when you are using the FixtureAdapter.\r\n\r\nFinally we'll connect the rest of our app to the Ember Data apparatus that we've setup. We'll do this by finding the store, and then asking the store to find posts.  This is for the one that is asking for all of the posts. To find a specific post we ask the store to find one post and then to use the ID and it will automatically know that we are searching by ID. The store has all sorts of cool properties that we won't be addressing today, but the gist of it is that once you've setup the adapter, you will rarely have to think about how you connect to your server. Just ask the store for something and it will figure out how to get it.\r\n\r\nNow we'll try to load our page and -uh-oh!- it looks like there is a problem. Let's see what it says. Apparently there is no Ember.Fixture adapter, that's because it's actually DS.Fixture adapter.  Now our app works again and it is well prepared for the future. \r\n\r\nOf course, if you have a more complicated application that you are trying to convert to Ember Data, it's going to take longer and there are more difficulties that can arise. We'll tackle those nuances and other topics in upcoming episodes. Happy coding!", publish_date: "2014-03-10", links: "* [Source code](https://github.com/jeffreybiles/bloggr-client/tree/1/changing-to-ember-data)", thumbnail_image: "2-switching-to-ember-data.jpg", permalink: "2-switching-to-ember-data", free: false, difficulty: "basic", seconds: 351, wistia_embed: "<div id=\"wistia_458c40ko63\" class=\"wistia_embed\" style=\"width:800px;height:500px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"458c40ko63\");\r\n</script>", code: "", guid: "d75484d9e35a3a5afe7ee396710a540607ebd638"},
  {title: "43 - On Init", video_url: "https://www.youtube.com/embed/V_dJNbn_DBA", description: "Use init to take control of the object instantiation process.\r\n \r\nIn this episode we look at two different ways to use init.\r\n\r\nUpdate: Using .on() is now discouraged, and overwriting init preferred.", transcript: "", publish_date: "2015-05-31", links: "* [init documentation](http://emberjs.com/api/classes/Ember.Object.html#method_init)\r\n* [Proper Use of Ember's on()](http://notmessenger.com/proper-use-of-ember-on/)", thumbnail_image: "Screenshot_2015-05-30_19.51.53.png", permalink: "43-on-init", free: false, difficulty: "intermediate", seconds: 93, wistia_embed: "<div id=\"wistia_66fhv99dnf\" class=\"wistia_embed\" style=\"width:800px;height:500px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"66fhv99dnf\");\r\n</script>", code: "", guid: "327ac146c9975e0be1f1b4bc9e8abebe25a465f8"},
  {title: "31- Ember Inspector 5- Data", video_url: "https://www.youtube.com/embed/5Mthq56uKUI", description: "What can the Data tab in Ember Inspector tell you?  Lots and lots... if you're using Ember Data.", transcript: "The Ember Inspector data tab is a powerful way to view and experiment with all the information that you've stored in Ember Data models. \r\n\r\n## Listing your Data\r\n\r\nHere on the left we have a list of all the types of Ember data models that we've created, so everything that extends DS.Model is here. Then the number beside it shows how many records have been loaded by the client. This particular app is not very well optimized for large amounts, so we've loaded over 2,000 records of the type 'attack'. In a typical app you would want to keep these numbers lower. \r\n  \r\nWhen you click on one of these, it then shows you every every record of that type. It will show you the ID as well as other attributes, although you should note that it doesn't show you every attribute right in this view. There is a way to get to that later. Up top we have new, modified, and clean tabs. What that means is if you just create a new record then it will show up here. We don't have any. If you modify a record it will show up here. If it's synced to the server it will show up in clean. Currently everything is clean. \r\n  \r\nWe can click on one of these. It will bring up the Inspector. Notice that there are indeed more fields than are just shown here. Then we can change one of these. We'll change caves to caverns. Notice that it changes here. This is now caverns. This record is also blue. That's a sign that it's modified. As you can see, it shows up under the modified filter but not under the clean filter. \r\n\r\n## Object Inspecting your Data\r\n\r\nNow let's look at the object inspector. Back in episode 17 we spent the whole episode exploring what you could get out of the object inspector. However, in the Data tab when you're exploring an Ember Data model then there are a few extra things that you have to think about. \r\n\r\nAttributes are the Ember attributes, the ones that you define using DS.attr(). Then you have your belongsTo and hasMany tabs attributes right there. It's convenient that they're separated out. \r\n\r\nYou have the Ember Data flags which help determine the lifecycle, and also DS.Model has stuff to help determine the lifecycle as well.  Owned properties, honestly I'm not sure exactly how those are useful to you, but they're there. \r\n\r\nThen subclass of DS.Model includes everything that's not defined under DS.attr(), DS.hasMany, or DS.belongsTo. Typically this is a lot of computed properties, although I have the item sorting hard-coded, and that shows up here as well. \r\n\r\nThen way down here you've got stuff in Ember core object which everyone has. We'll have an episode on concatenated properties sometime soon.\r\n\r\nThat is the data tab on Ember Inspector. I hope that was useful to you guys. If there's something specific that you'd like me to cover, tweet at me at @jeffreybiles and I'll see what I can do. Thanks and I'll see you guys next week. ", publish_date: "2015-04-18", links: "", thumbnail_image: "Screenshot_2015-04-18_14.53.03.png", permalink: "31-ember-inspector-5-data", free: false, difficulty: "basic", seconds: 241, wistia_embed: "<div id=\"wistia_duvwphvh7i\" class=\"wistia_embed\" style=\"width:800px;height:500px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"duvwphvh7i\");\r\n</script>", code: "", guid: "11e6a5972150fa91891a39ccd115de40f69aceff"},
  {title: "15: Debugging Someone Else's Rubygem", video_url: "https://www.youtube.com/embed/dOYq0VfbDMU", description: "We use a lot of other people's code... but what if their code has a bug?  This screencast shows how to debug someone else's rubygem, and then make a pull request to their project.", transcript: "Hey, and welcome to SparkCast number 15. I spend a lot of time in the Ruby on Rails and the Ember.js ecosystems. While it's great that there's so much code out there, it's not always perfect code. Sometimes you'll find a bug in someone else's Ember CLI add-on or their gem. Today we're going to be talking about the process of debugging someone else's Ruby gem and then committing that change back to the main branch. \r\n\r\nFor our demonstration today, we're going to be using the app we started developing last time in SparkCast 14. We're going to be editing the ember-cli-rails gem. Our first step is going to be to unpack the gem. What this means is that we're going to take the code and dump it out into a directory. We're going to specify the gem and then we're going to specify the target directory, which here will be \"vendor/gems.\" You can see that in our vendor/gems folder, we now have the ember-cli-rails directory and in that there is all the code for the gem. We can look at it and modify it however we want.  For our project to be able to use it, we need to specify that that's where we're getting it from so we will first do the version, which is required if you're doing this. Then, the path which will be \"vendor/gems\" and then the name of the folder. Then, you're going to want to make sure to run bundle install so that you're using your customized version of the gem. \r\n\r\nAt this point, you can start making the changes to the code that you have locally and then you can run your app and see if the gem works correctly. Typically, when you do this you'll be wanting to correct something that's actually causing your app a problem. In this case, for the case of the example, I'm just going to change a little bit of wording on one of the error messages.\r\n\r\nYou could stop here. However, this has the disadvantage of carrying all this code with your app instead of keeping it in a separate repository. It also doesn't propagate your changes to the wider community so no one else would get to benefit from your work. So what we're doing from here on is finding a way to get your work to the rest of the community.\r\n\r\nThe first step is to go to the original repository for the gem and then fork it. There, I've already forked it but if I hadn't this would have created a new one. Now that you have your fork, you grab the URL to clone it, and then you clone it into your own folder, you go into that folder, and then open it up in your text editor. Then you can find the code and make the same changes. \r\n\r\nHere, you're going to want to check out a branch that describes what you're doing and then commit your changes, with a probably better explanation than I'm giving here, because you're going to want to convince the original maintainer that your changes will improve their project. Push this up, and then you can pull request to the original repository. You leave a comment here. Hopefully you can be as literate as I am here, they appreciate that a lot. Then, hopefully you'll get some good comments on your code and some suggestions on how to make it better, as well as acceptance into the original project so that everyone's code is now more awesome. When you're ready, hit Create Pull Request and there you go.\r\n\r\nThat is how you edit, debug, and make improvements to someone else's gem. I hope you enjoyed it, and happy coding!\r\n", publish_date: "2015-02-07", links: "", thumbnail_image: "Screenshot_2015-02-07_19.04.46.png", permalink: "15-debugging-someone-elses-rubygem", free: false, difficulty: "intermediate", seconds: 301, wistia_embed: "<div id=\"wistia_v9kswcu7c9\" class=\"wistia_embed\" style=\"width:800px;height:528px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"v9kswcu7c9\");\r\n</script>", code: "", guid: "58e70b714458ac04a17371c08cdae18ac777dc2c"},
  {title: "26 - Client-side Pagination Part 1- Basics", video_url: "https://www.youtube.com/embed/hmY_0PAYIKk", description: "Pagination is a commonly requested feature.  Here we show basic pagination- using many Ember 1.11 features, including each loop indices and inline if statements.", transcript: "Pagination is a commonly requested feature in a client-side app. The reasons requested is because: Let's say you have a bunch of posts; 200 in this example. You don't want them all displaying on the same page, you want them split up between different pages. Pagination is how you do that. \r\n\r\nToday, we're going to tackle client-side pagination, where all the records have already loaded. When a JSON API pagination standardization comes out, we will do a screen-cast on how to do server-based pagination as well. \r\n\r\n### Cutting it into pages\r\n\r\nTo start, we're going to add default values for page number and page size. We're going to start pageNumber at 0, because it's zero indexed, and then pageSize at 10; and that's arbitrary. Next, we're going to split up our content into pages, based on the content that's there, the page size and which way it's sorted. Sort ascending is there because changing sort ascending changes the order of arranged content, yet it doesn't trigger the observers of arranged content. \r\n\r\nSo we start off with an empty array of pages, we get a copy of the arranged content, and then we go through the arranged content, slicing off parts of it in the amount of the page size. And then we return that array of arrays. We'll also need something to select which page we're on based on the page number. That's the job of paginated content: It'll take the pages array and then the page number and then just select one item from the array. Then, in our handlebars template, we'll replace arranged content with paginated content. That makes it so we're only showing ten records at a time. \r\n\r\n### Choosing the page\r\n\r\nHowever, we currently don't have a way to change which ten records we're showing. Let's fix that by having a list of pages that we can click. We'll put in this chunk of code here, which includes a little bit of styling, and then it has an each loop that lists out the pages. It uses the index, which is a new feature in Ember 1.11. It gives the number of the index of that item. So we can see that in action, here. However, there are two problems right now. The first is that it's zero based instead of starting at one. The second is that you can't click anything. So we'll start by fixing the zero base problem. We'll make a handlebars helper called add-one, which adds one, and then we'll put it there in front of the index. Now, they start at one. \r\n\r\nTo make this a link, let's use a link-to helper; it'll point to posts. The real meat of it will be in the query-params, where we change the page number to the index. Let's also give it a tag name of, \"Button,\" because, I know because I made this thing, that it's going to look better. Let's test this out. It doesn't seem to be doing thing. That is because page number is not exactly query-params yet. Let's fix that. With that fixed, our links work. Everything's working, but we can't tell what page we're on unless we look up here at the query-params. Let's fix that by giving a visual indicator. One great way to do that is to compare the index of the current page to the page number. There's no way to compare the index to the page number using just the controller. \r\n\r\nIn the early days of Ember, you would've had to use an item controller to compare, and more recently you would've had to use component. Thanks to subexpressions and an inline if, there's an easier way; you don't have to create a component just for this one tiny case. Let's create a span tag that wraps around this link-to post. Within the span tag, we'll give it a class, and we'll make that class depend on whether index and page number are equal. If they are, then we'll give them bold and big text class. es-equal is defined just how you'd expect: Taken two values and compare them. If index and page number are equal, it's going to be bold and big text. Let's see it in action.\r\n\r\n### Next time: more features\r\n\r\nThat is the basics on pagination. Along the way, we used the new index syntax for the each loop from Ember 1.11; we reviewed the handlebar subexpressions from episode 24; and we used the new inline if from Ember 1.11. We combined these in order to avoid creating a new component. With just one line, we avoid creating an entire class. In the next episode, we're going to be adding previous and next buttons, as well as a way to change the number of items shown on a page. I'll see you then.", publish_date: "2015-04-04", links: "* [Episode 27: Pagination Part 2- Previous/Next Page Buttons, Change Page Size](/posts/27-client-side-pagination-part-2-previousnext-page-buttons-change-page-size)\r\n* [Github diff](https://github.com/jeffreybiles/bloggr-cli-client/commit/f2e4f79e7c7e29f9700ec9e23f63b438086a39d6)", thumbnail_image: "Screenshot_2015-04-05_02.13.41.png", permalink: "26-client-side-pagination-part-1-basics", free: true, difficulty: "intermediate", seconds: 396, wistia_embed: "<div id=\"wistia_gnsqi6dvc5\" class=\"wistia_embed\" style=\"width:800px;height:528px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"26-pagination-p1\" /><meta itemprop=\"duration\" content=\"PT6M35S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/17c85a5a376cba7604a58174f3e919422b69ecba.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/38be4ee1b99ff9cfe7a7c1eca34f6d2e21f89cc3.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=58039884&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fac633331dcbb1a0dbc9c92eacb4bcb4856b79ad1.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=395.781&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F17c85a5a376cba7604a58174f3e919422b69ecba.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F38be4ee1b99ff9cfe7a7c1eca34f6d2e21f89cc3.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-07-03T03:35:46Z\" /><object id=\"wistia_gnsqi6dvc5_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:500px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=58039884&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fac633331dcbb1a0dbc9c92eacb4bcb4856b79ad1.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=395.781&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F17c85a5a376cba7604a58174f3e919422b69ecba.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F38be4ee1b99ff9cfe7a7c1eca34f6d2e21f89cc3.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=58039884&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fac633331dcbb1a0dbc9c92eacb4bcb4856b79ad1.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=395.781&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F17c85a5a376cba7604a58174f3e919422b69ecba.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F38be4ee1b99ff9cfe7a7c1eca34f6d2e21f89cc3.bin\" name=\"wistia_gnsqi6dvc5_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">26-pagination-p1</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"gnsqi6dvc5\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/gnsqi6dvc5/metadata.js\"></script>", code: "", guid: "76735755f62aaa2bc58a3194dcc250d41f9fc196"},
  {title: "13: ember-easyForm", video_url: "http://www.youtube.com/embed/HPuEcJ9V26I", description: "ember-easyForm makes forms... easier!  I'll show you how to get the plugin into your ember-cli app and then customize how your forms look.", transcript: "Hey, welcome back! Today, we're going to be talking about Ember EasyForm and how to use it in your project. \r\n\r\nThe official documentation recommends that you download one of their builds and then include it manually. However, you can also install it via Bower. The Bower package that we'll have to install is called ember-easyForm-shim. Then, we'll include it in our Brocfile right here. \r\n\r\nThis is the code that we're going to be replacing with Ember EasyForm. However, if you'll look at this code, you'll notice a few problems with it. It's just an input component inside a paragraph tag. If you want to style this, it's going to be very hard. It's also not semantic, so the functionality that we'll be replacing will be much more than this. It will be more like this, having a label and a surrounding class. We're going to get the usefulness of this more verbose code, but with conciseness of what we had before. And it's actually going to be even more concise.\r\n\r\nWe start with a form-for component. The only thing that it requires is a model, an object that it can use. Here, we're handing it the post since that is being passed into the post form component. However, oftentimes this will be model or controller instead of post. The syntax for creating a line is extremely simple. Input and then the name of the variable. We'll take that and use it to attach the value. The value before was post.title and here it's taking it from post, and grabbing title from that. It will also create a label based on the name of the variable you give it, and then it will discover the type based on the Ember data type of that variable. \r\n\r\nLet's put the rest of the fields in there. These top three are regular strings whereas this bottom one, it's going to be a longer string, so we want the text area instead of just the text box, so we have to do as='text'. That will tell Ember EasyForm to use the text area. Finally, we'll add back in our button. \r\n\r\nIt's just like it was before.  If you go to the browser, you'll see that we have our form, just like before. And here's our form and here is the div that wraps the title, you can see right here we have a label, then an input. That is working just like we want it to. We only had to write a tiny bit of code and we're getting a lot of markup that could be useful. \r\n\r\nIf we wanted to style it, there's a few ways we could go about it. We could see that it puts an input class on all of them and it puts a string class on all of them because those are all strings. Then it puts a class based on the variable that we gave it. \r\n\r\nLet's say we wanted to customize the classes that are on these forms. We could put it right here and that would put it on the outer div right here. If you want to customize it even more, you can make the input helper into a block. Here, we've made it so it has a block, and this block happens to recreate what it would normally create otherwise. However, you can put in options here as well as change up the ordering and put in custom markup.\r\n\r\nThere are a lot more cool things you can do to customize ember-easyForm, including making a custom input type and creating a wrapper so you can create different sets of styling for different forms. \r\n\r\nIf you'd like me to tackle one of those two customizations, or if you'd like to suggest another topic entirely, tell me on Twitter. I am @JeffreyBiles. Until next time, happy coding!", publish_date: "2014-06-10", links: "* [ember-easyForm](https://github.com/dockyard/ember-easyForm)", thumbnail_image: "13-ember-easyForm.jpg", permalink: "13-ember-easyform", free: false, difficulty: "basic", seconds: 257, wistia_embed: "<div id=\"wistia_bldkue98ju\" class=\"wistia_embed\" style=\"width:800px;height:500px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"bldkue98ju\");\r\n</script>", code: "", guid: "4354a0fe99a556decaaf8d62208717f4b2ec4372"},
  {title: "11: Refactoring to a Component", video_url: "http://www.youtube.com/embed/_lEIN8zvH3s", description: "Refactoring our new and edit post pages so their shared functionality is contained within a component.", transcript: "Hello and welcome back. Today we're going to be refactoring what we learned last time in to a component. \r\n\r\nYou'll notice that there are lots of similarities. First we have the same four fields and then we have a button that calls the action 'done editing' when you hit it. Here we have an action that saves and then does something else. Just like here we have an action that saves and then does something else.\r\n\r\nWhen you have this pattern of having some template and some code that's connected and similar across two different parts of your app, it might be time for a component because components extract away shared functionality, shared units of functionality. It consists of a class and template, although it will generate the other one of those if you only create one. \r\n\r\nIf you're familiar with Cocoa, you'll notice the Ember Components are very similar to the Cocoa ViewControllers and if you're familiar with Angular, you'll notice that they are exactly the same as an Angular directive that is isolate-scoped, bidirectionally-bound, transcluded and element-restructured. We'll go one by one over what those mean. \r\n\r\nHere we're calling a component called Post Form. We haven't created it yet but let's go ahead and fill out some of what the calling will look like and what variables we're going to give it. \r\n\r\nSo its isolated which means the scope that is here in this template where we have things like title is not going to carry through to the post form. \r\n\r\nLuckily it's also bidirectionally-bound, so it has two-way bindings. So if we do this than it's saying that what's the model here, the thing that we're pulling title and author from because title is just short hand for model.title. We're going to call it post within the component. \r\n\r\nTranscluded has some technical meanings but for the purposes of components, it basically means that you could put custom content into the middle of Component so it will look like this. You'll notice that this looks similar to how a Link to is formed. We won't need that today for this feature so we won't talk more about it. \r\n\r\nFinally, element restricted means that the component will end up being an HTML element. It's a DIV by default. \r\n\r\nNow, let's create the mark-up for our template. I'm putting in a file called postForm.handlebars. It's in the components directory of the templates directory. What I'm going to do first is just cut and paste from the new handlebars and then I'm going to edit to make up for the scope change, because 'model' is now called 'post' and it's no longer implicit. \r\n\r\nLet's go ahead and do this in the editing form as well. When we go to edit our post we'll see that all fields are still there but clicking the 'done' button does nothing because nothing is yet handling that action. Yes, there is this 'doneEditing' action in post.js. However since the component is isolate scoped, it's going to throw away the action before it can get to the post controller so we'll create a new file in the components directory called 'post-form.js'. We're going to be creating something that extends an Ember component.  For now all we'll have on it is an actions hash with the 'doneEditing' action.  Let's go ahead and test this working by logging out a simple and after it reloads we'll go and edit and hit done and it's logged. \r\n\r\nSo now we need to put in the action that we want. You'll notice that things that this and this have in common are that they save the model and then they do something else. We're going to be copying the form of this because it is more general than the form here. Here the order of this is not important. However, here it is important that controller.transition.route happens only after the post is done saving. So we'll use the more general case rather than the specific case where the order doesn't matter.\r\n \r\nSo we're going to save it, and then get our promise, and inside the promise what do we do? Well it's different on each of these. On new it's transitioning to the post route, but when you're within the post, it's just changing isEditing to false, so what we'll need to do is here we're going to pass in an 'afterSave' action, a variable, and this is going to be doneEditing, and we'll go ahead and do that here as well.\r\n \r\nThe 'afterSave' that you're passing in happens to be called the same thing, however, it is doing something different and we'll go ahead and strip these down to their most basic, the things that are unique to them. We'll go ahead and do that with this one as well. And when we go back to post form we will just call 'sendAction' and then we'll give it the 'afterSave' action and pass in the post. \r\n\r\nIf we go to edit a post, we will change this up and then see that it has, indeed, been changed and it's going back to the non-editing state. Then when we create a new post we will try this as well and it transitions to the post page. \r\n\r\nI'm noticing that I cargo-culted the variable name controller from our controller action and that implies that this is the controller scope. It's not. It's the component scope. Of course, Ember didn't care because it's something that we're just using for human readability, but for future users, naming it something like this is very helpful.\r\n\r\nSo now you know how to change part of your code into a component. You can now put a post-form anywhere in your app and it will function very similarly to how our current two post forms work. \r\n\r\nNow have a great week and good luck using this in your own apps.\r\n\r\nIf you're still watching this on YouTube, I have a site now and you can look at all the Spark casts as well as sort them by topic. I hope that's helpful to you and I'll see you next week.", publish_date: "2014-05-20", links: "* [Ember Guides about Components](http://emberjs.com/guides/components/)\r\n* [Presentation comparing Angular Directives and Ember Components](\r\nhttp://johnkpaul.github.io/presentations/emberconf/components-transclude-directives/#/)", thumbnail_image: "11-refactoring-to-a-component.jpg", permalink: "11-refactoring-to-a-component", free: false, difficulty: "intermediate", seconds: 520, wistia_embed: "<div id=\"wistia_6e03ppj1jb\" class=\"wistia_embed\" style=\"width:800px;height:500px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"6e03ppj1jb\");\r\n</script>", code: "", guid: "111ca350a20a0a5f7a645d6e312107f9973087e9"},
  {title: "10: Create and Destroy", video_url: "http://www.youtube.com/embed/g0-DSPH3INc", description: "Our video logging website is in need of new videos... and a way to add them!  Then, once Mistakes Are Made, we'll need a way to delete videos.  On the way, we'll learn a bit about Ember Data and promises.", transcript: "Hey and welcome back. Today we're going to work on our video blogging service again. We're going to make it so you can create and destroy posts. As it is right now you can look at the posts and edit them, but if you want more than one, you're out of luck. We're going to change that. \r\n\r\nWe'll start off by adding a link-to helper to our post template. The button will say 'new post' and will link to the new post route. The application will complain that there's no new post route so let's create it. In our router, we're going to add the new route nested under posts so you'll get to it via the url post/new. Then in the folder posts we'll create new.js. So Ember App Kit will create a new post route that extends Ember.route, and in the model hook we're going to be turning a newly created record.  This means that it won't save it to the server yet until we call save on it later and that's good because we don't want a lot of incomplete posts cluttering up our application. \r\n\r\nOur new post link is here. The page works. Let's see what happens when we click it. Well, it creates a new post, which is what we're expecting, but then nothing is displayed here. That's because we haven't created a template for our new post. So I've created a file, new.handlebars in the post folder which is in the templates folder... and we'll see that it does display. \r\n\r\nNow let's put a form in there. We'll go ahead and use the partial we've previously created for editing. It just has various fields and it shows up. \r\n\r\nAnd now we'll need a button. Let's go ahead and create button and give an action of not 'createRecord' but 'saveRecord'... and we have our button. However, clicking it doesn't do anything because we haven't handled that action. To handle this action, I've created a new controller, and object controller, new.js and it is within the post folder in the controllers folder. So in our actions hash we've created a function called saveRecord. What it does is it gets the model and then it saves it. Let's see what happens.\r\n\r\nSo we're going to create a title called 'tests' -because we're creative- and it's going to be by you, the reader of this video... and we hit save, it maybe saves, let's reload. Yes, it saves! But we're still in the new posts page so we want it to take us to our page. To do that we're going to use Promises. \r\n\r\nSo once the save finishes then we're going to do whatever is in this function which is going to be transitioning to the route post for the post that we just created and here we need to have it on the scope of the controller. The reason we have to do this is because calling the function changes the scope, so we have to grab the scope here, then use it here. And now when we create a new post and just give it gibberish because we don't care anymore, it transfers us directly there. So we know how to create new posts now, however we realize it's pretty embarrassing to have a post called ooeuthoeuth on our blog so we're going to figure out how to create a delete button. \r\n\r\nLet's add a second button with the action of deleteRecord.  Then, when we test it out, nothing handled the action deleteRecord so let's fix that. Here I've added the method deleteRecord and it will get the model and call destroy record on it and then Ember data will take care of the rest. \r\n\r\nSo we'll go here and call delete... and it's gone!  But we're still on the page for it so if we reload, it's not great. So let's go ahead and go to a different route. Call then to get a Promise and so once destroy record is done, we'll be going to the post index route and since we want the controller scope like before we have to do this little trick.  And when you go to the posts, we're going to be deleting this thing and it goes straight back to the index... and that's how you create and destroy records in Ember. \r\n\r\nYou'll notice if you've done integration testing before that our workflow is very similar to doing TDD without integration tests. We knew what we wanted and then we saw what was failing on our way to getting it. I think the visual medium works better for an introductory screencast. However if you're doing your own work, I would recommend using integration tests for this case. \r\n\r\nOne last big announcement is I started a website. It holds all of the Sparkcasts so you could find them all in one place. Enjoy. \r\n", publish_date: "2014-05-18", links: "[Source Code](https://github.com/jeffreybiles/ember-sparks-website/tree/new_post)", thumbnail_image: "10.jpg", permalink: "10-create-and-destroy", free: false, difficulty: "basic", seconds: 402, wistia_embed: "<div id=\"wistia_jbr3l414l8\" class=\"wistia_embed\" style=\"width:800px;height:500px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"jbr3l414l8\");\r\n</script>", code: "", guid: "a7247a8ce408b6705073dd7ebdd97b0b90c5b0b3"},
  {title: "7: Transferring to Ember App Kit", video_url: "http://www.youtube.com/embed/jbNCXmR6_aA", description: "How to transfer your application into Ember App Kit.\r\n\r\n", transcript: "Welcome back to Ember Sparks. This is part two of our three part series on Ember App Kit. In this episode we'll be transferring our old application to Ember App Kit with the goal of making it function exactly as before. To do this we'll have to mold our application to App Kit's file structure, as well as make a few tweaks to make it work. We'll start our investigation of Ember App Kit by looking at index.html which is the first thing you load. It uses script tags to pull in files. You can see here that it uses the variables test and dist, in order to determine whether the environment is test development or production. \r\n\r\nFor this screencast, we'll be working in development. So it loads some environment specific files which are currently mostly empty, and then it loads a bunch of vindert files. These are the ones that we got via bower. Then we load something called app.js and something called templates.js. Note that even though there's an app.js file that we can edit, the one that we're loading is coming from the assets folder.  This is a temporary folder generated by grunt when you run the server. So we can save our code in a bunch of different files, and then grunt will concatenate them all for us into these two files. How it does all this is determined in the grunt file. If you're interested in how all the grunt magic happens, check out this great series of blog posts by Toren Billups. The link will be in the show notes. \r\n\r\nTo help grunt perform it's tasks effectively, we use the ES6 module system. It's under development, but is rapidly gaining support. Especially, within the Ember community. When we want something in our file to be accessible elsewhere, we use the export key word. Ember App Kit currently only supports one export per file, the default export. So we always use the default key word right afterwards as well. Then, once we've done that, we can import the file elsewhere. Like we do up here, and then we pull out the thing that was imported and give it a name. In this case, resolver.\r\n\r\nEmber also does some magical stuff using the thing we exported in the file name. Let me show you an example. Here's the application adapter in our old version of application, and here's our application adapter that Ember App Kit generates for you. Basically we've replaced app.application adapter equals with export default. The file structure is what tells Ember App Kit that it will be app.applicationAdapter since the file path is app/adapters and the file name is application.js. Ember App Kit takes that path, rearranges it appropriately, and comes up with the name.\r\n\r\nLet's transfer one of our own Ember objects. We'll do the post route. So we create a file in the route's folder called posts.js, then we paste in our code. And because of the file name, it'll already know that it'll be app.postroute. So we can just do export default, and Ember App Kit will take care of the rest.\r\n\r\nNow, off screen, I'm going to repeat that for every other Ember object. So I just did all that. All the job's script files are transferred. However, a few things needed to change in order for the app to actually work. The first is in the post model. We couldn't export directly because we had to add on fixtures. So we defined it as a post, not app.post, then we add fixtures to the post, and we do it using reopen class, and then defining fixtures property on the class.\r\n\r\nThe second is in our handlebar's helpers. Previously, we were just putting the name as the first argument to helper, with the ES6 module the names going to be specified by the file name in the path. So we'll switch using make bound helper which returns the helper which we will then feed to the exporter, and the file path will determine how Ember sees the name.\r\n\r\nNow we'll put in our dependencies, moment and showdown. We'll install them using bower install, capital S, and then the name. Let's go ahead and first search, see what exactly the moment one is called, and it looks like it's just moment. So we do bower install -S moment. And now we'll save it in our bower.json file, as well as save the files in the vendor directory. We'll go ahead and do the same thing with showdown. Then we'll have to go into our index.html and put in references to the vendored files.  Here moment defines a global function, global moment function. So we don't need to do anything there, but for showdown we'll have to go into our helper and create an instance of the showdown converter. In our previous one that was done outside of the helper. \r\n\r\nNext, we'll deal with our templates just like with the Ember objects, Ember App Kit will use the name of the file and folders to figure out what to do with the template. In this case, the file and the folders correspond to the ID here. So here, if we wanted to copy this one over, then we would have it in the post folder and in index.handlebars.  Let's go ahead and do that. So we'll go into the templates, and we'll make our posts folder, and put in a file that we call index.handlebars. I'm going to go ahead and take care of the rest off screen. Finally, we'll just copy over our routes into our routes in Ember App Kit, and then our application is fully assimilated into Ember App Kit, and it is indeed working wonderfully.\r\n\r\nHowever, you notice there is a little extra bit of cruft... I'll remove that before putting up the final code. This is stuff that just came with Ember App Kit as an example. \r\n\r\nI mentioned at the beginning of the previous episode that one of my motivations for starting to use a build tool is so that I could connect with a server API, next week I'll show you how to do that. Until then, happy coding!", publish_date: "2014-04-24", links: "* [Source code](https://github.com/jeffreybiles/ember-sparks-website/tree/7/ember-appkit-transfer)\r\n* [Articles on building gruntfiles](http://www.toranbillups.com/blog/archive/2014/04/06/Building-your-own-ember-app-kit-lite/)", thumbnail_image: "7-transferring-to-ember-appkit.jpg", permalink: "7-transferring-to-ember-app-kit", free: false, difficulty: "basic", seconds: 461, wistia_embed: "<div id=\"wistia_uwwdmaolzf\" class=\"wistia_embed\" style=\"width:800px;height:500px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"uwwdmaolzf\");\r\n</script>", code: "", guid: "39368d1b84ddaa7bf9607c90de36d4a6e1f52889"},
  {title: "4: Setting up Testing", video_url: "http://www.youtube.com/embed/dgjn20T218A", description: "Update: This screencast is OUTDATED.  More testing videos coming soon!", transcript: "Automated testing is an idea that's been around for awhile, but it's just now making its way through the JavaScript world. That's because it's only recently that we've been writing significant amounts of code in JavaScript, so there's a need for testing, but unlike in many other software ecosystems, there's no standard way to do it. Check out this list of JavaScript unit testing tools. This is just 1 answer of many to this question. That list is mostly test runners and doesn't get into assertion libraries, integration testing tools, or any of the other things that you'll need to run a full test sweep. Of the 3 test specific tools that we're going to be using in this screencast, it lists only 1 of them. While the JavaScript testing world is highly fragmented there is a testing stack that works really well for us at the front side. I'm going to show you how to duplicate it. \r\n\r\nOur set up is to use npm and Bower to manage to manage our dependencies, Karma is our test runner, Mocha is our test framework, and Chai is our assertion library. First check to make sure that you have npm installed, npm is the Node Package Manager, which helps you download and use packages on your system. Installing it isn't hard but it defers slightly between Mac, Windows, and Linux. In the show notes I've linked to a guide that will help you get it installed. We can download packages individually by typing npm install, then the package name. Let's try it with Bower, we'll go ahead and use the -g tag, that means it's installed globally and we can access it from anywhere in the command line. \r\n\r\nYou'll notice that it installed Bower and all it's dependencies. This method of doing things is fine if you're guaranteed to only run this code from one machine, most people eventually want to share, whether that's with other people or with a production server. You'll end up keeping a list of packages that everyone has to install before they can use the code, so why not just keep the list in a file and have the computer run it? We do that in package.json. Package.json is a json hash, which in our case includes only a hash of dependencies. Our dependencies are Bower, Karma, Karma Mocha, Karma Chai, and Karma Sinon Chai. The stars here mean that we can use any version of the library, so we'll try to get the latest, however, we've locked Karma Sinon Chai down to the 0.1.4 version. Typing npm install into the command line, it installs all of them into the node modules folder, right here. \r\n\r\nBower is another JavaScript package manager, the niche it seems to serve is in managing the files that you would normally package with your front end code. We're going to use it to include Ember and associated packages in our tests. We'll create a Bower.json file, similar to our package.json. You'll see that in this case we're specifying version numbers for most of our packages. We also have to include a name, although I'm not sure why we have to do that. Now when we run Bower install, it will install those packages and their dependencies into the Bower components folder. At this point it's a good idea to add the node modules and Bower components folders to your .gitignore file, if you don't your git commits will be cluttered with changes within your libraries. \r\n\r\nNow we need to set up our test runner, Karma. When you run Karma init in the console you'll be prompted to answer several questions. We're going to say Mocha as a test framework, no to require JS, Chrome Canary for the browser, blank for the code sources, because we'll putting them in by hand later, blank for the exclusions because you don't need any, and yes for autowatch. Now we'll edit our karma.conf file, we'll start by adding the Sign On Chai framework, which is needed to run Chai within our tests. Then we'll manually tell Karma which files to load, we'll load in the Bower files, being sure to specify the correct file in the folder. That's usually has the same name as the library or it's called something like main.js. Then we'll load in the application both app.js and index.html, finally we have our test runner and test framework set up. \r\n\r\nNow we need to actually get a test running, we'll create a file called example-spec.js, then within the example spec we'll make a very simple test. I will explain the functionality of what's happening in here next time. The gist of it is that we're testing that 1 plus 1 is equal to 2. That's testing that our testing framework is working well. We're going to test if this actually works. We're going to call Karma start and specify that file that we've used to define all this. Uh, oh, looks like we have a problem . It appears that we did not include our test file, so let's do that, and restart our test runner. It works. \r\n\r\nThis process only takes about 15 minutes to set up, but it is a bit of a tangle, hopefully Ember CLI and Broccoli will make the complications of this screencast obsolete very soon. The good news for now is that everyone in your team can just use NPM install, and Bower install, and be ready to go. It takes the first person 15 minutes to set it up, but after that it's just a few commands away. Next week we'll do some real tests in Ember, until then, happy coding. ", publish_date: "2014-03-20", links: "* [Npm](https://www.npmjs.org/)\r\n* [Bower](http://bower.io/)\r\n* [Karma](http://karma-runner.github.io/0.12/index.html)\r\n* [Mocha](http://visionmedia.github.io/mocha/)\r\n* [Chai](http://chaijs.com/)\r\n* [Source code](https://github.com/jeffreybiles/bloggr-client/tree/4/testing-setup)", thumbnail_image: "4-setting-up-testing.jpg", permalink: "4-setting-up-testing", free: false, difficulty: "intermediate", seconds: 410, wistia_embed: "<div id=\"wistia_0ipwtxcz3i\" class=\"wistia_embed\" style=\"width:800px;height:500px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"0ipwtxcz3i\");\r\n</script>", code: "", guid: "6b1b44e1f8b1bd0b7e00f6583be8754dffbd07c2"},
  {title: "48 - Upload a File as Part of a Form", video_url: "https://www.youtube.com/embed/35DvgjeLrDw", description: "We want to have an image associated with a post.  We need it to be saved at the same time as the post.\r\n\r\nWe'll be using the ember-cli-form-data addon to help us accomplish this.\r\n\r\nAlso included is a short bonus section for Rails users on how to setup your server side framework to accept the payload that Ember is giving you.", transcript: "null", publish_date: "2015-06-20", links: "* [ember-cli-form-data addon](https://www.npmjs.com/package/ember-cli-form-data)\r\n* [carrierwave](https://github.com/carrierwaveuploader/carrierwave)\r\n* [carrienwas-aws](https://github.com/sorentwo/carrierwave-aws)\r\n* [github diff](https://github.com/jeffreybiles/simpler-ember-sparks-website/commit/c26f3e1e2aa0e6b58ed9362e0f97f75c849a6c41)", thumbnail_image: "Screenshot_2015-06-20_20.30.17.png", permalink: "48-upload-a-file-as-part-of-a-form", free: true, difficulty: "intermediate", seconds: 362, wistia_embed: "<div id=\"wistia_0dra5hl9gl\" class=\"wistia_embed\" style=\"width:800px;height:500px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"Upload a File Within a Form\" /><meta itemprop=\"duration\" content=\"PT6M1S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/841c349e2edebf00eb23348d2680ce72927bb41a.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/c408d618537e9484d0235cdb2dbe8731c03d970d.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=30379586&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fd4dd580943fe4ad57cbd62e67360a791971294bc.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=361.926&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F841c349e2edebf00eb23348d2680ce72927bb41a.bin%3Fimage_crop_resized%3D640x400&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fc408d618537e9484d0235cdb2dbe8731c03d970d.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-06-21T03:47:40Z\" /><object id=\"wistia_0dra5hl9gl_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:500px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=30379586&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fd4dd580943fe4ad57cbd62e67360a791971294bc.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=361.926&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F841c349e2edebf00eb23348d2680ce72927bb41a.bin%3Fimage_crop_resized%3D640x400&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fc408d618537e9484d0235cdb2dbe8731c03d970d.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=30379586&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fd4dd580943fe4ad57cbd62e67360a791971294bc.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=361.926&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F841c349e2edebf00eb23348d2680ce72927bb41a.bin%3Fimage_crop_resized%3D640x400&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fc408d618537e9484d0235cdb2dbe8731c03d970d.bin\" name=\"wistia_0dra5hl9gl_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">Upload a File Within a Form</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"0dra5hl9gl\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/0dra5hl9gl/metadata.js\"></script>", code: "", guid: "da81353bf8aa876ea3db2686b7b7eb57b89965df"},
  {title: "38 - ES2015: Functions minus 'function'", video_url: "https://www.youtube.com/embed/ydbE2qoKvQU", description: "ES2015 (aka ES6) has some great ways to make your code easier to write and understand.  In this episode, we cover two different ways that you can make your code clearer by removing the 'function' keyword.", transcript: "", publish_date: "2015-05-16", links: "* [Fat Arrow documentation](https://babeljs.io/docs/learn-es6/#arrows)\r\n* [Blog post mentioning ES2016 decorator syntax](http://emberjs.com/blog/2015/05/13/ember-1-12-released.html#toc_new-computed-syntax)\r\n* [Slides](http://slides.com/jeffreybiles/deck-8#/)", thumbnail_image: "Screenshot_2015-05-16_19.28.09.png", permalink: "38-es2015-functions-minus-function", free: true, difficulty: "basic", seconds: 283, wistia_embed: "<div id=\"wistia_zoldjc8p9x\" class=\"wistia_embed\" style=\"width:800px;height:500px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"38-es2015-functions-minus-function\" /><meta itemprop=\"duration\" content=\"PT4M42S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/3a748e1837bcf7c524c1ea3e86da4fb8cc3d7e55.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/5193048acb00d0ae26c33dd82e4c30bad7a065e8.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=12425200&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F24a7298e52de97dbb466de17544f94f0ed7080cd.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=282.746&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F3a748e1837bcf7c524c1ea3e86da4fb8cc3d7e55.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F5193048acb00d0ae26c33dd82e4c30bad7a065e8.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-06-21T15:26:18Z\" /><object id=\"wistia_zoldjc8p9x_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:500px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=12425200&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F24a7298e52de97dbb466de17544f94f0ed7080cd.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=282.746&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F3a748e1837bcf7c524c1ea3e86da4fb8cc3d7e55.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F5193048acb00d0ae26c33dd82e4c30bad7a065e8.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=12425200&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F24a7298e52de97dbb466de17544f94f0ed7080cd.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=282.746&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F3a748e1837bcf7c524c1ea3e86da4fb8cc3d7e55.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F5193048acb00d0ae26c33dd82e4c30bad7a065e8.bin\" name=\"wistia_zoldjc8p9x_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">38-es2015-functions-minus-function</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"zoldjc8p9x\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/zoldjc8p9x/metadata.js\"></script>", code: "", guid: "0b6bc8b18cd6c65cc0c0ee98ec80304f5745abb5"},
  {title: "14: ember-cli-rails", video_url: "https://www.youtube.com/embed/yYGZ2NTe3FM", description: "ember-cli-rails can help make Ember and Rails work together in one repository.  In this screencast, we set up a very simple app using the tool.", transcript: "Hey, and welcome back to SparkCasts. Today we're going to be talking about ember-cli-rails. It's a way to use Ember CLI within your rails app so you get to have the add-ons and the conveniences of Ember CLI while still keeping everything in one application.\r\n  \r\nThe ember-cli-rails ReadMe is pretty good if you already know your way around Rails and Ember CLI. What we're going to be doing today is making a very simple ember-cli-rails app from scratch. We're going to start by creating a Rails app and we're going to call it API since that is the purpose of it. We're not going to use Rails API because I've done this before. I ended up having some troubles with some gems that wouldn't work properly without some of the things that Rails API cut out. \r\n\r\nNext, install Ember CLI if you haven't already. Then, generate a new Ember app by typing \"ember new\" and then the name of the app, which for us will be called \"client.\" You'll notice, when we go in here that it's already created a git repository for us. We're going to want to remove that so that we can make our own git repository in the folder that contains both our rails app and our Ember app.\r\n\r\nNow that we've initialized both our rails app and our Ember app we're going to make some changes so we can get them working together. First, we'll open up our editor and go to our gem file. Turbolinks is great for vanilla Rails apps but it messes up ones that rely heavily on AJAX, so we'll take it out. We'll replace it with ember-cli-rails. Then we will run bundle, we will go into our Rails folder and then run bundle, and it's installed.\r\n\r\nOf course, before we forget, we should go to our Javascripts assets folder in application.js and remove turbolinks because Rails will complain if we don't. \r\n\r\nember-cli-rails comes with a Rails generator which will give use some of the things that we need to connect them. We will run the initialize generator. What this creates is an initializer file and this is showing that we have one Ember CLI app. You can have multiple apps and you can also change where they are. To make it recognize this one, we are going to have to move up a level and then to client since I'm doing my folder structure a little bit differently than ember-cli-rails expects.\r\n\r\nNext, we're going to have to go into our Ember CLI folder and install the ember-cli-rails add-on using npm. This tells Ember CLI that it's going to be talking to rails through ember-cli-rails. \r\n\r\nNow, let's get rails talking to Ember CLI. We'll first create a route and the root route will go to the applications controller, the index action.  We'll create the index action and in here, we'll render the index view. We will then create a new folder called application in our Views folder and in there we will create index.html.erb. Here, we'll include these two tags which will bring in our Ember assets. \r\n\r\nFrom there, we'll go back to the folder which has our rails and then we will start up the server.  Go visit our website at localhost:3000, which is where your rails normally lives, and it works. If you bring up the developer console, you can see that it is indeed loading Ember. If you want to check out this app, then you can go to ember-cli-rails demo on my GitHub repository. I'll include this link in the show notes. Be sure to go to the commits and then check out what I had to change in order to make them work together.\r\n\r\nThis has been the first SparkCast of 2015 and I hope there will be many more. I'll see you soon.", publish_date: "2015-01-31", links: "* [ember-cli-rails gem](https://github.com/rwz/ember-cli-rails)\r\n* [Code here](https://github.com/jeffreybiles/ember-cli-rails-demo)\r\n* [Specific changes required here](https://github.com/jeffreybiles/ember-cli-rails-demo/commit/8b070a0c0d5c9d5cacffbb16164ac67a64b08505)", thumbnail_image: "wAxdFcn3Z4sCyP8EIoT4XOqThVa6NMQ6HEwiqQtJt7s.png", permalink: "sparkcast-14-ember-cli-rails", free: false, difficulty: "basic", seconds: 300, wistia_embed: "<div id=\"wistia_t4pz864ep5\" class=\"wistia_embed\" style=\"width:800px;height:500px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"t4pz864ep5\");\r\n</script>", code: "", guid: "42997a39151e0e49519792c363189e213ce53b62"},
  {title: "24 - Handlebars Subexpressions", video_url: "https://www.youtube.com/embed/F9eob2xJeRI", description: "You can put handlebars helpers inside your handlebars helpers.  Handlebarception!\r\n\r\nLearn how and when to use subexpressions, as well as how to compose them and use them to replace properties on the controller or component.", transcript: "In our last episode, we showed this piece of code. It's a link-to helper, and then it has this thing in parentheses, that I told you was a subexpression. Today, we're going to be exploring more of what it means to be a subexpression.\r\n\r\n### Subexpressions Theory\r\n\r\nA subexpression is basically a handlebars helper that's used within a mustache, usually either another handlebars helper or a component. The subexpression collapses down into another argument. So outer expression here takes two arguments, one of which is the result of the subexpression.\r\n\r\nSo once again, the outer expression can be a component, a handlebars helper, or any mustache that takes an argument. Meanwhile, the subexpression has to be a handlebars helper. Let's look at an example.\r\n\r\nThis is the handlebars helper that we've created called es-equal (Ember Screencast Equal). I'm doing the ES because you have to have a dash to use Ember CLI handlebars helpers with their defaults. As we can see, it takes just two arguments and checks if they're equal. Then down here, we can use it here. Rather than defining a property called hatIsBlue, in the component or controller, we just compose it in the handlebars. \r\n\r\nHere are two other simple examples, \"es-and\" and \"es-not.\" How you use them is pretty self-explanatory. Let's look at them both together. Here, we have es-and with selected sort with es-not is ascending. es-not is ascending collapses down to a boolean, which is then fed as the second argument to es-and so you can compose subexpressions as much as you want. Bonus points to the first person who recreates Lisp in subexpressions. \r\n\r\n### Apply to our Tables example\r\n\r\nThat's the theory. Let's apply it to the example app that we've been using. We'll start by adding the es-not and the es-and helpers, just like we saw them before. We're going to use them to replace the upArrowHighlighted property and the downArrowHighlighted property. You can see that the upArrowHighlighted property is when both isSelectedSort and isAscending are true. We use es-and for isSelectedSort and isAscending. downArrowHighlighted is very similar, except we want it to only accept if isAscending is false. With those in place, we can now remove these two properties from the component.\r\n\r\nIs it a good idea to replace properties on the component with nested subexpressions in handlebars? That's really up to the situation. In this case, it's a toss-up because both of them are fairly clear because we named it ", publish_date: "2015-03-28", links: "* [handlebars docs](http://handlebarsjs.com/expressions.html)\r\n* [pro episode: advanced handlebars](/posts/25-advanced-handlebars-option-hashes-and-more)\r\n* [Github diff](https://github.com/jeffreybiles/bloggr-cli-client/commit/07864f3c2396c9eebe151eb369e6e905359c26dd)", thumbnail_image: "Screenshot_2015-03-29_11.16.44.png", permalink: "24-handlebars-subexpressions", free: true, difficulty: "basic", seconds: 298, wistia_embed: "<div id=\"wistia_2sy0e95x36\" class=\"wistia_embed\" style=\"width:800px;height:528px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"24-subexpressions\" /><meta itemprop=\"duration\" content=\"PT4M57S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/9c534cf8c082c146e3a5b6f821377dd51b373b76.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/9faf7534084ae13a34ac57cf460ec4335eab1d22.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=18606696&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F2917983ce8b969547b431fb89c880158d3ac4826.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=297.491&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F9c534cf8c082c146e3a5b6f821377dd51b373b76.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F9faf7534084ae13a34ac57cf460ec4335eab1d22.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-07-03T03:35:15Z\" /><object id=\"wistia_2sy0e95x36_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:500px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=18606696&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F2917983ce8b969547b431fb89c880158d3ac4826.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=297.491&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F9c534cf8c082c146e3a5b6f821377dd51b373b76.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F9faf7534084ae13a34ac57cf460ec4335eab1d22.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=18606696&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F2917983ce8b969547b431fb89c880158d3ac4826.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=297.491&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F9c534cf8c082c146e3a5b6f821377dd51b373b76.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F9faf7534084ae13a34ac57cf460ec4335eab1d22.bin\" name=\"wistia_2sy0e95x36_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">24-subexpressions</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"2sy0e95x36\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/2sy0e95x36/metadata.js\"></script>", code: "", guid: "18cfc00db1ead55f8697f85777154e9b4b2f63dd"},
  {title: "1: Custom Adapters for Ember Data", video_url: "http://www.youtube.com/embed/a3KGITKNbeQ", description: "Ember Data works really well with a RESTful API.  But you have a problem: your server API was designed by a drunken ferret and is already being used by several other clients.  How can you get Ember Data to work with it?", transcript: "I was working on my new project, Facebook for Ferrets, and my controller was trying to find a ferret but it couldn't. The URL ferret/12 didn't match any routes that I had in my API. That's because I let my pet ferret define my API, so instead of a restful API, he created something a little bit different. We're going to investigate and see how we can change Ember to match the API. \r\n\r\nWe're going to start by seeing that we've used the rest adapter, so it'll expect a restful URL. This is how the rest adapter is defined and we have the find functionality, which creates an AJAX call to whatever is defined in \"\"Build URL.\" For my first implementation, I just decided to completely overwrite find with the URL that I needed.\r\n\r\nHowever, as you can guess, the second that I wanted to do anything besides find a ferret, this created problems... so I used a custom adapter. The ferret adapter will only take effect when I'm trying to find a ferret. If I need to find an owner or the breed of mice, then I'll use the typical rest adapter, but if it's trying to find a ferret, it'll look for 12-ferretses. This is awesome.\r\n\r\nHowever, we soon need to do more than call for just one ferret. We need to ask the server for all the ferrets. In a restful URL, it would just be /ferrets. However, my pet ferret has decided to store those at /wonderful/ferretses. If you call find without an ID or any arguments, eventually you'd go to find all in the rest adapter. Find all, as you can see, calls \"Build URL.\"\r\n\r\nAs a matter of fact, a lot of things call \"Build URL,\" not just find and find all, but find query, find many, find has many, find belongs to, create record, update record, and delete record. We could update all 9 of these things individually but that is exhausting. It's much better if you have an API that makes some sort of sense to just update \"Build URL\".\r\n\r\nThis, what you're seeing here, is the default implementation of \"Build URL,\" which you can overwrite. If you can keep your API under some sort of control, it's better to use \"Build URL\" instead of overwriting every single one of those 9 that you use. However, even if you don't, Ember data still has your back.\r\n", publish_date: "2014-03-04", links: "", thumbnail_image: "1-custom-adapters-in-ember-data.jpg", permalink: "1-custom-adapters-for-ember-data", free: true, difficulty: "advanced", seconds: 168, wistia_embed: "<div id=\"wistia_20l5gr8zb7\" class=\"wistia_embed\" style=\"width:800px;height:500px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"custom adapters for ember data\" /><meta itemprop=\"duration\" content=\"PT2M48S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/069d4e853cbc00e19673710961bbe55133b80005.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/7508bb9bcaa2fc4d38359f254e8192c4c84957f3.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=17539062&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F460062669c06a94aa0717a9bf16dc49f47e83b14.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=168.086&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F069d4e853cbc00e19673710961bbe55133b80005.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F7508bb9bcaa2fc4d38359f254e8192c4c84957f3.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-07-03T04:34:45Z\" /><object id=\"wistia_20l5gr8zb7_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:500px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=17539062&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F460062669c06a94aa0717a9bf16dc49f47e83b14.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=168.086&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F069d4e853cbc00e19673710961bbe55133b80005.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F7508bb9bcaa2fc4d38359f254e8192c4c84957f3.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=17539062&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F460062669c06a94aa0717a9bf16dc49f47e83b14.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=168.086&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F069d4e853cbc00e19673710961bbe55133b80005.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F7508bb9bcaa2fc4d38359f254e8192c4c84957f3.bin\" name=\"wistia_20l5gr8zb7_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">custom adapters for ember data</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"20l5gr8zb7\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/20l5gr8zb7/metadata.js\"></script>", code: "", guid: "88cabd7f756e1d87dcb6f7cc672041265fe771c3"},
  {title: "102 - Ember Data 2.0: Model States and Flags", video_url: nil, description: "This was going to be a simple episode looking at ‘isEmpty’, ‘isValid’, and methods like that... but digging into them uncovered the far more interesting ‘currentState’, which lies behind not only them but over a dozen separate properties and events on DS.Model.\r\n\r\nIn this episode we explore the hierarchy of states using my [Model State Explorer](https://ember-data-model-states.pagefrontapp.com/), seeing how this structure interacts with various properties and events (but mostly the properties) on DS.Model.\r\n", transcript: "When I first started researching this episode, I was looking into all these different properties which were seemingly related, but on the surface it was difficult to tell how. \r\n\r\n\r\nSo all these `is` xproperties are telling you something about the state of the model, of the data that you’re working with. And turns out there’s a private property called the `currentState`, and there are  a select number of states that it can be in that are in a specific hierarchy. So we’re going to go over the hierarchy today and how it demonstrates to all of these properties. \r\n\r\n\r\nTo help us do that, I’ve built a demonstration. This demonstration, it has all these, and it maps out which flags are true in which state. You can find this demonstration at this address and go over it yourself. The rest of this presentation will be pointing out patterns that I’ve noticed.\r\n\r\n\r\nSo here’s some obvious things. `isDeleted` is only true in the deleted branch of the hierarchy. `isDirty` is true in a surprising number of places. Basically it’s not dirty, this is easier to say. It’s not dirty if it’s empty, if it’s loading, if it’s loaded and saved, or if it’s deleted and saved. Everything else, dirty. `Empty` is just an empty state. `isLoading` is just in a loading state. `isLoaded` is everything else. And so `isEmpty`, `isLoaded` and `isLoading` form a set that is... it covers everything except root and it doesn’t overlap at all.\r\n\r\n\r\n`isNew`, unsurprisingly, it’s in the created state and its children, might also be the invalid here, I’m not sure. By the way, if any of you are heavily involved with Ember data  core and you see a problem here, go ahead and shoot me an e-mail and/or a pull request and I will correct this.\r\n\r\n\r\n`isSaving` is only true in the various `inFlight` states, and `isValid` is true everywhere except where it’s explicitly not true. \r\n\r\n\r\nThere’s some other things that are also affected by the state. For example, the `dirtyType` can be created, updated, or deleted. And you can guess, the `dirtyType` will be deleted here, created here, and updated here. \r\n\r\n\r\nOf course a model doesn’t stay in one state. It transitions to other states. This happens at the most direct level through the `transitionTo`. That’s a private method. Don’t use it. Notice it disappears when I uncheck ‘Private’. And this `transitionTo` is usually called by one of the events, which are public methods. And these usually get called by the internal model or something like that. \r\n\r\n\r\nAnyway, there’s a lot there and I’m not going to cover all of it in this episode. Just if you’re wanting to dig really deep, that’s a good place to start for transitions. \r\n\r\n\r\nSo to make this app, to get all this information, I dug pretty deep into the source code and I also did a few cool tricks with the Ember code. So next week, I’m going to give you a quick tour of the `states.js` file, where I got all this information. Alright, I will see you then.\r\n", publish_date: "2015-12-23", links: "* [Model State Explorer](https://ember-data-model-states.pagefrontapp.com/ )\r\n* [RootState API docs](http://emberjs.com/api/data/classes/DS.RootState.html )\r\n* [DS.Model API docs](http://emberjs.com/api/data/classes/DS.Model.html )\r\n", thumbnail_image: "Screenshot_2015-12-06_21.32.24.png", permalink: "102-ember-data-20-model-states-and-flags", free: true, difficulty: "intermediate", seconds: 230, wistia_embed: "<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script><div class=\"wistia_embed wistia_async_rnon6cadzv\" style=\"height:528px;width:800px\">&nbsp;</div>", code: "", guid: "4a590d761bc791bf5cbc656df8dafb6b246ffaf2"},
  {title: "103 - Ember Data 2.0: states.js Deep Dive", video_url: nil, description: "We’re diving deep into the `system/models/states.js` file from the Ember Data source code.  I’ll walk you through it, pointing out the highlights, showing how I got the information for the Model State Explorer, and going more into depth than I did last episode.\r\n    \r\nSomething to note that I forgot to mention in the video: these nested hashes inherit properties from the parent hash, including flags and methods (presumably through an extra processing step somewhere, since hashes don’t normally inherit like that).\r\n", transcript: "Last episode, I introduced the Ember Data Model State Explorer, which helps you explore different states within the Ember Data Model and the different flags that you can have on each. \r\n\r\n\r\nToday, we’re going to dig deeper into the source code in `states.js`, and this is where I got all the information to create the model explorer. So I’ll go over the general structure of the states file. Let’s get started.\r\n\r\n\r\nSo most of the data in `states.js` is based on these hashes. So the `RootState` is one of the hashes. It contains most of the other hashes. And it starts off by having all the flags as false, except `isValid` which is true. \r\n\r\n\r\nThen below this we get our first event definition. Here it’s a default event which is just a plain function. And then underneath that we have a definition of `unloadRecord`. Remember, `unloadRecord`, it’s not an event. It’s a method that you can call on a model. \r\n\r\n\r\nSo this is a default one and you can see that it is redefined in several other states. So based off that, you can see that in different states, calling the same method may do different things, even though generally it’ll look the same to a user because it’ll be a bad API if it didn’t. \r\n\r\n\r\nAlright, so inside this default `unloadRecord`, you’ll notice that we have our first `transitionTo`. And remember that’s a private method, and we’re transitioning to `deleted.saved`. \r\n\r\n\r\nAlright, so the default is if you `unloadRecord`, that’s a state it goes to. \r\n\r\n\r\nAlright, so we scroll down and we’re getting to some `SUBSTATES`. Here’s the `empty` substate. That is one without any child states, and the big difference is the `isEmpty` is true, the flag is true, and then it has some other events defined. These events of course typically include a `transitionTo` as well as some other work that they do. \r\n\r\n\r\nAlright, we scroll down, and we have the `loading` state, and it’ll set the `isLoading` flag to true, and then it’ll once again, it will define some more events, and then it defines the exit method which is presumably used when you’re exiting the `loadingState`.\r\n\r\n\r\nNow we’ll scroll down and here where things are getting more interesting because we have `loaded`, and then it has even more nested stuff, like `saved`. And we have an additional property called `initialState`, and here it’s `saved`, so if you transition to `loaded`, then it’s actually transitioning to `loaded.saved`. I think that’s how that works.\r\n\r\n\r\nAnd so another fun thing about reading source code is that you get to know what things people aren’t sure about, and this is definitely not in the docs. \r\n\r\n\r\nAlright, so when we’re getting  to save, `saved` which is a subset of `loaded`, so we’re in `root.loaded.saved` now, and it looks like we’ve got some setup to do and then of course defining events, a lot more here than there were in the last few. \r\n\r\n\r\nAlright, and here it gets a little bit more interesting because we have the `createdState` and `updatedState`, and those are created elsewhere. So remember that these are created elsewhere. We’re going to come back to those. \r\n\r\n\r\nFirst we’re going to go through `deleted`. So `deleted`, a lot of it is the same story. You’ll notice that we have the `dirtyType` as well, we mentioned that in the last episode, and its initial state is `uncommitted`. And so we set certain flags, it goes to `uncommitted`, it sets up more events, and `inFlight` once again sets up flags, sets up events, `saved`, `inValid`, same thing. \r\n\r\n\r\nAlright. So that’s the end of the file. Now let’s go back to where our `createdState` and `updatedState` are. So `createdState` and `updatedState` are both built off something called `dirtyState`, and they have a few differences. One of the big ones is their `dirtyType`, as well as a few extra things that are `changed`. It looks like these are events that are `changed`. \r\n\r\n\r\nLet’s go ahead and find the `dirtyState` and see what’s there. So it’s `defined` up here, and the `initialState` is `uncommitted`, and so that goes for both the `created` and `updated` substates within `loaded`. This is a very similar story to what we had before. We’re setting flags and then we’re setting events. \r\n\r\n\r\nAnd a lot of this is really similar to what we saw in `deleted` and its substates, and I guess the reason why they didn’t do `dirtyState` for `deleted` as well is because these go to `committed` by default and `deleted` goes to `saved`, and these `saved` is coming off of `unloaded`, not off of... Here, I’ll show you. `deleted` has `saved` whereas for the `loaded` `created` and `loaded` `updated`, `saved` is up a level under `loaded`. \r\n\r\n\r\nAnd so that is our deep dive into `states.js`. So you can see we’re getting back to the `RootState` here. I hope you enjoyed it and I hope it makes you more confident in digging into the source code as well as understanding the states and flags in Ember Data Models. \r\n", publish_date: "2015-12-26", links: "* [Model State Explorer](https://ember-data-model-states.pagefrontapp.com/ )\r\n* [RootState API docs](http://emberjs.com/api/data/classes/DS.RootState.html )\r\n* [states.js](https://github.com/emberjs/data/blob/v2.2.1/packages/ember-data/lib/system/model/states.js )\r\n", thumbnail_image: "Screenshot_2015-12-06_21.33.40.png", permalink: "103-ember-data-20-statesjs-deep-dive", free: false, difficulty: "advanced", seconds: 351, wistia_embed: "<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script><div class=\"wistia_embed wistia_async_jsu83rmvrk\" style=\"height:528px;width:800px\">&nbsp;</div>", code: "", guid: "87052ac4b4c136c8f364d0f0318a8c4ad7e0797b"},
  {title: "21 - Sort Arrows (and refactoring into a component)", video_url: "https://www.youtube.com/embed/n00DBJDqlcE", description: "Make the sorting interface more flexible.  Along the way we'll cover components, tagName, actions, and displaying unicode.", transcript: "Today, we’re going to be building on the sorting that we created last time.  We’ll first create arrow buttons so that we can easily choose the direction we want the page to be sorted in in one click.  Then we’ll refactor those into a nice DRY component.\r\n\r\n\r\nSo first, let’s get the arrow graphics.  I got them from amp-what, a site for searching unicode.  Let's put in the unicode codes as properties.  Then we’ll display our arrows.  We’ll start with the down arrow... But oops, it seems to just be showing the unicode string, so let’s use a triple mustache to return unescaped html.  And we have our arrow. We can repeat this with the up arrow.\r\n\r\nTo get these to work like we expect, we’ll need to change our sortBy action.  Let’s move our action from the header to the arrow button, and then let’s specify true or false for sortAscending. Then in our postsController we can change the action to take the sortAscending parameter, then set the sortAscending property on the controller based on it. It works!  Now let’s repeat it for the rest of the columns.\r\n\r\nThis is an improvement on the last iteration, but there are two problems.  First, there’s a lot of code to create a new column. Second, there’s no visual feedback to tell you which sort is in effect.  Fortunately, components can solve both of those problems.\r\n\r\nLet’s start by considering what we want our component call to look like.  Let’s call it sortable-header.  We see that there are two differences between all four iterations of the sort arrows.  They are the title and the sorting property.  So let’s pass those in as variables.  We’ll also pass in sortBy as our action, since we’ll need to propagate it out of the component.  We’ll repeat that for all four headers.  This code is way shorter and more readable!  But it’s also not implemented yet.\r\n\r\nTo create our component, we’ll go to the command line and use the generator.\r\n\r\nThen we’ll go to the template and paste in what we had from before.  We’re going to use our title variable to replace Updated, and our sortProperty variable to replace updatedAt in the action. If we try to look at our page, we’ll see that there are a couple of problems.  \r\n\r\nFirst, the arrows don’t show up.  Second, all the headers are stacked on top of each other.  Third,  if we click on one of the buttons, we’ll get an error that says there is no action handler for sortBy.  We’ll tackle those one at a time.\r\n\r\nFirst, the arrows aren’t showing up because the upArrow and downArrow properties are on the controller and not the component, and components do not receive any properties from the controller except those that are explicitly passed in. Let’s take the arrow code properties, cut them from the controller, and paste them into the component. Our arrows show up.  \r\n\r\nOur headers are still stacked, and that’s because you’ll see that the table headers are wrapped in a div. Components have a tag, and it’s div by default.  Let’s override that and have a tagName of ‘th’. That means we can remove the th from the template. The table headers are how we expect.\r\n\r\nFinally, let’s add an action to the component.  We’ll take in two arguments, then just send them up the chain to the action in the controller.  Notice that in the component we use ‘sendAction', whereas in controllers and routes we use ‘send’. And it’s back to working like we expect.\r\n\r\nIn this episode we added a feature, noted its verbosity, then abstracted it away to a component. In the next episode, we’ll take advantage of our component architecture and use it to add a visual indicator of which sorting method is selected.  I’ll see you then.", publish_date: "2015-03-15", links: "* [Unicode search](http://www.amp-what.com/unicode/search/)", thumbnail_image: "Screenshot_2015-03-15_03.36.56.png", permalink: "21-sort-arrows-and-refactoring-into-a-component", free: false, difficulty: "intermediate", seconds: 305, wistia_embed: "<div id=\"wistia_0pjese41ls\" class=\"wistia_embed\" style=\"width:800px;height:528px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"0pjese41ls\");\r\n</script>", code: "", guid: "c3ddb849dd5f44e0ddd524204367606f195eee68"},
  {title: "29 - Dynamic Toggling of Tables", video_url: "https://www.youtube.com/embed/02m4H4KRW1A", description: "When I first coded this I got positively giddy imagining the possibilities.\r\n\r\nGive your user crazy amounts of control in what information they see, letting them select which columns of data they see, and save it through the power of query-params.", transcript: "In episode 28, the last episode, we abstracted away the idea of columns so that we could loop through the columns instead of hard-coding each different column that we wanted to display. The results ended up looking mostly like we had before. Today, we're going to take advantage of that abstraction and use it to toggle the different columns.\r\n\r\nRight now, to choose the columns that we display, we just take all the available columns and display all of them. Let's create another property, call it 'columns used', in which we'll list out the columns that we want to use. Then, instead of columns just being an alias for available columns, we'll replace it with another function. In this function, it goes through all the available columns and it filters it so it only uses the ones that are in columns used. It does this through calling contains on the columns used. \r\n\r\nLet's see it in action. There, we only have title and author, but that's not much good until we have a way for our user to select which columns they want to display. \r\n\r\nLet's add in an option for changing the columns. Here, we're looping through all the available columns because we'll want to be able to select any of them. Then we're feeding it in to a toggleable item component that we're about to make. In the last two options, we avoided using components because the things we would use a component for were pretty simple and could be done just as easily with a sub-expression. Here, as you'll see soon, we gain lots of advantages by using a component. You feed it in the columns used, our query param, as toggle list, and we feed it in that specific column as toggleable item. The component is a button which display the title of the toggleable item. It also, when you click the button, it triggers the toggle item action. If the item is toggled, then it's bold. Otherwise, the text is muted. \r\n\r\nSo let's dig in to the 'is toggled' property and the toggle light-up action. Is toggled is computed property based off the property of the toggleable item passed in, as well as what's currently in the toggled list which, if you remember, is the columns used array in this instance. It sees if the columns used, or toggled list, contains the toggleable item. Then, toggle item, the action, checks to see if it is toggled, and if it is, it removes that object from the toggled list. If it's not toggled, then it add the object to the toggled list. Basically if it's not there, it adds it. If it is there, it removes it. This is the basic definition of toggling. It's just the implementation is slightly more complicated here. \r\n\r\nNow we can add and remove columns as we see fit. This is pretty powerful, and thanks to the power of query params, we can grab our columns, go to a new browser, paste in that URL, and it will be exactly like we left it. \r\n\r\nIn an upcoming episode, we'll show how to sort the different columns in case you want to show them in a different order than they're given to you. I'll see you then. \r\n", publish_date: "2015-04-12", links: "* [Github diff](https://github.com/jeffreybiles/bloggr-cli-client/commit/18169ce68f5e71b430bdf40808577cf9d8f7cbe6)", thumbnail_image: "Screenshot_2015-04-12_15.56.42.png", permalink: "29-toggle-table-columns", free: false, difficulty: "advanced", seconds: 261, wistia_embed: "<div id=\"wistia_8hunyl3c7b\" class=\"wistia_embed\" style=\"width:800px;height:528px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"8hunyl3c7b\");\r\n</script>", code: "", guid: "4f99ab2b5f5e60bf0d904f1814cc35d3bba90672"},
  {title: "27 - Client-side Pagination Part 2- Previous/Next Page Buttons, Change Page Size", video_url: "https://www.youtube.com/embed/IxOXRo9itzY", description: "We expand on our basic client-side pagination, adding a few more features, including buttons to go to the next page, the previous page, and buttons to change the page size.", transcript: "In the last episode, we did the basics of Client-side Pagination. We can click these and it changes the page. However, there's usually a few more features involved in a full Client-side Pagination setup.\r\n\r\n### Previous and Next Page Buttons\r\n\r\nWe'll want a previous page button here, and a next page button here. We'll also want to be able to change the number of items that are on a page.\r\n\r\nLet's start by adding a previous page button. We'll need to make it an action, instead of a link-to, because we don't want to be on the first page and hitting previous page, and it taking us to something empty.\r\n\r\nLet's go to our post controller, and create our action. Our previous page action is first going to check whether the page number is greater than zero, and if it is, it will subtract one from the page number.\r\n\r\nOur next page method does something similar, and let's go ahead and add that after the each, so let's check to see if this works. Hit the previous page, and it takes us back one, but it doesn't take us off the edge, and the same with next page.\r\n\r\n### Change Page Size\r\n\r\nNow that we've gotten the previous and next page sorted out, let's figure out how to change the number of items that are on the current page, because sometimes you want to look at more than just 10 items at a time. What we'll want is a set of options that we can click on to change the number of items.\r\n\r\nTo start, we'll need to change the page size. Make it so that it is one of the query-params, and then we'll need our array of possible page sizes. We'll let them be 10, which is our current one, 25, 50, and 100. Then, in our handlebars template, let's add the controls for that.\r\n\r\nHere we just have some styling, and then we're looping through the possible page sizes. Then we have a button which calls the change page size action, which we'll be making in a little bit, and then we have our class, which could be highlighted, or not, depending on whether the new size is equal to the current size. Then, we show the new possible size.\r\n\r\nLet's go over to the post controller to implement the action. Change page size takes the new page size, and eventually it's going to set the page size to the new page size, but first it does some calculations. It does these because let's say that you're on page 18, with a current page size of 10. Then, if you change your page size to 50, there will no longer be a page 18, so we want to calculate where you would be in the new set of pages. That's what this does.\r\n\r\nAnother option is to simply set you at the first page every time, so let's see this in action. We see that we're on page 18, and we're going to hit this, and we have changed to page 7. This is highlighted. We have 25 items showing in this page, and they include a lot of the ones that were showing before.\r\n\r\nThis is a full implementation of Client-side Pagination. I hope you find this useful in your own apps.", publish_date: "2015-04-05", links: "* [Episode 26- Pagination Part 1](/posts/26-client-side-pagination-part-1-basics)\r\n* [Github diff](https://github.com/jeffreybiles/bloggr-cli-client/commit/8fdb6f81f8d8c91287ae2e22a5a2aad9b9502f8d)", thumbnail_image: "Screenshot_2015-04-05_02.34.51.png", permalink: "27-client-side-pagination-part-2-previousnext-page-buttons-change-page-size", free: false, difficulty: "intermediate", seconds: 263, wistia_embed: "<div id=\"wistia_c4r9j9crzp\" class=\"wistia_embed\" style=\"width:800px;height:528px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"c4r9j9crzp\");\r\n</script>", code: "", guid: "71941978255380c58faa740e4a88f6ce8f27a9b8"},
  {title: "18: Ember Inspector 3 - The View Tree", video_url: "https://www.youtube.com/embed/cQ4-MazDlVk", description: "Explore your app with the View Tree in the Ember Inspector.  Match up Ember objects to the parts of the DOM that they control, explore the state of those objects, and see their relative rendering times.", transcript: "Hey, and welcome back to SparkCasts. In this episode, we're going to be talking about the View Tree pane in the Ember Inspector. The View Tree helps you look at every view that's currently in the DOM, and it's arranged hierarchically, the very simple hierarchy right here. \r\n\r\nRight here are the views that are attached to controllers. When Ember first started, this is how most of the views were done. However, components have become more and more important so they've add an option to show the views that are also associated with components, and there are a lot. \r\n\r\nYou can hover over one of these and you can see where that view is being rendered. Then, if you go here and click, it'll take you in your Chrome dev tools, to the portion of the html that is being rendered. This linkage between the View Tree and the Chrome elements DOM tree is not accidental. Lots of the behavior is the same; if we hover over something, it'll highlight. The difference being this does it at a DOM element level whereas the Ember View Tree does it based on the Ember objects that are used to define the view. \r\n\t\r\nGoing back to the Ember view, if we uncheck the components box, we have our basic tree and then in each of these, they have a model, a controller, and a view. If the view's not there, that's because it's automatically generated. And, since automatically generated views don't hold changeable state, unlike automatically generated controllers, they're just not shown. \r\n\r\nSomething interesting to note is that the controller for all these different levels is the same. It is the levels controller. You can see here the levels template, which has an each statement in it. Each of these virtual views is an instance of this part of the each statement. That's why they have the same controller.\r\n\r\nThe final column in the View Tree is Duration. What does the duration signify? Straight from the creator's mouth, it's the time it takes to create the view's DOM element. However, it's not actually the time it would take normally. It's the time it takes if it has a bunch of measurement things slowing it down. The real thing is faster than what it shows. The purpose of it is for comparison. Here, you can see that for some reason, this took 11 milliseconds, this took 1, this took 45. Down here, the differences probably aren't that big but if you have a page that's taking 10 seconds to load, this could be very useful to help you find out where. \r\n\r\nThose are the columns and, for completeness sake, let's go over this header right here. We already know that the components brings out every single component and not just the views that have controllers. The All Views button doesn't really do much anymore since few people used standalone views and even fewer are using them now that they've been recommended against. Then, this button, which works better with the components clicked, it tells you what component you're hovering over in the DOM. \r\n\r\nThat is all for the View Tree. Next time we'll be talking about the Routes pane, which is also incredibly useful. I'll see you then.", publish_date: "2015-02-21", links: "", thumbnail_image: "Screenshot_2015-02-21_15.34.49.png", permalink: "18-ember-inspector-3-the-view-tree", free: false, difficulty: "intermediate", seconds: 249, wistia_embed: "<div id=\"wistia_yvpllas12h\" class=\"wistia_embed\" style=\"width:800px;height:528px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"yvpllas12h\");\r\n</script>", code: "", guid: "de3d9aaefaba1e1c2f9e8d28e85f9e26c78b1e77"},
  {title: "46 - Bar Charts with ember-cli-chart", video_url: "https://www.youtube.com/embed/VsIW6J4fuTw", description: "Create simple bar charts quickly with the ember-cli-chart addon.\r\n \r\nThis screencast shows how to put a chart in your template, format your data properly, and specify options on the chart.", transcript: "", publish_date: "2015-06-14", links: "* [ember-cli-chart addon](https://www.npmjs.com/package/ember-cli-chart)\r\n* [chartjs barchart documentation](http://www.chartjs.org/docs/#bar-chart)\r\n", thumbnail_image: "Screenshot_2015-06-13_17.16.23.png", permalink: "46-bar-charts-with-ember-cli-chart", free: true, difficulty: "intermediate", seconds: 360, wistia_embed: "<div id=\"wistia_u497irs062\" class=\"wistia_embed\" style=\"width:800px;height:500px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"46-bar-chart-ember-cli-chart\" /><meta itemprop=\"duration\" content=\"PT5M59S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/971ea31177e6be8f56267e80aa074ab0e5203b4d.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/429205dc3ba013062399bd492859642446328dd8.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=26398096&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F8e7d5ad09e2e86b12708a287e6a8b14e6341f083.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=359.999&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F971ea31177e6be8f56267e80aa074ab0e5203b4d.bin%3Fimage_crop_resized%3D640x400&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F429205dc3ba013062399bd492859642446328dd8.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-06-21T15:23:38Z\" /><object id=\"wistia_u497irs062_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:500px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=26398096&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F8e7d5ad09e2e86b12708a287e6a8b14e6341f083.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=359.999&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F971ea31177e6be8f56267e80aa074ab0e5203b4d.bin%3Fimage_crop_resized%3D640x400&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F429205dc3ba013062399bd492859642446328dd8.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=26398096&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F8e7d5ad09e2e86b12708a287e6a8b14e6341f083.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=359.999&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F971ea31177e6be8f56267e80aa074ab0e5203b4d.bin%3Fimage_crop_resized%3D640x400&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F429205dc3ba013062399bd492859642446328dd8.bin\" name=\"wistia_u497irs062_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">46-bar-chart-ember-cli-chart</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"u497irs062\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/u497irs062/metadata.js\"></script>", code: "", guid: "64811ed4ecb7d1588201a63098b8ec790f05d925"},
  {title: "35- CRUD pt 2- Create", video_url: "https://www.youtube.com/embed/PPL--AtBz98", description: "We continue making our CRUD interface, this time going in depth with the Create action.\r\n\r\nWe go over a naive implementation, then a better implementation.  Finally, we see a way to DRY up our code with a component.", transcript: "In the last episode, we made the first part of a CRUD interface. We did the read, update and delete actions. The create action is a little bit trickier and that's what we're going to do today. We're going to first do the naïve version. We're going to show what goes wrong when that happens, and then we're going to show a better version. \r\n\r\n## Naive Create\r\n\r\nLet's go to our posts template and put in a button that will trigger the new action. So far so good. Then in our posts route, we'll have an action which creates a post and then takes us to the edit page for that post. This is where things start to go wrong.\r\n\r\nLet's hit that new button and see what happens. Now we're at the route posts/null/edit. We don't have an ID of the post. That's because we haven't saved it to the server yet. It also adds it to our list, an empty thing to our list. Let's pretend that we're okay with that. We'll make a title and create it and this looks like it's working but what if we reload? We see that it's null so it doesn't work because there's nothing with a null ID. \r\n\t\r\nThis is a workflow that will sometimes work, sometimes not. Let's create a better create workflow. \r\n\r\n## A Better Create\r\n\r\nIn this new way, we replace the action with a link to a posts route so we can delete the action, and then we'll take advantage of our posts new route. Let's start with our template. We'll take the things from post edit and just paste them in while changing a few things. \r\n\r\nWe replaced model with new post, which is a temporary object that we're going to create in the controller. It's a temporary object, just to hash the values that we will eventually, when we hit save, used to create a record. Once we hit save, we'll create the record using this temporary object, and then we'll save it and then we'll transition to show. \r\n\r\nWe can see this working in our app. We hit new, we create a new title, and notice that it's posts/new instead of post/null, and we hit save and we can reload the page just fine. It's a much better workflow, and when we hit new here, it's not adding anything to the end of the list. \r\n\r\nThat's a great workflow, but we did copy and paste from a template, so let's clean that up a little bit. \r\n\r\n## DRY Create and Edit templates\r\nHere are the new and the edit templates side by side. We can dry this up a little bit by copying this and then pasting it into a new component that we'll call edit-fields. We'll put it under post. We’ll call it edit-fields and then we'll just create the template. We won't need the Javascript portion of the component. \r\n\r\nIn here, we can call our template post/edit-fields and then we will feed it the model. We can do the same thing here, post/edit-fields and we'll feed the model as newPost. \r\n\r\nThis works really well right now because of two-way data binding so if we change something in the model, in edit fields, it will automatically propagate back up here, so we can take action on it in the new or the edit routes.  Later, when we have one way data binding by default only to do a mutation, we need to specify the mutation. \r\n\r\nLet's go ahead and look at this at work. We reload, it looks just the same as before. It works just the same as before and the editing works as well. It works exactly as before but now there is significantly less repetition.\r\n\t\r\n## Next week: DRY out your process with ember-cli Blueprints\r\n\r\nIn this episode, we learned how to create a record. Creating is one of the more complicated of the four CRUD operations. The four CRUD operations, which are essential to software where you are manipulating data. I hope this helps you when you're creating your own application. \r\n\r\nYou might have to expand on this if you have special requirements, but if you don't, there's good news. You won't have to repeat all this work because next week, we are learning about blueprints. Specifically, we're going to be making a set of blueprints that can autogenerate a lot of this CRUD for you. I'll see you then.", publish_date: "2015-05-03", links: "", thumbnail_image: "Screenshot_2015-05-01_21.46.02.png", permalink: "35-crud-pt-2-create", free: false, difficulty: "intermediate", seconds: 358, wistia_embed: "<div id=\"wistia_4yhgcebcfk\" class=\"wistia_embed\" style=\"width:800px;height:500px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"4yhgcebcfk\");\r\n</script>", code: "", guid: "e6c5b37ece2fcdc238943e84b8e0b32eca48ae59"},
  {title: "25 - Advanced Handlebars: option hashes and more", video_url: "https://www.youtube.com/embed/F48HF8MVM6s", description: "We can do lots of things with Handlebars, including named parameters and block parameters... But should we?\r\n\r\nEmber says \"Sometimes\".\r\n\r\nThis episode includes details on how to use named parameters in a helper, as well as the limits imposed by Ember on your helpers and when you should just use a component instead.", transcript: "In the last episode, we explained subexpressions, Handlebars helpers that you put in parentheses inside other mustaches. However, we didn't explain one other thing about this query-params call, and that is how this is called. In the last episode, we had only use unnamed arguments, so today we're going to explore how to use named arguments in Handlebars helper. \r\n\r\n### Named Arguments (options hash)\r\n\r\nLet's take a look at the with-options example that I've created. Here it takes one argument, one unnamed argument, and then we're giving it several named arguments, first, second, and third. If we go here, we see it's taking the first argument and the second argument, but it hasn't done anything with the third. How do we make it use those first two arguments? \r\n\r\nEach Handlebars helper takes an options hash after all of the inputs, which are not given a name, which are just done by their order. Here, if we have the first, then we add that to the string. If we have the second, we also add it to the string, and that's how we get that displaying. This is a rather silly example, but it shows the mechanics of using the options hash. Let's expand on it a little bit. Let's go ahead and make it take a tag name. Here, we can say tag name equals B for bold. This one is now bold. You may be saying tag name, that sounds familiar. That's because tag name is one of the optional arguments for a component. If the component doesn't have a tag name specified, then it'll use div, which is also the behavior that I've added here. \r\n\r\n### Block Helpers Unsupported\r\n\r\nYou may be wondering, why don't you just use a component, and you're not the only one thinking along those lines. When preparing the Screen Cast, I was trying to create a block helper. A block helper is a helper that starts with a hash and then has a block and then an ending tag. However, I found that it gave me this error. Ember Handlebars is trying to move you away from certain features that are present in regular handlebars, and this is very clear when you're using Ember CLI and it's difficult to use anything besides makeBoundHelper. If you're using Ember without Ember CLI you can still get away with this for a little while longer. \r\n\r\n### Use  Components\r\n\r\nWhy is it giving this error? The answer given by Ember superstar, rwjblue, is that you should just use a component. When it is best to use Handlebars helpers and when is it best to use components? I've compiled a handy algorithm. It's going to be used as a subexpression, use the Handlebars helpers. Otherwise, you can probably use a component.\r\n\r\nThanks for listening and thanks for subscribing. In this episode, we talk about Advanced Handlebars Techniques, including the options hash, and more importantly, when it's best to use handlebars and when it's best to use components. I'll see you next week. ", publish_date: "2015-03-29", links: "* [Free episode: Handlebars Subexpressions](/posts/24-handlebars-subexpressions)\r\n* [block helpers docs (which we can't use in ember](http://handlebarsjs.com/block_helpers.html)\r\n* [Github Diff](https://github.com/jeffreybiles/bloggr-cli-client/commit/da849ff0d6347dd0d7d8ad67149ded2ee972c074)", thumbnail_image: "Screenshot_2015-03-29_11.27.28.png", permalink: "25-advanced-handlebars-option-hashes-and-more", free: false, difficulty: "intermediate", seconds: 249, wistia_embed: "<div id=\"wistia_fbeqhzzvz3\" class=\"wistia_embed\" style=\"width:800px;height:528px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"fbeqhzzvz3\");\r\n</script>", code: "", guid: "ef85faab914674904f403c185f8c2de3154fea8e"},
  {title: "23 - query params", video_url: "https://www.youtube.com/embed/X-MumVC3XBU", description: "We use query-params so that we can track controller state between sessions.  We're also able to simplify some code.  More features, less code- how awesome is that!", transcript: "In the last three videos, we created a nice intuitive UI for sorting our videos.  However, there was still one problem: when you reload the page, it resets your sorting.  That also means that when you give someone the url for this, they’ll see a different sorting than you meant them to see.\r\n\r\nQuery params can fix it!  Just tell the controller what query params you want to use.  Note that the query params *must* be properties on the controller.  When we change the sort, it saves it in the url!  Notice that if we make it sort by the default, that parameter disappears.  Pretty nice, right?  And it was only one line of code.  Let’s look at that diff.  Wow, yea, that’s all.  Query params are powerful, and they’re crazy easy. But there are also some more advanced features, and I’m going to show you one of those.\r\n\r\nQuery params changes the URL, so as you might guess, you can change query params using the link-to helper. Currently we’re changing the params with this action.  But if we use links, we can eliminate it. And we can eliminate passing in the action. And we can eliminate this action as well. Now we just have to turn these two action calls into links.\r\n\r\nLet’s look at the anatomy of a basic link-to helper.  You have the surrounding link-to signifier, and then you have the name of the route you’re linking to, and then you have the content that the link text. A common variation is to pass in an item or an id, for example if you wanted to go to show a specific video. To use query params in link-to, we use a subexpression helper in parentheses.  It starts by naming the helper, query-params, and then passing in values.\r\n\r\nLet’s do that, and pass in sortAscending and sortproperties.  sortAscending is the true or false boolean, based on which arrow it is, while sortProperties will be an array that we form from the sortProperty we passed in to the component. And you’ll see that it still works, just like before… but now with much more elegant code.\r\n\r\nYou can see that the query-params API is both powerful and easy to use. There are many more advanced features that we didn’t get to today.  If you’re curious, you can look them up in the ember guides.\r\n\r\nNext week, we’ll use what we’ve learned here to add pagination.  See you then!", publish_date: "2015-03-21", links: "* [Query Params guide](http://emberjs.com/guides/routing/query-params/)", thumbnail_image: "Screenshot_2015-03-21_15.18.53.png", permalink: "23-query-params", free: false, difficulty: "intermediate", seconds: 198, wistia_embed: "<div id=\"wistia_2z3r0abdoh\" class=\"wistia_embed\" style=\"width:800px;height:528px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"2z3r0abdoh\");\r\n</script>", code: "", guid: "2d2670ffe542ceed11780e52b01012554b75a8c0"},
  {title: "6: Intro to Ember App Kit", video_url: "http://www.youtube.com/embed/wvVBXmvAFTo", description: "How to start a new Ember App Kit project.\r\n\r\n", transcript: "Hey and welcome back to Ember Sparks. So far our application has only been using one JavaScript file, one HTML file and then some pasted in library files. However our app is starting to grow and if we don't find a better foundation for it, we are going to start running into some problems. \r\n\r\nThe first problem is that our files are going to get very long if we're trying to stuff all of our JavaScript into one app.js and all of our templates into one index.html. \r\n\r\nThe second is that all of our dependencies have to be updated manually. If a new version of Ember comes out, we have to get and check to make sure that it works correctly with the Ember data and Handlebars versions that we are using, and that's going to get increasingly difficult as we rely on more and more libraries. \r\n\r\nThe third is that connecting with the server through Cross Origin Resource Sharing, or CORS, doing it without proper tooling is pretty difficult and that's one reason why this screen cast is late, is because I was trying to do that without the proper tooling. \r\n\r\nSo if we keep on with our current architecture, eventually we are going to have lots of issues.\r\n\r\nWhat tools will we need? When I was deciding which tool to use for the screen cast, I went for the most accessible options. That means the ones that use rails were out because that could alienate a good 10% of our listeners, and ones that were still in beta were also out, that leaves Ember App Kit. However it should be noted that Ember CLI will be coming out of beta within the next few months hopefully and at that point we'll make the switch. \r\n\r\nThe recommended method for getting started with Ember App Kit is to download the zip file from their site, then go ahead and rename it whatever you want as well as moving it around to the correct directory and then go ahead and cd into that folder. Once you are there, run npm install to get everything setup, then run grunt server, then go ahead and visit on localhost:8000, and that's really all there is to it.\r\n\r\nEmber App Kit has a lot of cool features right out of the box. It has Bower set up to give us the latest Ember as well as a lot of commonly used libraries. It has grunt setup to concatenate our files and it has a folder structure that encourages good organization and there is a lot more. We'll start exploring those next week when we inport our app into the structure. See you then.", publish_date: "2014-04-17", links: "* [Source code](https://github.com/jeffreybiles/ember-sparks-website/tree/ccf996acf66a3f8e0c2ea4bfe84cb4277c7061a3) (really just a copy of the Ember App Kit starter kit)", thumbnail_image: "6-intro-to-ember-appkit.jpg", permalink: "6-intro-to-ember-app-kit", free: false, difficulty: "basic", seconds: 187, wistia_embed: "<div id=\"wistia_70irkqst6m\" class=\"wistia_embed\" style=\"width:800px;height:500px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"70irkqst6m\");\r\n</script>", code: "", guid: "8eda69871a0f8ab3e2cd075ed85a1509fa9087fc"},
  {title: "5: Embedding Youtube Videos", video_url: "http://www.youtube.com/embed/hwL5M3NSqZA", description: "Ember.js saves you code.  This is true even when you're doing something simple, like embedding youtube videos.\r\n\r\n", transcript: "Hey, welcome back! It's been a crazy week so I'm going to give you a short and simple video today. We're going to add YouTube videos to our blog.\r\n\r\nHere is the YouTube embed link they give you by default. Notice that it's in an iframe. This allows the player to choose between Flash and HTML 5 depending on your device. We definitely want that.\r\n\r\nAs our first step, we'll paste it into our HTML right here and then open up the index page to see if it works. Then you go to the post and uh-oh, it looks like it couldn't be found. That's because the link they give us, it's trying to find it on the file system. Let's edit it to call HTTP. We'll add HTTP before that and that should be enough to help it find it. Success!\r\n\r\nNow we have a video loading in every post but it's the same video in every post so we're going to need to give each one its own unique video. In our post model, we're going to have an attribute called videoURL. Then, we'll put in the video URLs to our fixtures, and then we're going to bind the source attribute in our iframe. We'll use the bind-attr, which will hopefully be replaced soon in HTML bars, and the source will be bound to videoURL.\r\n\r\nNow, we have the correct video and we have a different one in each. Those are the basics, but there are two tweaks I'd like to make. The first is that I don't want to have to include a video with every blog post. If I do one without a video, then it's just going to end up showing a big ugly box or nothing at all. In order to fix this, I'm going to go to my index and wrap the iframe in an if statement. If there is a videoURL, then we'll display it, so our blog posts without videos don't show them and our blog posts with videos do.\r\n\r\nThe second is that I don't want to display related videos at the end. I want people to click around my site instead, so I'm going to include the rel=0 attribute at the end of my URLs. However, adding it to the end of every URL will get onerous, especially once we get a lot of videos. Think if we have 100 videos, and then YouTube changes the API or we want to change the behavior. So, we're going to create a property called deckedOutVideoURL. It's going to get the videoURL and then add to it the properties that we want. We'll go into our HTML and change the source attribute and then when we play the video and go to the end, you'll see that there won't be any related videos, it'll just start over.\r\n\r\nThat is how to embed a YouTube video with Ember. I'll see you soon- happy coding!", publish_date: "2014-03-31", links: "* [source code](https://github.com/jeffreybiles/bloggr-client/tree/5/callbacks-into-promises)\r\n* [youtube player options](https://developers.google.com/youtube/player_parameters)", thumbnail_image: "5-embedding-youtube-videos.jpg", permalink: "5-embedding-youtube-videos", free: false, difficulty: "basic", seconds: 222, wistia_embed: "<div id=\"wistia_onewa29tuh\" class=\"wistia_embed\" style=\"width:800px;height:500px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"onewa29tuh\");\r\n</script>", code: "", guid: "17b281dd7afd2721bf3d3d6a1325351b55f128c7"},
  {title: "70 - ember-hold-button", video_url: "", description: "Ever accidentally delete a record or send a message before it's complete?\r\n  \r\nember-hold-button is a fantastic addon that lets you put a small time barrier in front of sensitive actions so you don't complete them by accident.", transcript: "null", publish_date: "2015-09-02", links: "* [ember-hold-button library](https://www.npmjs.com/package/ember-hold-button)\r\n* [github diff](https://github.com/jeffreybiles/simpler-ember-sparks-website/commit/82b00b086e11fa0a4e423b7385dc06258e0b33cd)", thumbnail_image: "Screen_Shot_2015-08-25_at_10.58.31_AM.png", permalink: "70-ember-hold-button", free: true, difficulty: "intermediate", seconds: 270, wistia_embed: "<div id=\"wistia_gn6wv1w71e\" class=\"wistia_embed\" style=\"width:800px;height:478px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"70-ember-hold-button\" /><meta itemprop=\"duration\" content=\"PT4M29S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/fdfb16a07b989fdf6b35cda8bd928b5932027220.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/d2cd4ed8f07f8a7546581bd918630b23a4a5b496.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=720&hdUrl%5Bsize%5D=15815782&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F912f0cfd4f305db92c6f5e773f7d7bce5af4538f.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=269.812&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Ffdfb16a07b989fdf6b35cda8bd928b5932027220.bin%3Fimage_crop_resized%3D800x450&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fd2cd4ed8f07f8a7546581bd918630b23a4a5b496.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-08-25T21:17:23Z\" /><object id=\"wistia_gn6wv1w71e_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:450px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=720&hdUrl%5Bsize%5D=15815782&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F912f0cfd4f305db92c6f5e773f7d7bce5af4538f.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=269.812&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Ffdfb16a07b989fdf6b35cda8bd928b5932027220.bin%3Fimage_crop_resized%3D800x450&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fd2cd4ed8f07f8a7546581bd918630b23a4a5b496.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=720&hdUrl%5Bsize%5D=15815782&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F912f0cfd4f305db92c6f5e773f7d7bce5af4538f.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=269.812&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Ffdfb16a07b989fdf6b35cda8bd928b5932027220.bin%3Fimage_crop_resized%3D800x450&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fd2cd4ed8f07f8a7546581bd918630b23a4a5b496.bin\" name=\"wistia_gn6wv1w71e_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">Ever accidentally delete a record or send a message before it's complete? ember-hold-button is a fantastic addon that lets you put a small time barrier in front of sensitive actions so you don't complete them by accident.</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"gn6wv1w71e\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/gn6wv1w71e/metadata.js\"></script>", code: "", guid: "d59e6c454b26f29cfc64755a66af4219e26fc799"},
  {title: "52 - dotEnv", video_url: "", description: "dotEnv keeps your configuration secrets safe, and helps you keep a clean separation between different environments.\r\n  \r\nWe'll look at using ember-cli-dotenv, as well as using the regular dotenv packages for situations where ember-cli-dotenv doesn't work.\r\n\r\nNote: why dotEnv? This was originally part of a series on ember-cli-deploy (notice deploy.js). The rest of the series has been delayed due to a caching bug.", transcript: "null", publish_date: "2015-07-04", links: "* [ember-cli-dotenv](https://github.com/fivetanley/ember-cli-dotenv)\r\n* [dotenv](https://www.npmjs.com/package/dotenv)", thumbnail_image: "Screenshot_2015-07-02_11.14.15.png", permalink: "52-dotenv", free: true, difficulty: "advanced", seconds: 333, wistia_embed: "<div id=\"wistia_w23xivomz2\" class=\"wistia_embed\" style=\"width:800px;height:500px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"52- dotEnv\" /><meta itemprop=\"duration\" content=\"PT5M33S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/cab44c75c8ef072e9c17f0e67ab7003d010f0e65.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/ce892eb38bf89abe47d83db1be7ff016305a71fa.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=720&hdUrl%5Bsize%5D=18183475&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F3026933363e930507994a7b0ac3ae2e4947e75bf.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=333.482&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fcab44c75c8ef072e9c17f0e67ab7003d010f0e65.bin%3Fimage_crop_resized%3D800x450&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fce892eb38bf89abe47d83db1be7ff016305a71fa.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-07-01T00:00:39Z\" /><object id=\"wistia_w23xivomz2_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:500px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=720&hdUrl%5Bsize%5D=18183475&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F3026933363e930507994a7b0ac3ae2e4947e75bf.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=333.482&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fcab44c75c8ef072e9c17f0e67ab7003d010f0e65.bin%3Fimage_crop_resized%3D800x450&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fce892eb38bf89abe47d83db1be7ff016305a71fa.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=720&hdUrl%5Bsize%5D=18183475&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F3026933363e930507994a7b0ac3ae2e4947e75bf.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=333.482&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fcab44c75c8ef072e9c17f0e67ab7003d010f0e65.bin%3Fimage_crop_resized%3D800x450&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fce892eb38bf89abe47d83db1be7ff016305a71fa.bin\" name=\"wistia_w23xivomz2_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">dotEnv keeps your configuration secrets safe, and helps you keep a clean separation between different environments. We'll look at using ember-cli-dotenv, as well as using the regular dotenv packages for situations where ember-cli-dotenv doesn't work.</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"w23xivomz2\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/w23xivomz2/metadata.js\"></script>", code: "", guid: "0e66628cae82f4a0b845a1e7a7455fb952c3c93c"},
  {title: "39 - Ember.get", video_url: "https://www.youtube.com/embed/udYq6dhHKzM", description: "You already use Ember.get, you just don't know it yet. Learn what it is and how you can use it better.", transcript: "", publish_date: "2015-05-17", links: "* [slides](http://slides.com/jeffreybiles/screencast-39-emberget#/)", thumbnail_image: "Screenshot_2015-05-16_19.46.12.png", permalink: "39-emberget", free: false, difficulty: "basic", seconds: 263, wistia_embed: "<div id=\"wistia_apd4wcbi9y\" class=\"wistia_embed\" style=\"width:800px;height:500px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"apd4wcbi9y\");\r\n</script>", code: "", guid: "5e1be61a2a0fb8b701920d3606b46a82715a3737"},
  {title: "32- Nested Routes and Outlets", video_url: "https://www.youtube.com/embed/-dwcUyzanqc", description: "Routes and the associated URLs are the core of your Ember app's structure.  This screencasts looks at how to nest routes, using outlets in the outer nestings to view the templates of the inner nestings.\r\n\r\nUPDATE: [this.resource may be deprecated soon](https://gist.github.com/samselikoff/1d7300ce59d216fdaf97).  However, you can still use this pattern for the near/medium future.  When the replacement pattern becomes clear, I'll link to a resource.", transcript: "Routes and their associated URLs form the core of your Ember app’s structure. Today, we're going to look at combining routes through nesting them, and using outlets to do that.\r\n\r\n## Master-Detail Nesting\r\n\r\nLet's take a fairly common scenario where we have a series of resources. In this case, the \"posts\" resource and then the singular \"post\" resource inside of it. They're going to be in a master-detail view. On the outside, we have the application. In the application template, there's an outlet. That gets filled in with the \"posts\" route, once we go there.\r\n\r\nWe're in the \"posts\" route and in the \"post\" template, there's another outlet. That's going to get filled in by the route that we go to in the URL after \"posts.\" It could be filled in by the index or new, or in this case, it's going to be filled in by the \"post\" route. Let's take a look at how that plays out in a real application. \r\n\r\nThis is that same master-detail view in an application. Here in our Ember Inspector, we can see in the \"routes\" tab these three routes. The application- it happens right at the top, there’s no URL for that. Then you have the “posts\", and then \"index\" is automatically displayed into the outlet if there's nothing else. You'll see that when we click this, \"index\" will change to singular “post”… And, uh… that is a bug in Ember Inspector that we just found.\r\n\r\nLet's go ahead and look at the view tree and we can see that the views are nested just as we predicted. The URL is showing the post_id. The post_id being the part of the URL that corresponds to the “post” route. \r\n\r\nLet's look at what this looks like in the code. Here's the routes, just like we showed on the slide before. Then, we have the application template which in this case is just a div with an outlet. That's why you didn't see anything from the application template when we were looking at it. In the post template, we have the column on the left which is a list of all the posts and a link. Then on the right, we have the outlet. The index is just announcing that it's the index and the post is just showing the title.\r\n\r\nNow that you've seen the outlets, you can see you have the application wrapped around here… let’s go ahead and see the entire application is here. And then \"posts\" is a smaller bit. The \"post\" wraps around both the list on the side and all of its outlet. Then the outlet only takes up the part on the right. \r\n\r\nThose are the basics. Let's reinforce that knowledge with a quick example of a slightly more complicated situation.\r\n\r\n## A slightly more advanced example\r\n\r\nHere are the routes that we have for tags. It's similar to the nested routes that we have for \"posts,\" but we've added a new route, a show route, and an edit route. Let's look at this in the browser. This is our index. I didn't bother putting anything special in the index. You'll see if we click on one of these, it will display the tag route and then the show route on the side of it in here. Currently, the tag template is just an outlet. That's what gets auto-generated so it passes down to the show and to the edit. We can also go to the new route which is nested directly under tags. As you can see, adding these complications didn't complicate the concept. It's just the same concept applied in a few more places. That's it for nested routes and outlets. \r\n\r\n## Coming Soon\r\n\r\nYou may have noticed during this episode, the file paths here look, they look a little bit different than you may be used to. That's because we're using the Pods Directory Structure. In this week's Pro Episode, I'll be going over the details of the Pods Directory Structure and how you can start using it in your app right now. You also may have noticed that this looks a lot like a CRUD interface. Next week, we'll be going over the details of how to build a CRUD interface with Ember and Ember data. I hope you'll check those out and see you soon.", publish_date: "2015-04-25", links: "", thumbnail_image: "Screenshot_2015-04-26_07.36.14.png", permalink: "32-nested-routes-and-outlets", free: true, difficulty: "basic", seconds: 338, wistia_embed: "<div id=\"wistia_hat5u36w5m\" class=\"wistia_embed\" style=\"width:800px;height:500px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"32-nested-routes-and-outlets\" /><meta itemprop=\"duration\" content=\"PT5M37S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/cc9589d35bfd199e2e3272b0209611fd8a494c93.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/b87bdead3b6b149fd811ed1cd75d99432f45f6a7.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=18872135&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F8c46f3490b8dd36f4e12d1e0b711bad447ce6201.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=337.383&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fcc9589d35bfd199e2e3272b0209611fd8a494c93.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fb87bdead3b6b149fd811ed1cd75d99432f45f6a7.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-06-21T15:30:21Z\" /><object id=\"wistia_hat5u36w5m_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:500px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=false&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=18872135&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F8c46f3490b8dd36f4e12d1e0b711bad447ce6201.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=337.383&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fcc9589d35bfd199e2e3272b0209611fd8a494c93.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fb87bdead3b6b149fd811ed1cd75d99432f45f6a7.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=false&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=18872135&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F8c46f3490b8dd36f4e12d1e0b711bad447ce6201.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=337.383&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fcc9589d35bfd199e2e3272b0209611fd8a494c93.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fb87bdead3b6b149fd811ed1cd75d99432f45f6a7.bin\" name=\"wistia_hat5u36w5m_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">32-nested-routes-and-outlets</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"hat5u36w5m\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/hat5u36w5m/metadata.js\"></script>", code: "", guid: "494a5093476091e342f0b5ad39702f42e8e1951e"},
  {title: "19: Ember Inspector 4 - Routes", video_url: "https://www.youtube.com/embed/CsBs11t0B8A", description: "Let's explore the Routes tab in Ember Inspector and see everything it lets us do.\r\n\r\nI've tried some new techniques this week to make the video more compact and information-dense.  Let me know what you think.", transcript: "Hey, and welcome back to Ember Sparkcasts.  Today, we’re going to be talking about the Routes tab in the Ember Inspector.\r\n\r\nThe first thing you’ll notice is that there are a lot of routes.  That’s because not only does it show every route and resource in your router.map, it also shows the loading, error, and index routes for each of your resources.\r\n\r\nSo here we can see every single route in our application, as well as a wealth of information.  We have the Route Name, which is useful for when you’re trying to figure out arguments for things like link-to helpers and calls to transitionTo. \r\n\r\nNext we have the Route and Controller objects, which we can access in the object explorer by clicking on the name, and in the console by clicking on the $E.  Unlike in the View Tree, here we can access Controller objects which are not involved in the current route, and therefore check on different types of information.  However, we can only access controllers which have a Route.  If you need to access a service controller, you need to go to the container and click on ‘controllers’.\r\n\r\nNext we have the template name, which can be useful for when you’re figuring out naming conventions and need to check which template it’s trying to use.\r\n\r\nFinally, we have the url, which is similarly useful for when you’re figuring out naming conventions.\r\n\r\nIf we wanted to narrow it down to our current route, we can click the Current Route Only button up here, and it will take us to our current place in the route hierarchy.  This button is useful for when you want to quickly find information about your current route and its parent routes without scrolling through lots of extraneous information.\r\n\r\nThat’s it for the routes tab.  Thank you for watching. \r\n\r\nI was trying some new techniques for today’s screencast, so let me know what you think by twitter or email.  It took a little bit more time to do it this way, but I hope that the end result is worth it. Finally, if you enjoyed this screencast, sign up for the mailing list.  That way you’ll never miss an episode. Happy Coding!", publish_date: "2015-03-01", links: "", thumbnail_image: "Screenshot_2015-03-01_13.11.02.png", permalink: "19-ember-inspector-4-routes", free: true, difficulty: "intermediate", seconds: 131, wistia_embed: "<div id=\"wistia_isqpfikw0e\" class=\"wistia_embed\" style=\"width:800px;height:528px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"sparkcasts 19- Ember inspector 4- Routes\" /><meta itemprop=\"duration\" content=\"PT2M10S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/830c37d67ab0cc11aef03e89da561d27b4a9887a.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/751980df6228a89acf8f889e0ad858a9bf67c9ef.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=10139162&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F5a742b240ecb9a169059c971f517364cb9860273.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=130.191&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F830c37d67ab0cc11aef03e89da561d27b4a9887a.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F751980df6228a89acf8f889e0ad858a9bf67c9ef.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-07-03T04:13:55Z\" /><object id=\"wistia_isqpfikw0e_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:500px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=10139162&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F5a742b240ecb9a169059c971f517364cb9860273.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=130.191&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F830c37d67ab0cc11aef03e89da561d27b4a9887a.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F751980df6228a89acf8f889e0ad858a9bf67c9ef.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=10139162&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F5a742b240ecb9a169059c971f517364cb9860273.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=130.191&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F830c37d67ab0cc11aef03e89da561d27b4a9887a.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F751980df6228a89acf8f889e0ad858a9bf67c9ef.bin\" name=\"wistia_isqpfikw0e_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">sparkcasts 19- Ember inspector 4- Routes</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"isqpfikw0e\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/isqpfikw0e/metadata.js\"></script>", code: "", guid: "6276f6fcd3a9989a1d61c35f61be83fea8d1f7f3"},
  {title: "105 - The Making of the Model State Explorer", video_url: nil, description: "A whirlwind tour of what I think is cool about the Model State Explorer app.\r\n    \r\nSome points touched on: ember-cli-mirage in production, custom computed property macros, inverse relationships, pagefront hosting, and the recursive folder structure (and thus recursive nesting of components).  There is also some discussion of more basic Ember topics.\r\n    \r\nCORRECTION: The computed property macro works, but the `flags.${dependentKey}` key is unnecessary.  I noticed this when I realized `flags` is an array thus wouldn’t have a `${dependentKey}` attribute.\r\n", transcript: "Last week, I introduced the Ember Data 2.0 Model State Explorer, and we learned a lot from it. In this episode, I’m going to be showing some of the tricks I used to make this, and it'll just be a really quick run-through showing you some cool techniques that you can use in your own apps. If you want to follow along, this is the URL for playing with it, and this is the GitHub project. And I’ll provide links to these in the show notes.\r\n\r\n\r\nIf you see anything in this presentation that you want more details on, tell me in the comments and I’ll take that into account when I’m deciding which topics to cover. Alright, now let’s get to the code. \r\n\r\n\r\nSo first, I wanted to just have the front end. I didn’t want to have to deploy a backend. So I used `ember-cli-mirage`. It’s usually used just for development and testing, but I set it to be `enabled` in production as well. \r\n\r\n\r\nAnd so then, this is in our mirage/fixtures/states.js file, and this has all the data for our states. We’ll go over the state model and then come back to this. \r\n\r\n\r\nSo the state, it has the `name`, and then it has for the parents and the children, and these are relationships to other states. And they do exactly what you would expect. They are inverses of each other and you can have multiple children but only one parent. \r\n\r\n\r\nThen you also have `flags` which is... it’s given no transforms, so it’s just passed in as an array. \r\n\r\n\r\nAnd then we have this series of `is` blah-blah-blah, so `isDeleted`, `isDirty`, `isEmpty`. So these are different states, and they’re all done based on the `isX` function which creates a computed property. So we’ve basically created our own computed property macro. And what that does is it looks for that flag... well, it takes a key and it looks for that on the `flags`, and if the `flags` include that, then it returns `true`. So `isDirty` is true if `dirty` is included in the `flags` array.\r\n\r\n\r\nSo going back to the states fixtures, we have the `name`, and then we have the `parent` and `children`, and we’re doing that based on the `id`, and we’re assigning these ids manually so that we’re able to create these relationships in the fixtures. Finally we have the `flags` array. \r\n\r\n\r\nNow it’s important to note some versions on these. I’m using the 0.1.x version of `ember-cli-mirage`. There’s a 0.2 version and Beta, but the documentation isn’t quite there as of the making of this video. So some of this may change in the near future, but the basic idea behind it shouldn’t. \r\n\r\n\r\nAnd by the same token, I just created an `ember-cli-project` and I took the versions of Ember and Ember Data that it gave me, which were 1.13.x. So this file may change. This file should stay pretty much the same since most of the large changes in Ember Data weren’t from 1.13 to 2.0. They’re from Beta to 1.13. \r\n\r\n\r\nAlright, now moving on, let’s look at our templates and controllers. Our application route, it just finds all of the states, and then the application/index controller, it gets all the `rootStates` which will just be array of one, and it grabs the first one off there. So we have the `rootState`.\r\n\r\n\r\nSo then in the handlebars, it feeds all this into `tree-state`. It feeds in the `rootState` as well as the `highlightedFlag`. Before we get into the details of the `tree-state`, let’s go over the `highlightedFlag`. This is the part that’s on the bottom here, ‘Highlight by Flag’. \r\n\r\n\r\nSo what it’s doing is it’s looping through all the possible flags, and these are defined here on the state model. And then for each of those, it’s giving it a `button` with the `action` of `highlightFlag`, and it highlights this button if the flag itself is currently highlighted. \r\n\r\n\r\nAnd there’s also a `Reset` button. And that action, `highlightFlag`, it sets the `highlightedFlag` property to whatever is passed in. Alright, and so that is also passed in to the `tree-state` component as `highlightedFlag`. Now the `tree-state` component is where most of the action is, not in the JavaScript. It’s just a basic toggling of the `isExpanded` property but in the handlebars. \r\n\r\n\r\nSo we have our `margin-left` to 20 pixels, and that’s for each of them, and that’s how we get this nice nested look, because as you’ll see, within this, each of the `children` of the `state`, it creates another `tree-state` for it, and so on and so on until they run out of children.\r\n\r\n\r\nAnd so this entire tree is all started from the root state, and then it just grabs the root state’s four children, and each of those it grabs their children and displays them.\r\n\r\n\r\nThis is the basics of doing a folder structure, and there are quite a few instances where you might want to use this, so keep this in mind.\r\n\r\n\r\nAlright, so that’s how we do the folder structure here. Here is where we show the actual state itself. So we have a different class if it’s expanded, and if you click anywhere on it, it’ll toggle the expansion. \r\n\r\n\r\nSo if it’s not expanded, then it’s easy. It’s just a `span` containing the `shortName` of the state, and the `shortName` is basically gotten by splitting it along the dots and just getting the `lastObject`. \r\n\r\n\r\nSo this `shortName` is `uncommitted`. The `fullName` is `root.deleted.uncommitted`. So it’s showing that, and if the state has a `highlightedFlag`, then it’ll have `highlightedState` and turn it yellow. \r\n\r\n\r\nThen if it is expanded, it’ll once again show the `state.name` with the full name this time, and then it’ll loop through all the possible flags and display them all, but gray out the ones that are not currently there using the `unless` helper, so it grays out the ones that are false. \r\n\r\n\r\nSo that’s pretty much it for the code. One last thing, I also used `ember-page-front`. This add-on lets me host my files on page front. And I’ve been really enjoying the experience so far, I might make a screencast all about that. \r\n\r\n\r\nSo that’s it for today. If you have any parts of this that you really enjoyed and want to see more of, go ahead and talk to me in the comments, and if you want to see more things where I just walked  through a bunch of code instead of diving deep into one issue, go ahead and tell me that too. Thanks and I’ll see you next time.\r\n", publish_date: "2016-01-01", links: "* [Model State Explorer](https://ember-data-model-states.pagefrontapp.com/)\r\n* [Github repository for Model State Explorer](https://github.com/jeffreybiles/model-state-demonstration)\r\n* [ember-cli-mirage](http://www.ember-cli-mirage.com/)\r\n* [pagefront](https://www.pagefronthq.com/)\r\n", thumbnail_image: "Screen_Shot_2015-12-15_at_1.43.40_PM.png", permalink: "105-the-making-of-the-model-state-explorer", free: false, difficulty: "intermediate", seconds: 450, wistia_embed: "<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script><div class=\"wistia_embed wistia_async_x4mnwt1ouj\" style=\"height:528px;width:800px\">&nbsp;</div>", code: "It's really hard to summarize something as wide-ranging as this screencast.  Why not [peruse the github repository](https://github.com/jeffreybiles/model-state-demonstration)?", guid: "a18b6a3a87334c7436913857f3f9cf8e08ec774e"},
  {title: "51 - Drag and Drop (with file uploads)", video_url: "", description: " In this episode, we create a drag and drop file uploader by combining the file upload machinery from episodes 48 and 49 with some browser events from episode 50.\r\n \r\nAlong the way we'll learn about the dragOver and drop events and get rid of a pesky observer.", transcript: "null", publish_date: "2015-06-28", links: "* [Episode 48- file upload](https://www.emberscreencasts.com/posts/48-upload-a-file-as-part-of-a-form)\r\n* [Episode 50- browser events](https://www.emberscreencasts.com/posts/50-browser-events)\r\n* [Blog on drag and drop](http://webcloud.info/blog/2015/03/09/ember-drag-drop-file-upload-the-rightish-way/)", thumbnail_image: "Screenshot_2015-06-25_11.42.21.png", permalink: "51-drag-and-drop-with-file-uploads", free: false, difficulty: "intermediate", seconds: 236, wistia_embed: "<div id=\"wistia_ttpncdnvig\" class=\"wistia_embed\" style=\"width:800px;height:500px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"ttpncdnvig\");\r\n</script>", code: "", guid: "4e1b8961271fde80c406619cfa3495c6d4177026"},
  {title: "34- CRUD pt 1: Read, Update, Delete", video_url: "https://www.youtube.com/embed/Nu02DHVNql0", description: "CRUD (Create, Read, Update, and Delete) are four operations that are vital to any system that involves the manipulation of data (aka, most of them).\r\n\r\nThis screencast shows a common way of creating a simple but complete CRUD interface in Ember.", transcript: "This is Part One of a two part series in creating a CRUD interface in Ember. \r\n\r\n## What is CRUD? \r\n\r\nCRUD stands for Create, Read, Update and Delete.  You can add new entries. You can retrieve, search or view existing entries. You can edit existing entries. Or you can delete or deactivate an existing entry. \r\n\r\nThese four operations are so important that according to the Wikipedia page,\"Without at least four operations, the software cannot be considered complete.\" For any sort of software where you are going to be interacting with the database, you'll need these four operations somewhere. In this series we're going to be showing a common way to create a CRUD interface using Ember and Ember Data. \r\n\r\nFirst, in Ember data, we have to have a model for the resource that we want to do the CRUD operations on. Then, in our router, we're going to put in nested resources. The ‘new’ route will be helping us create. The ‘posts’ and the ‘show’ route will be helping us read. The ‘edit’ route will be helping us update. Then, there will be a ‘destroy’ action that will help us delete. \r\n\r\n## Read\r\n\r\nWe'll start with the read functionality. First, with the index and the post route and then showing the individual record in the show route. \r\n\r\nWe'll create the posts (plural) route, and in that route we'll make the model function which will return all of the posts. Then, in the post template we'll loop through each of the posts in the model and display the title. That shows up like this. \r\n\r\nNow, we'll want to be able to click one of these and see more information about it over here. To do that we'll need to add a link and then an outlet, and then create the show route. In the post template we'll use bootstrap grids to create a column on the left that is a quarter of the page that contains our list, and then a column on the right that is three quarters of the page that contains our outlet. Our outlet can display any of the routes nested below posts, so it can display new or it can display a post and any one of the routes below that. If we don't specify one, then it will show index. \r\n\r\nLet's go ahead and make the index template right now. In the posts index folder our file called template.hps we'll just have a header and then you can see that is indeed what's displayed when there is no other route specified. \r\n\r\nNow let's add the link-to for each of the list items, for each of the posts. It's going to link to post.show so let's go ahead and create the template for that. To start with, let's just have a header and then the title of the post so that we can see that our things are working. Then, when we click some of these links, you can see that it's going to the posts/post/show route and showing our title. I'm going to go ahead and paste in some slightly more complete code. We can see that this is a respectable read page, so we have read under control. \r\n\r\n## Delete\r\n\r\nNow let's try to destroy one of these entries. To do that, we'll need a button that you can press to delete the entry, and then we'll need to make a controller for the show route where we respond to that action. \r\n\r\nFirst we're going to get the model. The model has been grabbed for us from the server by the generated show route. If you don't include a show route then it will automatically create one for you and get you the correct model. \r\n\r\nWe'll get that model and then we'll call destroy record on it. This will send an Ajax call that will destroy the record on the server. It will also destroy the record in the Ember Data store, so we don't want to be sticking around here very long. \r\n\r\nIt returns a promise we'll call .then and then we'll include the function and this an ES6 function so ‘this’  has been kept. So, since the scope of this is still the controller we can call this.transitionToRoute and then go to posts. \r\n\r\nWe can test this out in our browser and we hit the delete button and there's no longer the post about metaprogramming with defineProperty. Let's search for defineProperty and it is nowhere to be found. It is good and deleted. That holds even if we reload the page, because it's been deleted on the server. \r\n\r\nThat is all just with destroyRecord. That's some crazy power with Ember Data. \r\n\r\nWe've gotten the read and the destroy. Now we need to do the update function. \r\n\r\n## Update\r\n\r\nLet's go into our post show template and put a link that goes to the post/edit route. We're feeding it the model and giving it a tagName of button. This is what it looks like. If we hit that button it will take us to the edit route and there's nothing there. Let's fill in that template. \r\n\r\nThe file is at post/edit/template.hbs. We'll put in various inputs, and then we'll go ahead and put in a button that has the action ‘save’. For that to work we'll need a controller. This controller will have a save action. In that action we get the model and then we call save on it. Then we uses promises and our ES6 function syntax and we can transition to the route of post.show. \r\n\r\nLet's test this out in the browser. Let's change one of the variables and then save. It appears to have saved. Let's go ahead and reload and it's still there with us. We have successfully updated the record. \r\n\r\n##  Coming soon:  Create, DRY, and Blueprints\r\n\r\nIn this episode we've created read, update and destroy functionality for our resource. However, we still haven't done the create functionality. \r\n\r\nCreating is a little bit trickier because you have something like the ghost of a record right when you hit the new button but before you save it. You don't want that record to show up in your list and you definitely don't want it saving to your server. So in this week's pro-episode we'll create some work-arounds to make that work. We'll also take steps to ensure that we're not repeating work between the edit and the new templates. \r\n\r\nYou may have noticed a lot of similarities between the tags and the posts in terms of their CRUD functionality. Next week I'll show you how to create blueprints. Those are the things that run when you type ember g. We'll create our own custom blueprint that will create all the apparatus for a CRUD interface. Look forward to seeing you then.", publish_date: "2015-05-02", links: "* [Wikipedia on CRUD](http://en.wikipedia.org/wiki/Create,_read,_update_and_delete)", thumbnail_image: "Screenshot_2015-04-29_22.55.25.png", permalink: "34-crud-pt-1-read-update-delete", free: true, difficulty: "intermediate", seconds: 521, wistia_embed: "<div id=\"wistia_k8c4dma11d\" class=\"wistia_embed\" style=\"width:800px;height:500px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"34-CRUD-pt-1\" /><meta itemprop=\"duration\" content=\"PT8M40S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/f4a766aa28e5ec49f6453354597e076eeb73a950.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/dc72a763154a066e2b1f4907626226fd9ea6a1a2.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=29109130&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Ff932d2134b97b25a4c695123134b2ec06442da36.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=520.82&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Ff4a766aa28e5ec49f6453354597e076eeb73a950.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fdc72a763154a066e2b1f4907626226fd9ea6a1a2.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-06-21T15:29:10Z\" /><object id=\"wistia_k8c4dma11d_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:500px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=29109130&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Ff932d2134b97b25a4c695123134b2ec06442da36.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=520.82&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Ff4a766aa28e5ec49f6453354597e076eeb73a950.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fdc72a763154a066e2b1f4907626226fd9ea6a1a2.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=29109130&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Ff932d2134b97b25a4c695123134b2ec06442da36.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=520.82&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Ff4a766aa28e5ec49f6453354597e076eeb73a950.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fdc72a763154a066e2b1f4907626226fd9ea6a1a2.bin\" name=\"wistia_k8c4dma11d_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">34-CRUD-pt-1</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"k8c4dma11d\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/k8c4dma11d/metadata.js\"></script>", code: "", guid: "c7e3e5de88c1f1bff88ebe3c536bbc6f0becc38f"},
  {title: "104 - Ember Data 2.0: Relationships", video_url: nil, description: "One amazing ability of Ember Data is connecting your models together through relationships in such a way that you don’t have to know the nitty-gritty details.\r\n    \r\nIn this episode we look at the `hasMany` and `belongsTo` methods, seeing how they can be combined and how to use their `async`, `inverse`, and `defaultValue` options.\r\n", transcript: "One of the really cool things about Ember Data is how it lets you connect your models with relationships. In this episode, we’ll go over the `belongsTo` and `hasMany` relationships.\r\n\r\n\r\nSo in your models, your DS models, you can define relationships just like you can attributes. So here, we’re defining the `hasMany` relationship of `team-membership` to the `teamMemberships` property. \r\n\r\n\r\nThen, in the `team-membership` model, we’re having the `monster` property belonging to the `monster` model. And so, it’s going to be linking to one `monster` model, and it will also be linking to one user. And then in the `user` model, it’s going to be linking to many `teamMemberships`.\r\n\r\n\r\nNow what this lets you do is it lets you have these relationships without worrying a whole lot about the underlying how Ember Data is fetching it from the server. It lets you act almost as if the stuff is already there.\r\n\r\n\r\nAnd then here you can like alright, let’s get the `currentUser`, let’s get all the `teamMemberships` on it, and you don’t have to worry as much about the underlying structure. I mean you do a little bit, because as you can see in this example, we’re checking to see if the memberships have already landed before we do the `mapBy`. But if we reference these relationships in a template, then Ember would take care of that for us. \r\n\r\n\r\nIt’s worth noting that if the model names correspond to the property names, then you don’t actually have to state the model name as an argument. You can just leave it blank. However, if the model name doesn’t correspond with the property name, you do need to have the model name as the first argument. \r\n\r\n\r\nFor example if we had `favoriteMonster` on the user, then it would be a `belongsTo`, and we would have to specify that it’s a `monster`, since there’s no `favoriteMonster` model. \r\n\r\n\r\nThere’s also some terminology that you should know that people use when talking about relationships. So here we have a team member relationship and we have many team members. And in team members well the `team-membership` belongs to one user. We call that a one-to-many relationship. You can also have a one-to-one relationship by having two models that have two `belongs-to` relationships that connect. And you can also have a many-to-many relationship by having two models that have `hasMany` relationships that connect. \r\n\r\n\r\nSo for both `belongsTo` and `hasMany`, there are two optional arguments that you can put into the second parameter. So first you have the name then you have the optional arguments. The first optional argument is `async`, and that lets Ember Data know whether this relationship is going to be synchronous or asynchronous. \r\n\r\n\r\nNow it was false by default before Ember Data 2.0, but now in Ember Data 2.0, it’s true by default, and you have to manually turn it off if you want it to be purely synchronous. And in general, you’re going to want it to be `async`. \r\n\r\n\r\nLet me show you what synchronous versus asynchronous means. But before we do that, we’ll have to get into looking at this payload. So this is using the active model adapter, but the general lesson that I’m going to show you should carry over.\r\n\r\n\r\nSo here in this monsters call, it gives us both `monsters` and `team_memberships` . And here in the `monsters`, in the `team_membership_ids` property, it gives us an array of team membership ids. And for this, this could be both synchronous and asynchronous, because we’re including the `team_memberships`. \r\n\r\nHowever, with the `team_memberships`, notice we have the `monster _id` and the `user_id`. These are both asynchronous by default, but it would be okay for the monster to be synchronous because this monster is included. But if we had the user as synchronous, then that would cause a problem because we haven’t included any users in this payload. So if it’s synchronous, it has to be included in the payload. If it’s asynchronous, then it can be fetched whenever you need it, not necessarily in the same payload. \r\n\r\n\r\nSo that’s the `async` option. Now let’s talk about the `inverse` option. So the `inverse` option is useful if you have two models that have multiple types of relationships to each other. So the example they give in the documentation is that in the comments... a `comment` can have different relationships to different posts. And then the post, it wants all the comments of a certain type, so it only wants the comments where this post is their `redPost`. This example is a little bit nonsensical, but hopefully you can get the idea. \r\n\r\n\r\nLet’s look at a possibly more useful example from our model state explorer. So here on our `state` model, we have the `parent` relationship and the `children` relationship. So the parent, it `belongsTo` another `state`, and the `inverse` is `children`. And for the `children`, it `hasMany` states and the `inverse` is `parent`. So it’s not just one model related to another model, it’s one model related to itself. So this helps us keep track of how they’re related.\r\n\r\n\r\nNow notice that we also have a third thing that wasn’t in the documentation, `defaultValue`. And that’ll just set what it is before you get anything back, or if it’s null. \r\n\r\n\r\nSo that’s our exploration of the `belongsTo` and `hasMany` methods, the relationships in Ember Data. In this week’s pro-episode, we’ll be going over more of this code that I used to create the model state demonstration. It was introduced a couple of episodes back and now I’m going to show you some of the cool things I did while making it. I hope to see you then.\r\n", publish_date: "2015-12-30", links: "* [belongsTo API docs](http://emberjs.com/api/data/#method_belongsTo)\r\n* [hasMany API docs](http://emberjs.com/api/data/#method_hasMany)\r\n", thumbnail_image: "Screen_Shot_2015-12-15_at_1.26.17_PM.png", permalink: "104-ember-data-20-relationships", free: true, difficulty: "basic", seconds: 389, wistia_embed: "<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script><div class=\"wistia_embed wistia_async_ri5pw12qa1\" style=\"height:528px;width:800px\">&nbsp;</div>", code: "You can define relationships by calling `DS.belongsTo` or `DS.hasMany` or a `DS.Model`.  The first argument is a string giving the name of the model used in the relationship.\r\n\r\n```js\r\nexport default DS.Model.extend({\r\n\tuser: DS.belongsTo('user')\r\n})\r\n```\r\n\r\nEmber Data can infer the model without the first argument if the property name matches to the class name:\r\n\r\n```js\r\nexport default DS.Model.extend({\r\n\tmonster: DS.belongsTo(), //infers 'monster'\r\n\tteamMemberships: DS.hasMany(), //infers 'team-membership'\r\n\tfavoriteMonster: DS.belongsTo('monster') //requires specification\r\n})\r\n```\r\n\r\nThe second argument to both of these methods is a hash with three possible properties: `async`, `inverse`, and `defaultValue`.  They are all demonstrated in the following reflexive relationship:\r\n\r\n```js\r\nexport default DS.Model.extend({\r\n    parent: DS.belongsTo('state', {inverse: 'children', async: true}),\r\n    children: DS.hasMany('state', {defaultValue: [], inverse: 'parent', async: true})\r\n})\r\n``` ", guid: "7a99726332a3b8b188496ad81a1aebe48986fb0c"},
  {title: "20 - Sorting Tables with SortableMixin", video_url: "https://www.youtube.com/embed/1sTNZCCYqkQ", description: "Learn how to use the SortableMixin to create a table that can sort based on several different criteria, based on user input.\r\n\r\nNote: Ember.SortableMixin is now private.  Try using Ember.computed.sort instead.", transcript: "Hey, welcome back. Today, we're going to take a break from exploring the Ember inspector and start a series on sorting and filtering. You may recognize this list as the list of hit YouTube videos that I compiled during some of my earlier videos last year. I've added a little bit more information about the day that they're created, and day and time that they were last updated. \r\n\r\n### Sorting with sortProperties, sortAscending, and arrangedContent\r\n\r\nHowever, right now, they aren't organized very well. Let's say we want to organize the videos based on the time they were created. How would we do that? First, you can make an array controller. However, those are being phased out. So let's make a regular controller. Include the sortable mix-in. So you have your sort properties property in the controller, and it's an array. It sorts based on the first property. Then, if there are ties, it sorts based on the second property. We're just going to use one property today, and that property will be createdAt. \r\n\r\nIf we go back to our index page, we'll see that it's still not sorting. That's because, in our template, we're looping through the model of our array controller, but sort properties doesn't affect model property. It affects a property called arrangedContent, so if we replaced model with arrangedContent, then the content will sort correctly.\r\n\r\nIt's sorting, but what if we wanted to have the most recent at the top? For that, we'll need the sortAscending property. sortAscending is a Boolean that defaults to true, so if it's true, lower value goes first. We want the most recent videos up top. That is, the videos with the highest createdAt value. Then we'll need to make sortAscending false. Now we have the most recent up top.\r\n\r\n### User InterAction\r\n \r\nBut what if we want to sort by a different property? Maybe we want to sort by author's name. We could go into the code and edit it, but that's not an option for a site's users, who don't have access to the code. It would be great if we could let the users sort by any of our four properties. Fortunately, Ember lets us do that.\r\n\r\nLet's make each of the table headers have an action which we'll call \"sortBy.\" The action will take an argument, which is the property that we want to sort by. Let's replicate that for all the table headers. Then we'll create the action in post controller. This version is very simple. You set the sort properties to the property argument. Now, when we click the header, it sorts based on that criteria. \r\n\r\nNote, however, that sortAscending is always staying the same. In this case, we've set it to false, so it always sorts in a descending manner. Let's change this. When we click on something for the first time, we want to sort in ascending manner. If we click on it a second time, we want the sort to change directions. We do this by a simple condition that is added into our action. For clicking a property a second time, then we toggle sortAscending. Otherwise, we set sortAscending to true. And we can see that it works. \r\n\r\n### Conclusion\r\n\r\nToday, we learned how to use sortProperties, sortAscending, and arrangedContent to easily sort lists of data. Next time, we're going to provide visual feedback and a more intuitive interface using some advanced component techniques. I'll see you then.\r\n", publish_date: "2015-03-14", links: "* [SortableMixin (now private!)](http://emberjs.com/api/classes/Ember.SortableMixin.html)\r\n* [Ember.computed.sort](http://emberjs.com/api/classes/Ember.computed.html#method_sort)", thumbnail_image: "Screenshot_2015-03-15_03.18.43.png", permalink: "20-sorting-tables-with-sortablemixin", free: true, difficulty: "basic", seconds: 223, wistia_embed: "<div id=\"wistia_cva1acpk88\" class=\"wistia_embed\" style=\"width:800px;height:528px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"20-sort-table\" /><meta itemprop=\"duration\" content=\"PT3M42S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/cb09a0bf576fa703a05546cae9c7b2a9a1f45d01.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/be82b68fa015708c388143a2cb087704438c6d08.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=11501254&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F365eb1fcf1bfab5e69d0bb8487e1aa59798e0cf8.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=222.397&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fcb09a0bf576fa703a05546cae9c7b2a9a1f45d01.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fbe82b68fa015708c388143a2cb087704438c6d08.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-07-03T04:13:14Z\" /><object id=\"wistia_cva1acpk88_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:500px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=11501254&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F365eb1fcf1bfab5e69d0bb8487e1aa59798e0cf8.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=222.397&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fcb09a0bf576fa703a05546cae9c7b2a9a1f45d01.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fbe82b68fa015708c388143a2cb087704438c6d08.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=11501254&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F365eb1fcf1bfab5e69d0bb8487e1aa59798e0cf8.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=222.397&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fcb09a0bf576fa703a05546cae9c7b2a9a1f45d01.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fbe82b68fa015708c388143a2cb087704438c6d08.bin\" name=\"wistia_cva1acpk88_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">20-sort-table</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"cva1acpk88\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/cva1acpk88/metadata.js\"></script>", code: "", guid: "f8d163adc8f52ef39533c0fc3f81742e53266291"},
  {title: "3: Metaprogramming with defineProperty", video_url: "http://www.youtube.com/embed/p33vk9ykc3s", description: "Ember provides a way to do most of what you want without resorting to metaprogramming... but it's a nice option to have, just in case.\r\n\r\n", transcript: "We're going to have some fun today exploring metaprograming with the defineProperty method. To understand what defineProperty can do, we need to take a step back and see where properties are used. Notice that in our model and in our routes and in our controller that after the extend, there's a hash. Anything in that hash is a property. Here in the model, title, author, date, and body are all properties. In the routes, model is a property. In our controller, is editing, edit, and doneEditing are also properties. Of course, we don't always call them properties. We would call doneEditing a function because a function has been assigned to the doneEditing property. We might call title an attribute because an attribute has been assigned to the title property.\r\n\r\nLet's take one of our properties and re-implement it using defineProperty, just so we can show the mechanics of defineProperty. For our purposes today, defineProperty, we'll take in three parameters. Here, it will take in the context, and the second is the property name, and then the third is the value. Then, let's comment this out because we're just going to be using this for reference. \r\n\r\nIn order to define our property, we're going to need a property to put that functionality on. We'll call this define attributes and it will be a function that will be called \"on 'init'.\" A property that is called \"on 'init'\" will be run at the initialization of this model so that it's guaranteed to run before the property that we're defining ever gets called. Within this function, were going to call Ember.defineProperty. Then, we're going to give it the context, which is this model. Then, we'll give it the property name which is \"title\" and then the value, which is \"DS.attr\". With this done, we can take out how we defined title before and check that it works.  We'll refresh this page and the title is there and still responding as an attribute. \r\n\r\nNow, let's define all these attributes like this. We'll make an attributes property and we'll put in there all the attributes that we've used: title, author, date, and body. Then, we're going to make a loop over those. We're going to grab the attributes and call \"forEach.\" We'll feed the function inside the attribute and then put our defineProperty within that loop. Of course, it won't work right off the bat. Right now, it's just going to be defining title four times. Let's put the attribute name in place there and then, it's a little tricky because this is now scope to the \"forEach.\" We want it scoped to the model. Here, we're going to put define a variable called model and then we're going to use that in here. At that point, we should be able to replace all our other attributes with the defined properties. When we reload our page, we'll see that it works. It's working just as before even though we've defined these on the fly at runtime. \r\n\r\nThe case that inspired this screencast was a group of methods that we were defining by hand for every day of the week. There were three such method groups, resulting in 21 total methods. DefineProperty not only reduced the amount of code, but made adding new functionality or changing the current functionality easier. \r\n\r\nHowever, you should be careful when using this method. You'll notice that in Ember Inspector, in the post, it is only recognizing the ID. Ember Inspector doesn't recognize the attributes that we defined at runtime and metaprogramming is notorious for being hard to support with tools. So by being clever, you're giving up some of the ecosystem support. Second, the source code contains a warning. It says \"this is a low-level method used by other parts of the API. You almost never want to call this method directly. Instead, you should use 'Ember.mixin()' to define new properties.\"\r\n\r\nMixins, if you don't know, allow you to define properties on the mixin that get used in whichever class that the mixin is applied to. If you look at the source code of mixin.js, you'll see that, in applyMixin, after doing lots of very clever things, it calls defineProperty on every property defined in your mixin. \r\n\r\nThis is an example of what Tom Dale and Yehuda Katz spoke about in their recent keynote: using a low level flexible API, like defineProperty, to build a safer, higher level API like mixins. While you can probably think of some places in your project where you can use defineProperty to simplify your code and reduce repetition, remember that it is a powerful tool, so use it responsibly.  Happy coding.", publish_date: "2014-03-16", links: "* [Source code](https://github.com/jeffreybiles/bloggr-client/tree/3/Ember.defineProperty)\r\n* [Tom and Yehuda's keynote](http://www.youtube.com/watch?v=jScLjUlLTLI&list=HL1395006973&feature=mh_lolz)", thumbnail_image: "3-metaprogramming-with-define-property.jpg", permalink: "3-metaprogramming-with-defineproperty", free: true, difficulty: "advanced", seconds: 368, wistia_embed: "<div id=\"wistia_u2timnbxnb\" class=\"wistia_embed\" style=\"width:800px;height:500px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"metaprogramming with defineProperty\" /><meta itemprop=\"duration\" content=\"PT6M7S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/ce52d6ba13bc06f6587230764e91443f77562696.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/f1fc8d9ff02f2176a1fe9de7ff362c8853a831d4.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=36586850&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F221331a35633840d3008f9217e55e7a7a2708570.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=367.592&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fce52d6ba13bc06f6587230764e91443f77562696.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Ff1fc8d9ff02f2176a1fe9de7ff362c8853a831d4.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-07-03T04:34:06Z\" /><object id=\"wistia_u2timnbxnb_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:500px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=36586850&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F221331a35633840d3008f9217e55e7a7a2708570.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=367.592&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fce52d6ba13bc06f6587230764e91443f77562696.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Ff1fc8d9ff02f2176a1fe9de7ff362c8853a831d4.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=36586850&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F221331a35633840d3008f9217e55e7a7a2708570.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=367.592&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fce52d6ba13bc06f6587230764e91443f77562696.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Ff1fc8d9ff02f2176a1fe9de7ff362c8853a831d4.bin\" name=\"wistia_u2timnbxnb_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">metaprogramming with defineProperty</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"u2timnbxnb\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/u2timnbxnb/metadata.js\"></script>", code: "", guid: "695b5fe837608c48ee7a92b46daadf724076d4bb"},
  {title: "Embering on the Shoulders of Giants", video_url: "https://www.youtube.com/embed/mZCQTTM01jk", description: "A special philosophical aside on when it's appropriate to use Ember (spoilers: it's almost anytime you're making a web app).\r\n\r\nThere's also a huge listing of all the things Ember and the surrounding ecosystem do for you- things you don't have to learn.\r\n\r\nThis is a good one to send to friends who are ember-curious.", transcript: "Hey, I'm Jeffrey Biles from EmberScreenCasts.com. Today I'm going to give you an overview of Ember.js and the surrounding technologies. \r\n\r\n## This is Not a Coding Screencast\r\n\r\nNormally in these screencasts I would show you a bunch of code and teach you how to write code, and if that's what you're looking for there's over 30 other screencasts on this website that can help you do that. \r\n\r\nBut today, in just 20 minutes (oops, it was 33…), I want to give you a complete overview of Ember in the ecosystem, so I don't have enough time to in the depth in one technology. But I've got just enough time to talk about many technologies, and the philosophy that holds them together.\r\n\r\n## This is (Natural) Philosophy\r\n\r\nLet's start with the quote from a philosopher, my favorite natural philosopher Isaac Newton said, \"If I have seen further it is by standing on the shoulders of giants.\" What he means by that is that, he's obviously a very smart guy and he's done all these amazing things but doesn't mean he's the smartest person whoever lived just because he discovered something new. There are a lots of smart people that came before him and he's saying that, because of those previous discoveries that's why he could make the discoveries that he made. \r\n\r\nDiscoveries like gravity, a lot of our everyday physics, different light refraction's, these are all things that Newton discovered, but they're only possible to discover because of the work that happened before. He's standing on the shoulders of these giants of science and philosophy. That's what he meant.. but when I imagine that, I always imagine this-- literal giants standing on the literal shoulders of other giants (except, in my imagination, I'm better at Photoshop and I can actually put their feet on their shoulders).\r\n\r\nLet's apply this to technology. Not-Isaac-Newton said, \"If I have made awesome web apps it is by Embering on the shoulder of giants.\" Let's look at what makes up that stack of giants that Ember stands on. \r\n\r\n## The Giants Below Ember\r\n\r\nAt the bottom we have NAND gates and we think of NAND gates as just this logical abstraction and we can do that because the abstraction works so well. NAND gates are actually these master works of quantum mechanics, electrodynamics, all the stuff that we never have to think about.  Of all the abstractions we're going to talk about today this is by far the most obstructive because we're not even realizing all the stuff that's happening so that we can have NAND gates.\r\n\r\nSo we have NAND gates. On top of that we've got some microchips and we got some very creative people combining NAND gates and other types of gates into microchips. Then we have an assembly language to talk to microchips and C that compile down into assembly language.  Then we have JavaScript which compiles down the C and we have jQuery on top of that which covers over some of the uglier parts of JavaScript as well as the DOM. Then on top we have Ember standing on all these giants.  \r\n\r\nThat's a nice story we can tell but there is a little problem with it. Namely that NAND gates were not invented for the express purpose of building Ember. As a matter of fact, C wasn't build for the express purpose of building Ember.  So It's not a stack of giants, it's a tree of stacks of giants, with various branches that do different things and multiple things building on one abstraction. \r\n\r\nNow, if you are familiar with evolutionary biology then this may look familiar to you because it looks very similar to the tree of life— and that's no accident. Because each technology much like each species fulfills an ecological niche. \r\n\r\n## No Technology is Always Best\r\n\r\nThere are some species that are really good at building at skyscrapers and writing books and extending their niches, those are humans. If you're in a place where you can use a bunch of tool, use your big old brain then it's really nice to be a human. That doesn't mean humans are strictly better just that we're better at certain niches. \r\n\r\nFor example if we're underwater it is distinctly not better to be a human.  If you're underwater, it's much better to be a fish, and then, if you are in a live volcano, you definitely don't want to be a human or a fish. However, there are certain types of life— very simple, very specialize types of life — that can survive in an active volcano. \r\n\r\nThis maps on to various technologies, where Ember… it's not necessarily the best for every situation. It's very flexible and it's extremely powerful but if you want to build a blog, or live inside an active volcano, or create a sales force— you can guess what's whatever at that. But, for making general purpose web apps, Ember is where it's at.\r\n\r\n## The View From the Top\r\n\r\nWe have the stack of technology for making general purpose web apps and Ember is at the top. What's it look like from there? It can be a little bit dizzying because there are so many abstractions that maybe new to you that you didn't even know existed before, or maybe you knew they existed but you're used to writing them by hand, so some of this maybe really unfamiliar first, but I want to convince you that it's worth it. \r\n\r\nLet's take a look at a bunch of the things that you don't have to worry about when you're writing in Ember. Let's start of with what Ember CLI gives us.\r\n\r\n## ember-cli\r\n\r\nHere's how you get started with Ember, you say, \"npm install ember-cli,\" and then you type in 'ember new' then the name of your app. That gives you a complete ember app in just two lines… and here's all the things that you don't have to do. The things that are already done for you just in those two lines.  Let's go for them one by one. \r\n\r\n### Package Managers (npm and bower)\r\n\r\nIt's popular today to complain about npm and bower but if you remember back in the battle days you had to include JavaScript library files in the HTML of your web page. You not only had to do that for other people's JavaScript, you had to do it for your own. You had to download and place in actual files, and then dependency management was a nightmare.\r\n\r\nNpm and bower have solved this, and Ember CLI wraps a further layer on top of that, where you don't have to worry about getting started, it does that for you and includes everything you need for your basic Ember app. \r\n\r\n### File and Directory Structure\r\n\r\nIt also gives you a file and directory structure. Jackson Pollock may or may not be beautiful depending on who you ask but you definitely don't want a Jackson Pollock in your code base. You want this nice thing to the left, which is everything in its place. Ember gives you a file and directory structure that's common between different apps between different coders. This is extremely valuable for three reasons. \r\n\r\nThe first, the most obvious, is so you know where to put something. There's no wondering about which folder it should go in. This is the most obvious but it's also the least useful.\r\n\r\nThe second is that you know where in the past you have put something so you can find it again. \r\n\r\nThe third is that someone else knows where you have put stuff.  By having this common structure it save you, your future self, and your colleagues a lot of time. \r\n\r\n## Build System (Broccoli)\r\n\r\nIt also gives you a build system. This is Gruntfile, and as you can see it's pretty complicated. A grunt is definitely better than doing everything by hand, but let's see if we can get it simpler.\r\n\r\nThis is the broccoli file in an Ember CLI project. Now, the top two lines and the bottom line are doing basically everything that this previous Gruntfile did. All the lines in between are things that we had to include. This is everything that's needed for an actual production app that has been in production quite awhile, and there's only one command that I need to learn— app.import. \r\n\r\nWe're taking a lot of abstractions, a lot of complicated abstractions and simplifying it down to one abstraction that does a lot of work for you. This is a pattern you'll see over and over when working with Ember and Ember CLI. Let's see what else Ember CLI has done for us already. \r\n\r\n### JSHint and LiveReload\r\n\r\nJS Hint is included automatically, that can help catch syntax errors before they become a problem. JS Hint… normally you have difficulty remembering when to run it, but luckily for you Ember CLI runs it every time.\r\n\r\nEvery time… When is that? Because we have Live Reload it's every time you make a change to a file. Not only will it run JS Hint but it will also refresh in the browser. \r\n\r\n### ES6 Modules\r\n\r\nEmber CLI also gives you a module system. Popular module systems in the past few years have included common JS, require JS and a couple others. The one that's going to use most often in the future is ES6 modules because it's going to be baked into the language.\r\n\r\nYou maybe wondering, \"Well, how are we going to use ES6 modules if ES6 hasn't been released in all browsers yet, if that feature isn't there yet?\" \r\n\r\n### ES6 Transpilation (Babel.js and Broccoli.js)\r\n\r\nWe have ES6 Transpilation using Babel and Broccoli.js so not only can you use ES6 modules, you can use any ES6 feature that is currently part of Babel. These modules and transpilation worked together with the file structure so that you really don't have to do much or anything to get this going.\r\n\r\nThere is one small downside of using ES6 modules, and that’s that there's a little bit of boiler plate, the import and the export at the beginning and end. That's why Ember gives you Generators.\r\n\r\n### Generators\r\n\r\nYou just type in 'ember generate’, then the name of type of file you want, and then the name of the file, and it will give you the JavaScript. \r\nIn the case of a component and several other types it will give you the handle bars. Then it will generate a test which does have quite a bit more boiler plate that it saves you from writing.\r\n\r\nYes, it does generate a test but how does it run it? \r\n\r\n### Test Runner\r\n\r\nEmber CLI gives you a test runner just by typing in 'ember test.' That will run them once and if you type 'ember test' with the server option it will run it on file change, thanks to Live Reload. It uses QUnit as the default, and you can create acceptance test like that using the Ember generators (you’re starting to see how all these things work together to provide this amazing experience).  You can type in to generate a test and it will generate it. \r\n\r\nOf course not everyone likes QUnit, so if you don't like it you can just replace it with something else and you can do that thanks to add-ons. These are the three lines that takes to replace Ember-CLI QUnit with Ember-CLI Mocha. Only three lines to switch out your testing framework. \r\n\r\nBack a year ago it would take two or three **hours** to get the testing framework set up, and you have to do it in every single app. Now, it takes you anywhere from zero seconds if you're using QUnit to about a minute if you're using Ember-CLI Mocha. This is a crazy amount of abstraction.\r\n\r\nSo you have those, and some are even easier— you just type in one line, the install, and it does everything for you. \r\nThese are 10 things that Ember-CLI does for you that you don't have to think about. It just does it with these two lines. Let's move on to the actual framework.\r\n\r\n## Ember.js\t\r\n\r\nEmber itself does these nine things as well as several others. There's a lot that Ember does for you. \r\n\r\n### Separation of Concerns\r\n\r\nThe first is separation of concerns, once again you don't want your code base looking like a Jackson Pollock painting— or the more common term, spaghetti code. \r\nEverything has a job to do and we separate it based on what that job is. In Ember we separate it into routes and controllers and components and things like that.  This works together with the file structure to help you know where you should put something and where someone else in the past has put something, as well as how different parts the app talk to each other. \r\n\r\n### Object System\r\n\r\nEmber also gives you an Object System. JavaScript doesn't have an object system— it has something somewhat similar called Prototypes. This is a source of a lot of confusion and I want to convince you that no one understands prototypes.\r\n\r\nAs evidence I present the Amazon test.  The Amazon test is when you look up two different terms to see what's available. For Object Oriented Programming there were 26,000 results. Many of those books were up to date and written by top authors. There's a deep literature on how to write good object oriented software.\r\n\r\nWhereas with prototypes there were 787 results, the third listing is from 1999, the fourth listing is a shoe (I’m not making this up), and then the first and second listings are titled 'You don't know JavaScript.’  So that leads me to believe that no one understands prototypes. \r\n\r\nFortunately Ember gives you Ember.Object with classes, inheritance, and mixins, all the things that you love from a typical object system. This specific Object System is inspired by the Ruby Object System. No matter what you think about dynamic typing or the speed at which Ruby runs… It has a really good object system, and Ember was wise to copy it. \r\n\r\n### Routes (and a Working Back Button)\r\n\r\nEmber gives you Routes. \r\n\r\nThis may not seem like a big deal to people who are use to writing sever side applications. Because your routes just work, you ask for something and the user gets it back then they can send that something to their friends. \r\n\r\nRecently there's been something called Single Page Applications and they have broken the web. That's because single page applications don't respect the URL. They stay at one URL while doing all these crazy things and then, if you refresh the page, it suddenly looks very different than where you were. You might lose all your work.\r\n\r\nEven worse— if you hit the back button, you're expecting to go back one step, but it takes you back 50. That's really bad experience. \r\n\r\nFortunately Ember helps you with that, with almost no work, no extra work. You get a URL, you get a working back button, you get all the wonderful things that you have in a server side up but with the smoothness of a frontend application.\r\n\r\n### Observers\r\n\r\nEmber gives you built in observers, this may not big news since this is one of the things that has been in the JavaScript ecosystem for awhile— even backbone has observers. \r\nThe basics are you can look at a property and when it changes you trigger something else. Ember just happens to bake them in and make them easier to use. \r\n\r\n### Computed Properties\r\n\r\nEmber also gives you computed properties, which is something that is not common in web apps.\r\n\r\nThe fancy term for computed properties is functional reactive programming. The less fancy term for it is “that thing you do in Excel”.  That thing where you have that one cell that calculates everything and you write an equation in that cell. Then whenever you change one of the cells that it's watching, it changes the result, it computes the result.\r\n\r\nEmber lets you do that but not just with numbers, it let's you do that with any property in your application and this is extremely powerful.\r\n\r\n### Components, Container, Templating System, Run Loop, and More\r\n\r\nThese are the first five things in my list. You also get isolated components that is a huge topic and it's where the web is going. It's also something that is included in most frontend frameworks now. \r\n\r\nIt gives you a container, the container is something that I didn't have to think about for the first year that I was writing in Ember. That is *crazy* that I could spend a year using this powerful abstraction and not even know what it was. When I needed to use it, when I needed to alter it, it was there and I could alter it.\r\n\r\nIt comes with the built in templating system with data binding so you don't have to bind your JavaScript files to your templates, Ember does that for you. This is once again something that's fairly common in frontend JavaScript frameworks. \r\n\r\nIt also gives you a run loop which helps with when things are calculating or recalculating in a very quick rate. It helps me keep things manageable. This is another thing that you don't often have to think about, it just does wonderful things for you.\r\n\r\nAnd a lot more. \r\n\r\n## Outside of Ember Core\r\n\r\nBut I don't want to stay on Ember for the entire talk, I want to move on to some things that are outside of the framework, in the surrounding ecosystem. \r\n\r\n### Ember Data\r\n\r\nEmber data is a project that wants to help obstruct a way talking to the server. You can define your models, and then once you define the model it'll keep a store of a bunch of your data that is with in the browser, so you don't have to worry about storing it on the DOM, you don't have to worry about fetching it from the server every time, it's within your JavaScript run time. That helps with keeping track of things. \r\n\r\nIt also makes things much simpler to write and much easier to understand. On the left we have the Ember data way and on the right we have the old jQuery way and you can see the Ember data way is much simpler and easier to understand.\r\n\r\n### Animations with liquid-fire\r\n\r\nThere's also a project to bring you easy animations. \r\n\r\nIt maybe surprising to people who live their lives on the web but typically when you interact with something it doesn't disappear instantaneously and then become instantaneously replaced with something else. But that's how a lot of our interactions are on the web. \r\n\r\nA good model for how it could work is iOS. In iOS, let's say you click something. It might slide to the left, and then when you go back everything slides back to the right. It looks like the menu is of to the side of your phone.\r\n\r\nIn traditional fronteend development that's very hard to do, requires a lot of specialized code. Fortunately because of the conventions of Ember this is all you have to do: you install the Liquid-Fire add-on. Then you have a transitions.js file where each transition that you want to specify has anywhere from two to ... well, they can be longer than this if you want to get really fancy. \r\n\r\nThis is an amazingly simple interface and we can only have it because it's building on top of the route abstraction. If we didn't have routes and URLs that were standard between apps, then this would be much harder to do, but because we're able to build on that giant, because everyone is on that giant we can amazing abstractions like this. \r\n\r\n### Fastboot (server-rendered html)\r\n\r\nWe can also get fastboot. With fastboot you can render your Ember app on the server side.\r\n\r\nWhat that means is a web crawler can get it from the server as if it's an older, more traditional web page. It also means that legacy users, such as lynx or IE8, can get a server generated version of the website. \r\n\r\nIn a more practical example you can get the first load of a website, and *then* all the JavaScript loads in while you're looking at that first screen. So you get that very quick load of an older style server-generated website, but then you get interactive of an Ember website.  \r\n\r\nWe’re able to do this because of all the giants that were building on and you can install it right now. It's not completely functional yet but it's coming soon after Glimmer.\r\n\r\n## Addon Ecosystem\r\n\r\nAnd there are more. There are 824 add-ons for Ember-CLI.\r\n\r\nSome are big like the ones I just showed you, some are smaller that just have a little button or a different style of design. There are all these giants here, there are some built in, some are big, some are small.\r\n\r\nThis is a lot… of stuff that you don't have to know.\r\n\r\n## Abstraction is Bliss\r\n\r\nRemember, almost everything that I've said in this talk are things that you would have to know a lot about if you weren't using Ember, but since you're using Ember you only have to know the small Ember API that takes care of all that for you. You're standing on top of this giant and there's a few new API's that Ember introduces and there's a giant bunch of stuff that Ember takes care of for you.\r\n\r\n## Great Power\r\n\r\nYou have a lot of power in Ember. Let me give you a demonstration. \r\n\r\nBack 14 years ago in 2001 someone started writing Gmail. He working on it, he worked on it for three years, and by the time he was done and it was released in 2004, there was over a dozen people working on it. Some of that effort went in to creating like a spam filter and backend things like that, but a lot of it, a lot of what made Gmail so mind blowing, was the interface, which at that time was astounding.\r\n\r\nA year ago someone tried to recreate one of those original Gmail interfaces in Ember. I'm not sure exactly how long it took them on the first go-round, but now they use it to teach a beginning Ember course that takes two days. \r\n\r\nIt used to take three years and over a dozen engineers and now it takes two days for beginners. That is a *lot* of power… but we don't want to use that power just to recreate the great feats of yesterday.\r\n\r\n## Do Great Things\r\n\r\nBecause we're standing on giants, we have great vision.  We can see further, we can see things that other people even a few years ago never would have thought possible to have happen in a web browser. Because of the power that we have in a web browser, the tools that it gives us over native apps, we can look farther than anyone has ever looked before. \r\nSo my question is- what will you build? Thank you.\r\n", publish_date: "2015-04-28", links: "", thumbnail_image: "Screenshot_2015-04-28_22.44.39.png", permalink: "embering-on-the-shoulders-of-giants", free: true, difficulty: "basic", seconds: 1757, wistia_embed: "<div id=\"wistia_yxhevmdby8\" class=\"wistia_embed\" style=\"width:800px;height:528px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"Embering on the Shoulders of Giants\" /><meta itemprop=\"duration\" content=\"PT29M16S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/1cc57e70f76efcdb302b7b378cad46e222d87d12.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/7469bbe5082d1758de5aa64ebcd35501303805b1.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=79526783&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F8383bf580cc871ad36f3e92f2b1ed42789a2dcea.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=1756.42&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F1cc57e70f76efcdb302b7b378cad46e222d87d12.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F7469bbe5082d1758de5aa64ebcd35501303805b1.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-07-03T04:11:11Z\" /><object id=\"wistia_yxhevmdby8_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:500px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=79526783&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F8383bf580cc871ad36f3e92f2b1ed42789a2dcea.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=1756.42&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F1cc57e70f76efcdb302b7b378cad46e222d87d12.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F7469bbe5082d1758de5aa64ebcd35501303805b1.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=79526783&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F8383bf580cc871ad36f3e92f2b1ed42789a2dcea.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=1756.42&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F1cc57e70f76efcdb302b7b378cad46e222d87d12.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F7469bbe5082d1758de5aa64ebcd35501303805b1.bin\" name=\"wistia_yxhevmdby8_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">Embering on the Shoulders of Giants</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"yxhevmdby8\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/yxhevmdby8/metadata.js\"></script>", code: nil, guid: nil},
  {title: "106 - Ember Data 2.0: Metaprogramming with Relationships", video_url: nil, description: "In this video we expand our completely generic model viewer by adding relationships. That means with just one template and controller, we’ll be able to see the relationships of all our models in both the abstract and the specific.\r\n\r\nTo do this, we’ll combine the techniques we learned while creating the generic model viewer in episode 101 with the things we learned about relationships in episode 104, while learning about the relationshipNames and relationshipsByName properties on DS.Model.", transcript: "In Episode 101, we used metaprogramming and the attributes property on DS.Model in order to create this really cool app that will show us using the same templates and the same route and controller, the different properties for the different models that we have. \r\n\r\n\r\nSo here we’re seeing the monster, here we see all the properties on the monster, and then below for an individual monster we see the precise properties for that monster. But then we go to user and we can see the same thing.\r\n \r\n\r\nSo this is really cool, but there is one problem with it. We can’t see any of the relationships. And so that’s what we’re going to do in this video. We’re going to use the knowledge that we gained about Ember data relationships in Episode 104 and combine that with some of these properties on DS.Model.\r\n\r\n\r\nSo when I first started to try to put these relationships in here, I thought yeah, this is going to be easy. There’s the attributes property that we looped over before, and we already know how to get to it, so we can just use the `relationships` property. \r\n\r\nBut the `relationships` property is a little bit wonky. So instead of just giving us a list of relationships, you have to call `.get` on it, and then you pass it the klass. And so here for example, these two properties are based on the `user` model, and so you pass it `App.User`, or probably just do the string \"user\", and then it’ll give you this array. \r\n\r\n\r\nSo in order to access this, you have to already know what is already on there. And so for our metaprogramming, that’s not going to work, and these other relationship properties aren’t a whole lot better. You’ve got `relationshipsByName`, where you still have to know the name but now you’re knowing the name of the property rather than the name of the model that they’re connected with. \r\n\r\n\r\nAnd we’ve also got `relationshipNames`, which it just gives you a list of names based on `hasMany` or `belongsTo`. Finally, we have the `eachRelationship` function, which seems to almost do what we want, but it requires a specific record, and that’s not exactly what we need. Finally we have `eachRelatedType` which gives us some stuff but not exactly what we need. But the good news is that by combining `relationshipNames` with `relationshipsByName`, we can cobble together something. \r\n\r\n\r\nSo we’ll define some stuff on our controller. First we’ll do... define `klass` with a ‘K’ as a convenience for accessing the klass constructor. And then, we’ll go ahead and create the `namedRelationships` computed property. This will rely on the `relationshipNames` and the `relationshipsByName` properties of our static `klass`. And then in our function we’ll get the `relationshipNames`. And remember that `relationshipNames` has been split into `hasMany` and `belongsTo`, so we’ll get both of those and concatenate them together.\r\n\r\n\r\nSo what we have here is a list of the property names, and what we’re going to do with them is we're going to map over them, and then we’re going to get the `relationshipsByName` hash and grab that `relationshipName` from there. \r\n\r\n\r\nFrom there, we can loop over the `each` here, each of these `namedRelationships` that we found, and then we’ll be able to use the properties that we’re getting from the `relationshipByName`, and those are `key`, `kind`, and `type`. \r\n\r\n\r\nHere we can see this displayed on our monster, and a similar thing is displayed on the `team-membership` and the `user` model. Now that we’ve got the `relationshipTypes` displaying, let’s go ahead and try to get the actual relationships for the individual records displaying. \r\n\r\n\r\nNow don’t tell anyone that I did this, but I’m just going to copy this and put this into a new controller. Of course the model that we’re being passed is an actual model, so the `klass` will be the `constructor` rather than the thing we had before. Then we’ll loop through these relationships. \r\n\r\n\r\nBut we’re going to run into two problems. The first is that our `hasMany` and `belongsTo` relationships, we’re going to want to display those differently. And so we’ll solve that with a simple `if` statement. \r\n\r\n\r\nThe second problem is a bit trickier. To illustrate the problem, we’re going to do something naïve. We’re going to... on the model, we’ll get the `relationship.key`. And so this will... if we’re say finding a user on the team relationships, this will get us the user. And this gets us the user or the monster or whatever that property is. But it’s not very readable to our user. To fix that, we’re going to nest 'gets'. \r\n\r\n\r\nSo this is the actual model, the record that we’re getting from the relationship. And then we’ll go ahead and get the `mainAttribute`, and that’s something we just made up. So let’s go on `user`, and for them, the `mainAttribute`, it’s just going to be an `alias` to `email`. Meanwhile on our monster, the `mainAttribute` is going to be an `alias` to its `name`. And here we can see in our app it’s working beautifully.\r\n\r\n\r\nFor the `hasMany`, I’ll go ahead and paste my solution in here. So it’s a list, and this list is... you’ll recognize this from here. We’re getting the `hasMany` relationship and then we’re calling `mainAttribute` on each of those records. Team memberships are what we have many of in this application, and so we’ll give them a `mainAttribute` as well. And notice here that we’re combining the main attributes of the monster and the user, since there’s not really any distinguishing stuff about the `team-membership` itself. And we’ll look on the monster and grab one of these, and here is one of its memberships, and here is a user where we can see multiple team memberships.\r\n\r\n\r\nSo, this has been a little bit of a crazy dive where we looked really deeply at what we can do with `relationshipNames` and `relationshipsByName`. And we also looked at the `relationships` and `eachRelationship`, and saw why they wouldn’t meet our specific needs for this project. \r\n\r\n\r\nSo anyway this was really cool, and I hope you enjoyed it as much as I did. Pretty soon we’ll be editing some of this stuff, and once again of course it will be generic. Well, I haven’t actually made the code yet. I think it can happen, we’ll see. See you then.\r\n", publish_date: "2016-01-06", links: "* [link to episode 101](https://www.emberscreencasts.com/posts/101-ember-data-20-metaprogramming-with-dsmodel-attributes-property)\r\n* [link to episode 104](https://www.emberscreencasts.com/posts/104-ember-data-20-relationships)\r\n* [relationshipNames API docs](http://emberjs.com/api/data/classes/DS.Model.html#property_relationshipNames)\r\n* [relationshipsByName API docs](http://emberjs.com/api/data/classes/DS.Model.html#property_relationshipsByName)\r\n* [Github diff for displaying relationships](https://github.com/jeffreybiles/monster-demo-frontend/commit/ec0ea881cf91464cbd6a5b4f1738904b037aed28)\r\n", thumbnail_image: "Screenshot_2015-12-17_17.45.17.png", permalink: "106-ember-data-20-metaprogramming-with-relationships", free: true, difficulty: "advanced", seconds: 450, wistia_embed: "<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script><div class=\"wistia_embed wistia_async_13gmyb7tx1\" style=\"height:528px;width:800px\">&nbsp;</div>", code: "First we mash up the `relationshipNames` and `relationshipsByName` static properties on DS.Model in order to get an array usable in the template:\r\n\r\n```js\r\n  //controllers/anything/model.js\r\n  klass: Ember.computed.alias('model.modelObject.klass'),\r\n  namedRelationships: Ember.computed('klass.relationshipNames', 'klass.relationshipsByName', function(){\r\n    let relationshipNames = this.get(\"klass.relationshipNames.hasMany\").concat(this.get('klass.relationshipNames.belongsTo'));\r\n    return relationshipNames.map((relationshipName)=>{\r\n      return this.get(\"klass.relationshipsByName\").get(relationshipName)\r\n    })\r\n  })\r\n```\r\n\r\nThen we loop over that array and display the key, kind, and type:\r\n\r\n```hbs\r\n{{! templates/anything/model.hbs}}\r\n{{#each namedRelationships as |relationship|}}\r\n  <br>\r\n  {{relationship.key}}: {{relationship.kind}} {{relationship.type}}\r\n{{/each}}\r\n```\r\n\r\nWe ignore best practices and curse our descendants for seven generations by copying and pasting code into another class with only tiny edits (in the `klass` method):\r\n\r\n```js\r\n  //controllers/anything/model/record/index.js\r\n  klass: Ember.computed.alias('model.constructor'),\r\n  namedRelationships: Ember.computed('klass.relationshipNames', 'klass.relationshipsByName', function(){\r\n    let relationshipNames = this.get(\"klass.relationshipNames.hasMany\").concat(this.get('klass.relationshipNames.belongsTo'));\r\n    return relationshipNames.map((relationshipName)=>{\r\n      return this.get(\"klass.relationshipsByName\").get(relationshipName)\r\n    })\r\n  })\r\n```\r\n\r\nThen we use fancy nested `get`s to display the different types of relationships:\r\n\r\n```hbs\r\n{{! templates/anything/model/record/index.hbs }}\r\n{{#each namedRelationships as |relationship|}}\r\n  {{relationship.key}}:\r\n  {{#if (eq relationship.kind 'belongsTo')}}\r\n    {{get (get model relationship.key) 'mainAttribute'}}\r\n  {{else}}\r\n  <ul>\r\n    {{#each (get model relationship.key) as |oneOfMany|}}\r\n      <li>{{oneOfMany.mainAttribute}}</li>\r\n    {{/each}}\r\n  </ul>\r\n  {{/if}}\r\n  <br>\r\n{{/each}}\r\n```\r\n\r\nThe mainAttribute attribute is added to the various models.  This is an example from `models/monster.js`\r\n\r\n```js\r\n  mainAttribute: Ember.computed.alias('name')\r\n```\r\n\r\nThe full set of changes can be found [on github](https://github.com/jeffreybiles/monster-demo-frontend/commit/ec0ea881cf91464cbd6a5b4f1738904b037aed28).\r\n", guid: "485e51cf601c523b4aab66be5c2138a1b2507cae"},
  {title: "60 - Computed Properties: Setters", video_url: "", description: "Computed Properties can go both ways, and as of Ember 1.12 it's easier than ever.\r\n  \r\nLearn how to make -and combine- basic computed property setters.", transcript: "null", publish_date: "2015-07-29", links: "* [Best official documentation](http://emberjs.com/blog/2015/05/13/ember-1-12-released.html)\r\n* [Github diff](https://github.com/jeffreybiles/simpler-ember-sparks-website/commit/d31644e0591b7bb3816382341c435eb59983f259)", thumbnail_image: "Screenshot_2015-07-25_22.36.24.png", permalink: "60-computed-properties-setters", free: true, difficulty: "intermediate", seconds: 260, wistia_embed: "<div id=\"wistia_wz2b1en6dr\" class=\"wistia_embed\" style=\"width:800px;height:478px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"60- Computed Properties: Setters\" /><meta itemprop=\"duration\" content=\"PT4M20S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/f8c658404da3d6bcf4090b2ca4c0dcf149c10a9a.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/2ff59cbc268cdec431326a0f2e0eb2198519518e.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=720&hdUrl%5Bsize%5D=14748281&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F1810c74b4a014939528bb64cbb52c471df20ffd5.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=260.223&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Ff8c658404da3d6bcf4090b2ca4c0dcf149c10a9a.bin%3Fimage_crop_resized%3D800x450&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F2ff59cbc268cdec431326a0f2e0eb2198519518e.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-07-26T02:32:58Z\" /><object id=\"wistia_wz2b1en6dr_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:450px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=720&hdUrl%5Bsize%5D=14748281&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F1810c74b4a014939528bb64cbb52c471df20ffd5.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=260.223&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Ff8c658404da3d6bcf4090b2ca4c0dcf149c10a9a.bin%3Fimage_crop_resized%3D800x450&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F2ff59cbc268cdec431326a0f2e0eb2198519518e.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=720&hdUrl%5Bsize%5D=14748281&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F1810c74b4a014939528bb64cbb52c471df20ffd5.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=260.223&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Ff8c658404da3d6bcf4090b2ca4c0dcf149c10a9a.bin%3Fimage_crop_resized%3D800x450&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F2ff59cbc268cdec431326a0f2e0eb2198519518e.bin\" name=\"wistia_wz2b1en6dr_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">Computed Properties can go both ways, and as of Ember 1.12 it's easier than ever. Learn how to make -and combine- basic computed property setters.</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"wz2b1en6dr\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/wz2b1en6dr/metadata.js\"></script>", code: "", guid: "a64c93816b724946d2368acddaddc3707a0b347f"},
  {title: "54 - Select Boxes in Ember 2.0", video_url: "", description: "Select views are going away in Ember 2.0.\r\n \r\nIn this episode, we see several different ways of upgrading your select boxes- ember-legacy-views, a custom-built solution in vanilla Ember, and then a solution in emberx-select.", transcript: "null", publish_date: "2015-07-11", links: "* [deprecation notice](http://emberjs.com/deprecations/v1.x/#toc_ember-select)\r\n* [ember-legacy-views](https://github.com/emberjs/ember-legacy-views)\r\n* [emberx-select blockless form](https://github.com/thefrontside/emberx-select#blockless-form)\r\n* [github diff for vanilla Ember](https://github.com/jeffreybiles/simpler-ember-sparks-website/commit/5fa7100722d343dae7629de27e941e1b14282ad0)\r\n* [emberx-select](https://github.com/thefrontside/emberx-select)\r\n* [github diff for emberx-select](https://github.com/jeffreybiles/simpler-ember-sparks-website/commit/fbbddcf4453319bed47ef705dace788f66fb7df5)\r\n* [Episode 55- Awesome Select Boxes](https://www.emberscreencasts.com/posts/55-awesome-select-boxes)\r\n", thumbnail_image: "Screenshot_2015-07-05_17.17.26.png", permalink: "54-select-boxes-in-ember-20", free: true, difficulty: "intermediate", seconds: 407, wistia_embed: "<div id=\"wistia_ogq7uewc6d\" class=\"wistia_embed\" style=\"width:800px;height:528px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"54-select-boxes-in-ember-2.0\" /><meta itemprop=\"duration\" content=\"PT6M46S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/361cd2c7bc01eb42ad3fd252aeafca0366adb4da.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/f7ee0353e3e91284edec52969b78e7ad26c2f47a.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=28227009&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F593987559b4c7d0566504272bc64662535e1957b.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=406.88&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F361cd2c7bc01eb42ad3fd252aeafca0366adb4da.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Ff7ee0353e3e91284edec52969b78e7ad26c2f47a.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-07-06T06:09:17Z\" /><object id=\"wistia_ogq7uewc6d_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:500px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=28227009&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F593987559b4c7d0566504272bc64662535e1957b.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=406.88&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F361cd2c7bc01eb42ad3fd252aeafca0366adb4da.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Ff7ee0353e3e91284edec52969b78e7ad26c2f47a.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=28227009&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F593987559b4c7d0566504272bc64662535e1957b.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=406.88&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F361cd2c7bc01eb42ad3fd252aeafca0366adb4da.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Ff7ee0353e3e91284edec52969b78e7ad26c2f47a.bin\" name=\"wistia_ogq7uewc6d_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">54-select-boxes-in-ember-2.0</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"ogq7uewc6d\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/ogq7uewc6d/metadata.js\"></script>", code: "", guid: "f19c16f9200a7a1180e03ab888942d6b24aa82fe"},
  {title: "107 - Metaprogramming: Editing and Saving Generic Attributes", video_url: nil, description: "In this video we further expand our completely generic model viewer by letting the user edit and save attributes.  That means you can click on an attribute, edit it, and choose to either cancel or save your changes.  In addition, the component that we end up creating is a cool pattern that you may find useful in your apps.\r\n\r\nThe actual techniques we use to do this are, by themselves, rather simple- componentizing functionality, using get-based metaprogramming- but combining them is definitely satisfying.\r\n", transcript: "In some previous episodes, we’ve used the example of the generic model viewer in order to introduce some new properties of DS.Model. And to remind you, our generic property viewer, it can take any model, and it will show you all the properties of it as well as what those properties are for the individual models. \r\n\r\n\r\nAnd so this is really cool, but you might want to do even more. And in this episode, I’m going to show you how you can edit the attributes in this generic model viewer. So if you click on the attribute, you can change it, and you could either save it and it’ll change, or you can cancel it and it’ll go back. I’m going to show you how we did that.\r\n\r\n\r\nThe first thing we’ll do is create a component, and we’ll call that component `attribute-display`. Then when we’re displaying the models, we’ll take this and replace it with the component. In this component, we’ll just paste in what we had before, but we don’t need the break because it’s in a div. And you can see it’s looking just like it did before except now it’s in a component. And since it’s in a component, we can do lots of things with the state of the individual attribute. \r\n\r\n\r\nThe first thing we’ll change is we’ll add an `isEditing` attribute, and if `isEditing` is true, then we will display an input field, and we’ll fill this out in a minute, and if it’s false then we’ll display just the property like we did before. Of course if we check this now, it’ll look just like we did before because `isEditing` is false. \r\n\r\n\r\nSo let’s have an action that turns `isEditing` to true. So add this action of `edit`, and we’ll wrap that around what we’re showing when `isEditing` is false. And this action, `edit`, all it does is it sets `isEditing` to true. We can see this in action. We click one of these and it gives us an empty input field. \r\n\r\nNow let’s make these a little bit more interactive. We’ll start with a ‘Cancel’ button here that will turn it back into just the regular property. So if we have a `cancel` action, it’s going to do the inverse of the `edit` action, so it’s going to set `isEditing` to false. And then we’ll go ahead and just put a `button` with that action, and we’ll see that this works. This takes us back to the non-editing state. \r\n\r\n\r\nSo this is great and all that we can go back and forth, but now we want to be able to actually edit this. So we’ll do this in two steps. First by mapping the value, and it having a good placeholder, and second by adding a ‘Save’ button that saves stuff correctly.\r\n\r\n\r\nSo we’ll create a value called `newValue` that starts off as `null`, but then you can edit it within the template. So that’s going to be the value that we have on the input. However when they click this, they don’t want to just see an empty spaaaaaace because they previously had something there. So that’s what we’re going to use the `placeholder` for, and we’re going to go ahead and copy this in order to get the placeholder, and we’ll stick it in parentheses since it’s already inside a handlebars. And what this gives us is it has the previous value as a placeholder, but then you can overwrite it. \r\n\r\n\r\nNow let’s get a ‘Save’ button so we can save those changes. So we’ll put this button next to the ‘Cancel’ button, and then it’s what’s in the action that’s really interesting. First, we’ll grab the `model` and `attribute` properties from the component. And then, we’ll do something interesting. We’ll of course set something on the model, and what we’re setting we’ll get from the attribute, from the name property on the attribute. And then what we’re setting it as... well, if we have a `newValue` that we’ve set, we’ll do that. Otherwise, we’re going to use this same model of grabbing the attribute using the model and the attribute name. So this is a whole lot of metaprogramming-type stuff here, but it’s not too much different than what we’ve done before. Then we call `save` and we’ll set `isEditing` to false.\r\n\r\n\r\nWe can see this in action. We’ll go ahead and change the level from 2 to 3, and we’ll save it, and there we go. We reload the page and it’s still 3, and if we change it to 2 and hit ‘Cancel’ again, well it’s still 3 because we hit ‘Cancel’. But there is something we forgot to do. If we hit it again, it’ll say 2 right there instead of 3. So here in our `cancel`, we need to make sure to set `newValue` back to `null`. \r\n\r\n\r\nAnd with that, we’ve created a generic proper attribute editor for our generic model viewer. Of course, we’re not completely done with this. If we wanted to go further, we could edit the relationships. We could add and delete instances. But in our next episode, we’re going to go ahead and get back to doing lots of stuff about Ember data. If you really want to see more about this, go ahead and tell me in the comments and I would consider creating more. Otherwise, I will see you next week with more Ember data. \r\n", publish_date: "2016-01-08", links: "* [link to episode 101](https://www.emberscreencasts.com/posts/101-ember-data-20-metaprogramming-with-dsmodel-attributes-property)\r\n* [link to episode 106](https://www.emberscreencasts.com/posts/106-ember-data-20-metaprogramming-with-relationships)\r\n* [Github diff for editing attributes](https://github.com/jeffreybiles/monster-demo-frontend/commit/7e4e23a5ba7f773f53fe4571d75ed99ec684a502)\r\n\r\n", thumbnail_image: "Screenshot_2015-12-20_21.16.13.png", permalink: "107-metaprogramming-editing-and-saving-generic-attributes", free: false, difficulty: "intermediate", seconds: 339, wistia_embed: "<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script><div class=\"wistia_embed wistia_async_0ncamozcnw\" style=\"height:528px;width:800px\">&nbsp;</div>", code: "First, generate a component:\r\n\r\n```shell\r\nember g component attribute-display\r\n```\r\n\r\nThen loop over that component where you were previously displaying it simply:\r\n\r\n```hbs\r\n{{#each model.constructor.attributes as |attribute|}}\r\n  {{attribute-display model=model attribute=attribute}}\r\n{{/each}}\r\n```\r\n\r\nThe handlebars for the component is split into editing/not editing, and takes significant advantage of the `get` helper for metaprogramming:\r\n\r\n```hbs\r\n{{#if isEditing}}\r\n  {{attribute.name}}: {{input value=newValue placeholder=(get model attribute.name)}}\r\n  <button {{action 'save'}}>Save</button>\r\n  <button {{action 'cancel'}}>Cancel</button>\r\n{{else}}\r\n  <span {{action 'editModel'}}>\r\n    {{attribute.name}}: {{get model attribute.name}}\r\n  </span>\r\n{{/if}}\r\n```\r\n\r\nThe javascript defines some defaults then handles the actions.  The most interesting is the `save` action:\r\n\r\n```js\r\nimport Ember from 'ember';\r\n\r\nexport default Ember.Component.extend({\r\n  isEditing: false,\r\n  newValue: null,\r\n  actions: {\r\n    editModel(){\r\n      this.set('isEditing', true)\r\n    },\r\n    cancel(){\r\n      this.set('newValue', null)\r\n      this.set('isEditing', false)\r\n    },\r\n    save(){\r\n      let {model, attribute} = this;\r\n      model.set(attribute.name, this.get('newValue') || model.get(attribute.name));\r\n      model.save();\r\n      this.set('isEditing', false)\r\n    }\r\n  }\r\n})\r\n\r\n```", guid: "4c5ed96477892c088b9299247226057f7e485c7f"},
  {title: "24 (revised) - Handlebars Subexpressions", video_url: "", description: "You can put handlebars helpers inside your handlebars helpers. Handlebarception!\r\n  \r\nLearn how and when to use subexpressions, as well as how to compose them and use them to replace properties on the controller or component.shortDescription", transcript: "null", publish_date: "2015-08-03", links: "* [handlebars docs](http://handlebarsjs.com/expressions.html)\r\n* [pro episode: Advanced Handlebars](https://www.emberscreencasts.com/posts/25-advanced-handlebars-option-hashes-and-more)\r\n* [Github diff](https://github.com/jeffreybiles/bloggr-cli-client/commit/07864f3c2396c9eebe151eb369e6e905359c26dd)", thumbnail_image: "Screenshot_2015-08-02_13.18.06.png", permalink: "24-revised-handlebars-subexpressions", free: false, difficulty: "intermediate", seconds: 266, wistia_embed: "<div id=\"wistia_uj45hrh4hf\" class=\"wistia_embed\" style=\"width:800px;height:478px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"uj45hrh4hf\");\r\n</script>", code: "", guid: "141786569a1a5934b88804ed4c43901d4304b95e"},
  {title: "58 - Intro to Computed Properties", video_url: "", description: "Computed properties are a huge part of why transforming and creatively displaying data in Ember is such a joy.\r\n  \r\nIn this episode we go over the basics of how computed properties work (using the canonical use case as our example) and discuss some common pitfalls.", transcript: "null", publish_date: "2015-07-25", links: "* [Computed Properties Guide](http://guides.emberjs.com/v1.13.0/object-model/computed-properties/)\r\n* [Github diff for canonical getter example](https://github.com/jeffreybiles/simpler-ember-sparks-website/commit/92d796b1042eb45513a2c54bc6973961db08c45d)\r\n* [Github diff for using computed property used as property](https://github.com/jeffreybiles/simpler-ember-sparks-website/commit/0ee29be9878f9fff9f48f3a1fc7cf3796977cd9a)", thumbnail_image: "Screenshot_2015-07-25_13.04.35.png", permalink: "58-intro-to-computed-properties", free: true, difficulty: "basic", seconds: 335, wistia_embed: "<div id=\"wistia_sxa8ge2gwi\" class=\"wistia_embed\" style=\"width:800px;height:478px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"58- Intro to Computed Properties\" /><meta itemprop=\"duration\" content=\"PT5M35S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/1d392404145292b980608f3c2147c070c9f1818a.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/5d16dd16e8b2b66a546dc084c14cdca8f62fed84.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=720&hdUrl%5Bsize%5D=12071211&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F060783184b57c767a721f60b1ff78a519acb48db.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=335.293&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F1d392404145292b980608f3c2147c070c9f1818a.bin%3Fimage_crop_resized%3D800x450&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F5d16dd16e8b2b66a546dc084c14cdca8f62fed84.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-07-22T01:48:07Z\" /><object id=\"wistia_sxa8ge2gwi_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:450px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=720&hdUrl%5Bsize%5D=12071211&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F060783184b57c767a721f60b1ff78a519acb48db.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=335.293&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F1d392404145292b980608f3c2147c070c9f1818a.bin%3Fimage_crop_resized%3D800x450&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F5d16dd16e8b2b66a546dc084c14cdca8f62fed84.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=720&hdUrl%5Bsize%5D=12071211&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F060783184b57c767a721f60b1ff78a519acb48db.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=335.293&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F1d392404145292b980608f3c2147c070c9f1818a.bin%3Fimage_crop_resized%3D800x450&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F5d16dd16e8b2b66a546dc084c14cdca8f62fed84.bin\" name=\"wistia_sxa8ge2gwi_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">Computed properties are a huge part of why transforming and creatively displaying data in Ember is such a joy. In this episode we go over the basics of how computed properties work (using the canonical use case as our example) and discuss some common pitfalls.</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"sxa8ge2gwi\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/sxa8ge2gwi/metadata.js\"></script>", code: "", guid: "a80a54ae8025a24b7dc7399f902a8c391410b10b"},
  {title: "9: Ember.computed", video_url: "http://www.youtube.com/embed/f59zXZxiTlk", description: "UPDATE:  [New version of screencast available](https://www.emberscreencasts.com/posts/9-revised-computed-property-macros)\r\n\r\nBreak up giant functions and make your logic beautiful using Ember.computed", transcript: "If you've been doing Ember for any length of time, you've probably become very familiar with computed properties. The canonical example is combining a first name with a last name to get a full name. Any time first name or last name changes, the full name property is updated automatically. More generally, if one of the properties in the .property list changes, the entire property recalculates. This makes writing complicated logic much easier since you don't need to worry about sending and receiving events. The resulting code is also much more efficient since this is basically a form of caching. However, even with all these conveniences, it can get out of control.\r\n\t\r\nHere's an example taken from a punk rock game world in which can kicking is both a felony and a highly desirable activity for teenagers. This is ugly, hard to read and easy to screw up on editing. You might think that our comment will be helpful since it does describe fairly well what's happening in the function. But what if someone decides that you need both feet to kick the can? Now the comment in the code are saying different things. After just 1 or 2 of these, the comment will be terribly wrong and will do more harm than good. \r\n\r\nLet's see if we can make this better. Our goal is to make this code easy to understand, easy to edit and as short as possible. A good sign that we've accomplished that is if we feel that the comment isn't necessary anymore.\r\n\r\nWe'll tackle this factor in 2 steps. The first will be to break up the property into logical sub-properties. This will make it easier to read and edit, but it will still be long and not as pretty as it could be. The second will be to use Ember.computed macros to make our well-factored code shorter and more beautiful. \r\n\r\nLet’s start by extracting the userHasAFoot functionality. You'll notice that this piece of code is basically saying that the user has a foot, but you have to look closely in order to see that it says that. After first creating an alias for the user, then we use a function to encapsulate the logic. This is going to be a pattern. We're going to take a piece of logic that was hid in within a bigger function and put it into its own function, and then we use the name to describe what that logic says.\r\n\r\nHere some more functions where we did that. userCanSeeCan is making sure that the length of the cans array in the user's area is greater than zero. This is much easier to read than this, especially when it's in a larger function. We're also doing the same for the copPayingAttention whether the cop is in the user area and whether the cop is not a problem. \r\n\r\nWhen we combine all those into the original canKickCan function, you'll see that it's much easier to read, like a lot easier to read. As a matter fact, it's even easier to read than the old comment and it's actual working running code.  If you go and look up userHasAFoot, you can check to make sure that, that function actually encodes the user having a foot. It's easier to read and it's verifiable, making it way better than the vast majority of comments. \r\n\r\nThe downside is this is pretty long and the functionality that we're encoding is just really about 1/3 of the code that we've written. That's where Ember.computed comes to the rescue. It takes away all the boilerplate and just leaves our business logic.\r\n\r\nLet's go through this one by one. Ember.computed.and takes any number of arguments and then it puts a Boolean and between them. Here we're using a 3, but we could use 2, we could use 8. It just strings them together with a Boolean and. We've taken something that's 3 lines. We've boiled it down to 1 line. \r\n\r\nHere, we're using the alias computed macro. This is for when we have a property and we're just renaming it; giving an alias. \r\n\r\nHere we have Ember.computed.or, which is like ‘and’, except it uses the Boolean or instead the Boolean and.\r\n\r\nHere we have the notEmpty computed macro. This is a bit more complicated than the previous ones because here we're using it to check whether an array is empty, but it can also check to see if a string is empty or if a function is empty or if it's nil. You can give it anything and it will check to see whether it fulfills any of the empty conditions, and you don't have to know whether it's a string or an array or a function. \r\n\r\nHere we have the gt computed property. That stands for greater than. If cop.attention is greater than 5, this will return true. Ember.computed also has lt, which stands for less than; and gte, which stands for greater than or equal to; as well as lte, which stands for less than or equal to. \r\n\r\nHere, we're trying to use the equal computed property. However, if we do it like this, this is going to cause a problem because while this says equal and this is the equals, it doesn't actually work like that. How it works is it takes a variable name as the first argument. The second argument it's going to use just literally. Here, it's checking whether the state is equal to sleepy. If you set the state to sleepy, napTime returns true. If you set the state to something else, then napTime returns false. So we can’t actually use this to compute cop and user area. We're just going to have to leave that as a manual computed property.\r\n\r\nThis is the downside of having stuff that's named like this because if you have a different understanding of what equal means than the author of the library, then you can run into problems. But usually, it's a great thing. \r\n\r\nYou can even combine 2 to make up functionality that is not built directly in. Here we're taking an and, which is encapsulated in copAProblem. Then we're negating it to get a copNotAProblem. Even though we had to use 2 Ember.computeds, this is, I think, better factored than this because this ‘not’ here is easy to miss and stands as a separate logical operator than the rest of it.\r\n\r\nWe end up having a much better factored piece of code, where almost all the code here is actual logic and not boilerplate. There are no comments needed because the code is self-documenting. \r\n\r\nIn this video, we took 2 steps. First, we broke up our huge function into logical sub-properties. Then we used Ember.computed to make those sub-properties beautiful. In real life, you don't have to do it in 2 steps. You don't have to write out the function .property before turning into in Ember.computed, which can go straight to an Ember.computed.and or whatever you need to use for the occasion.\r\n\r\nIf you want to look at all the computed macros available to you in Ember, go to this URL. This is for the first of the Ember.computeds. If you scroll down, you'll get to the rest of them. If you want access to more macros, you can use the ember-cpm plug in, which are some custom-made macros built by James A. Rosen and other contributors.\r\n\r\nI hope you enjoy working with these macros. I think they'll make your code a lot more beautiful. \r\n\r\nI'll see you next week. \r\n\r\nOne more thing, this episode has been sponsored by The Frontside. We specialize in Ember.js. We also do Ruby on Rails and CSS. By the fact that I've been using the word we, you might guess: I work there as well. Show us your support and send us an email. Thank you for listening.", publish_date: "2014-05-06", links: "* [Ember.computed API](http://emberjs.com/api/#method_computed_alias)\r\n* [Extra Macros](https://github.com/jamesarosen/ember-cpm)\r\n* [The Frontside](http://frontside.io/) (Note: I no longer work there... but they're still awesome and you should hire them!)", thumbnail_image: "9-ember-dot-computed.jpg", permalink: "9-embercomputed", free: true, difficulty: "intermediate", seconds: 604, wistia_embed: "<div id=\"wistia_7usg2tdglb\" class=\"wistia_embed\" style=\"width:800px;height:500px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"Emberdotcomputed\" /><meta itemprop=\"duration\" content=\"PT10M3S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/90ab2baf864cfa5034b3f7784b7132cac5fc49ed.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/9aec4b2faba16b92754ab13993c30366345db093.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=43818210&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F409724bdc52a054a0c06baecd1dbedd5bea72e9a.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=603.599&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F90ab2baf864cfa5034b3f7784b7132cac5fc49ed.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F9aec4b2faba16b92754ab13993c30366345db093.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-07-03T04:31:39Z\" /><object id=\"wistia_7usg2tdglb_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:500px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=43818210&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F409724bdc52a054a0c06baecd1dbedd5bea72e9a.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=603.599&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F90ab2baf864cfa5034b3f7784b7132cac5fc49ed.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F9aec4b2faba16b92754ab13993c30366345db093.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=43818210&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F409724bdc52a054a0c06baecd1dbedd5bea72e9a.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=603.599&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F90ab2baf864cfa5034b3f7784b7132cac5fc49ed.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F9aec4b2faba16b92754ab13993c30366345db093.bin\" name=\"wistia_7usg2tdglb_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">Emberdotcomputed</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"7usg2tdglb\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/7usg2tdglb/metadata.js\"></script>", code: "", guid: "7184c88c6f79b1a8d09c40d12ae7e1706993f252"},
  {title: "63 - Content Security Policy", video_url: "", description: "You may be worried about hackers, but let's be real- you're probably more worried about all the errors 'Content Security Policy' puts in your console.\r\n  \r\nGet fewer errors AND be more safe by learning how to use the ember-cli-content-security-policy gem that's already included in ember-cli.", transcript: "null", publish_date: "2015-08-07", links: "* [ember-cli-content-security-policy addon](https://github.com/rwjblue/ember-cli-content-security-policy)\r\n* [content-security-policy.com](http://content-security-policy.com/)\r\n* [Introductory post on MDN](https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy)", thumbnail_image: "Screenshot_2015-08-02_13.26.51.png", permalink: "63-content-security-policy", free: false, difficulty: "intermediate", seconds: 440, wistia_embed: "<div id=\"wistia_ijcd725nrc\" class=\"wistia_embed\" style=\"width:800px;height:478px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"ijcd725nrc\");\r\n</script>", code: "", guid: "3aa91d81dfdf943d9982d242df04c15652ac7b37"},
  {title: "62 - ES2015 Modules - Import, Export", video_url: "", description: "Before modules, javascript code loading was a mess.  Now it's pretty amazing.\r\n  \r\nLearn about ES2015 modules and how they work together with ember-cli.", transcript: "null", publish_date: "2015-08-05", links: "* [Babel documentation of modules](https://babeljs.io/docs/learn-es2015/#modules)", thumbnail_image: "Screenshot_2015-08-02_13.21.17.png", permalink: "62-es2015-modules-import-export", free: true, difficulty: "basic", seconds: 273, wistia_embed: "<div id=\"wistia_cc9fge4jzg\" class=\"wistia_embed\" style=\"width:800px;height:478px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"62- ES2015 Modules, Import and Export\" /><meta itemprop=\"duration\" content=\"PT4M32S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/454d0440c078ee07bbc19357e773632821252efa.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/4db739dc7f214659b32ef6ed0abb6c7ff22ed9fa.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=720&hdUrl%5Bsize%5D=11591496&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fd50b7e297902e7c65678a03bd17625dd79d80ae3.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=272.552&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F454d0440c078ee07bbc19357e773632821252efa.bin%3Fimage_crop_resized%3D800x450&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F4db739dc7f214659b32ef6ed0abb6c7ff22ed9fa.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-07-30T19:10:20Z\" /><object id=\"wistia_cc9fge4jzg_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:450px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=720&hdUrl%5Bsize%5D=11591496&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fd50b7e297902e7c65678a03bd17625dd79d80ae3.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=272.552&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F454d0440c078ee07bbc19357e773632821252efa.bin%3Fimage_crop_resized%3D800x450&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F4db739dc7f214659b32ef6ed0abb6c7ff22ed9fa.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=720&hdUrl%5Bsize%5D=11591496&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fd50b7e297902e7c65678a03bd17625dd79d80ae3.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=272.552&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F454d0440c078ee07bbc19357e773632821252efa.bin%3Fimage_crop_resized%3D800x450&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F4db739dc7f214659b32ef6ed0abb6c7ff22ed9fa.bin\" name=\"wistia_cc9fge4jzg_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">Before modules, javascript code loading was a mess. Now it's pretty amazing. Learn about ES2015 modules and how they work together with ember-cli.</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"cc9fge4jzg\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/cc9fge4jzg/metadata.js\"></script>", code: "", guid: "adac2690a84ebbe6e507107a4778c3033c90a48c"},
  {title: "109 - Ember Data 2.0: Overview of Customizing Adapters and Serializers", video_url: nil, description: "The default Adapters and Serializers are great, but you aren’t stuck with them.  There are two ways of customizing Adapters and Serializers.\r\n\r\nThe first way is extending the abstract base class (DS.Adapter or DS.Serializer), making sure to write the minimum set of methods.\r\n\r\nThe second way is extending a fully-functional Adapter or Serializer.  The ones built into Ember Data have a rich set of methods that you can overwrite in order to tweak functionality.", transcript: "In the first part of our adapters and serializers series, we looked at how to use adapters and serializers, the basics of that. In this episode, we’re going to look at the basics of how to customize them for your specific use. \r\n\r\n\r\nSo one way we can do that is to start from scratch, and not really from scratch. We’re starting from the DS.Serializer and DS.Adapter abstract base class. So to extend those, there are certain minimum level that we need to define for the serializer, the serializer method, and the `normalizeResponse` method. And we can also do the `normalize` method, but that’s optional. \r\n\r\n\r\nFor the adapter, there are a few more that we need to do, `findRecord`, `createRecord`, `updateRecord`, `deleteRecord`, `findAll`, and `query`, and we can do `findMany` to increase the speed. And remember as we said from last time, these are not the `findRecord` and `createRecord` and so on that you find on the store. These are instead finding the URL that we’ll use to contact the server when we’re doing certain actions. \r\n\r\n\r\nSo doing these from scratch, from the abstract base class, is good if you have a really unusual API. But for most of the time, we want to start with something a little bit more familiar, and so we can use the `RESTAdapter` or the `JSONAPIAdapter`, and then either the `JSONSerializer`, the `RESTSerializer`, or the `JSONAPISerializer`. And those are fairly complicated in their internal workings but they provide a good hierarchy of things to change. \r\n\r\n\r\nSo we’ll take the `JSONSerializer`. Here are all the methods that you can change, and for each of these you’re changing a small aspect of how it changes the data. Here are the different categories of methods. So here I’ve narrowed it down, so for example `serializeX` stands for `serialize`, `serializeAttribute`, `serializeBelongsTo`. So each of these determines how a certain type of thing is serialized. So `serializeBelongsTo` shows us how to serialize a `belongsTo`. And I’ll go into more details about a lot of these when we’re going over the serializer specifically.\r\n\r\n \r\nSo the takeaway from this slide is that each method is a leverage point that strategically interacts with other methods, and they’ve smartly divided it up so it’s easy to tell where to put what. \r\n\r\n\r\nOf course the other ones aren’t exactly like the `JSONSerializer`. They’re mostly the same but the API is changed a little bit. So here are the methods that have been added in the `REST` and `JSONAPI` serializer.\r\n\r\n\r\nSo let’s look at the `RESTAdapter` as well. It has a few more categories, but the basic idea is the same. They interact and they’re divided up so that you can tell what each one is doing and you know which one to replace if you have something to change. If you have a different URL for getting the `hasMany`, then you’ll overwrite `findHasMany`. And you can leave everything else the same and it’ll work just like you expect it to. \r\n\r\n\r\nWhat are the differences between the `RESTAdapter` and the `JSONAPIAdapter`? They are exactly the same in terms of their API, in terms of the things that you can overwrite. Of course the URL they’re spitting out looks quite a bit different.\r\n\r\n\r\nSo let’s go over quickly what we learned today. We learned that to create a serializer from scratch, you had to create the `serialize` and `normalizeResponse` methods on it, and extend from DS.Serializer. To start an adapter from scratch, you had to do these six methods, but you can also extend from several other types of adapters and serializers, and this is recommended for all but the weirdest adapters and serializers. \r\n\r\n\r\nSo `JSONSerializer`, these are the methods that you can change, and they’re a little bit different in the `REST` and `JSONAPI` serializers. And for the `RESTAdapter`, these are the methods that you can change, that you can overwrite. And the `RESTAdapter` and `JSONAPIAdapter` have the exact same methods that you can change. \r\n\r\n\r\nIn our next episode, we’re going to be digging deeper into adapters. I hope to see you then. \r\n", publish_date: "2016-01-15", links: "* [Slides](http://slides.com/jeffreybiles/deck-21/#/3 )\r\n* [DS.Serializer base class](http://emberjs.com/api/data/classes/DS.Serializer.html )\r\n* [DS.Adapter base class](http://emberjs.com/api/data/classes/DS.Adapter.html#method_createRecord )\r\n* [DS.JSONSerializer](http://emberjs.com/api/data/classes/DS.JSONSerializer.html )\r\n* [DS.RESTAdapter](http://emberjs.com/api/data/classes/DS.RESTAdapter.html )\r\n", thumbnail_image: "Screenshot_2016-01-01_13.30.01.png", permalink: "109-ember-data-20-overview-of-customizing-adapters-and-serializers", free: false, difficulty: "intermediate", seconds: 295, wistia_embed: "<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script><div class=\"wistia_embed wistia_async_2hqvexlr9t\" style=\"height:528px;width:800px\">&nbsp;</div>", code: "You can extend `DS.Serializer` to build one from 'scratch'.  Make sure to define the minimum set of 3 methods.\r\n\r\n```js\r\nimport DS from 'ember-data';\r\n\r\nexport default DS.Serializer.extend({\r\n    serialize(snapshot, options){\r\n        // code here\r\n    },\r\n\r\n    normalizeResponse(store, primaryModelClass, payload, id, requestType){\r\n        // code here\r\n    },\r\n\r\n    normalize(modelClass, resourceHash){\r\n        // optional\r\n        // code here\r\n    }\r\n})\r\n```\r\n\r\nYou can do the same for `DS.Adapter`:\r\n\r\n```js\r\nimport DS from 'ember-data';\r\n\r\nexport default DS.Adapter.extend({\r\n    findRecord(store, type, id, snapshot){},\r\n    createRecord(store, type, snapshot){},\r\n    updateRecord(store, type, snapshot){},\r\n    deleteRecord(store, type, snapshot){},\r\n    findAll(store, type, sinceToken){},\r\n    query(store, type, query){},\r\n\r\n    //optional, to increase speed\r\n    findMany(store, type, ids, snapshots){}\r\n})\r\n```\r\n\r\nThese are the categories of methods you can overwrite on the `JSONSerializer`:\r\n\r\n\r\n* attrs\r\n* primaryKey \r\n* normalizeX\r\n* serializeX \r\n* keyForX\r\n* extractX\r\n* modelNameFromPayloadKey\r\n\r\nThere are a few additions on both `JSONAPISerializer` and `RESTSerializer`:\r\n\r\n* pushPayload\r\n* payloadKeyFromModelName\r\n\r\nIn addition, `keyForPolymorphicType` can be found on `RESTSerializer`.\r\n\r\nThese are the categories of methods you can overwrite on the `RESTAdapter`:\r\n\r\n* namespace\r\n* host \r\n* headers\r\n* buildUrl \r\n* urlForX\r\n* findX\r\n* (create/delete/update)Record\r\n* generateIdForRecord\r\n* groupRecordsForFindMany\r\n* handleResponse\r\n* is(Invalid/Success)\r\n* pathForType\r\n* query(X)\r\n* serialize\r\n* shouldReloadX\r\n* sortQueryParams", guid: "4d0cd8281d002043cf4baca29272961c8d0d5cbc"},
  {title: "84 - Remember your Session with Cookies", video_url: nil, description: "When a user logs in, they usually want to stay logged in.  Cookies can help you preserve your session.\r\n\r\nIn this video we use the js-cookie library to hold on to the user’s id and recreated their session.\r\n", transcript: "In our last episode, we introduced the session service which allows us to login, and then from the login we’re able to get the current user from that session. \r\n\r\n\r\n![1 Logging in showing current user from the session](/content/images/2015/10/1-6.jpg)\r\n\r\n\r\nHowever, that session is not persisted, so when you reload, you’re no longer logged in. \r\n\r\n\r\n![2 Not being logged in after reloading](/content/images/2015/10/2-5.jpg)\r\n\r\n\r\nWe need a way for the browser to keep track of which session we’re in, and we’re going to do that through cookies. \r\n\r\n\r\nSo in a previous project, I’ve used jquery-cookie.\r\n\r\n\r\n![3 github for jquery-cookie](/content/images/2015/10/3-6.jpg)\r\n\r\n\r\nHowever, that’s no longer maintained and has been superseded by js-cookie. So we’ll use that.\r\n\r\n\r\n![4 the github js-cookie](/content/images/2015/10/4-5.jpg)\r\n\r\n\r\nFirst, we’ll install a `js-cookie` plug-in via `bower`.\r\n\r\n\r\n![5 install a js-cookie plug-in via bower](/content/images/2015/10/5-5.jpg)\r\n\r\n\r\nThen in our `ember-cli-build` file, or if you’re using an older version of `ember-cli`, grok file, we’ll import the `js-cookie` library.\r\n\r\n\r\n![6 importing the js-cookie library](/content/images/2015/10/6-5.jpg)\r\n\r\n\r\nThen, we’ll have to make sure to restart our server.\r\n\r\n\r\n![7 restarting the server](/content/images/2015/10/7-5.jpg)\r\n\r\n\r\nNow in our `session` service, we can start using cookies. So we’ll start by in the `login` doing `Cookies.set`, and we’ll set the `userId` cookie to the ID of the user. Then in the `logout`, we’ll do `Cookies.remove`, which will as you guess remove the cookie. So when we login it will set the cookie, when we logout it will remove the cookie. \r\n\r\n\r\n![8 Code allowing one to login to set the cookie, and logout to remove the cookie](/content/images/2015/10/8-4.jpg)\r\n\r\n\r\nHowever, having to do cookies doesn’t by itself solve our problem. We’ll also need to use those cookies whenever we’re reloading the page. So that’s why we’ll use the `initializeFromCookie` method, and we’ll have that method run whenever the `session` service is initialized. And it’ll be initialized the first time you call current user. \r\n\r\n\r\nSo within this method, we’ll first grab the `userId` cookie. If that cookie exists, then we’ll find the user from that ID, and we’ll do that with the `store`. Remember the `store` we can inject it as a service. \r\n\r\n\r\nAnd then finally we’ll set the `currentUser` to the user that we got from the `store`.\r\n\r\n\r\n![9 Setting the current user to the user from 'store' in the session.js code](/content/images/2015/10/9-4.jpg)\r\n\r\n\r\nSo let’s try this out. First, we’ll login, then we’ll reload the page, and we’re still logged in. And logging out works and we’re still logged out.\r\n\r\n\r\nSo that’s how we use cookies to persist the session and make it a lot easier for our user. \r\n\r\n\r\nOf course there’s one big caveat to what we’ve been doing so far, and that that it’s completely insecure. But we’ll be talking about that next week on ways to secure this down. \r\n\r\n\r\nIn the meantime, in the pro-episode we’re going to be talking about how to have pages that only show up to authenticated users. So if you’re not authenticated, it’ll push you to a certain screen, and then pull you back to the screen you were at once you login. I’ll see you then.  \r\n", publish_date: "2015-10-21", links: "* [Episode introducing the Session Service](https://www.emberscreencasts.com/posts/83-session-service)\r\n* [js-cookie library](https://github.com/js-cookie/js-cookie)\r\n", thumbnail_image: "Screenshot_2015-10-07_07.24.26.png", permalink: "84-remember-your-session-with-cookies", free: true, difficulty: "intermediate", seconds: 172, wistia_embed: "<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script>\r\n<div class=\"wistia_embed wistia_async_6g34mrvt0j\" style=\"height:528px;width:800px\">&nbsp;</div>", code: "In bower.json:\r\n\r\n```js\r\n\"dependencies\": {\r\n  //...\r\n  \"js-cookie\": \"~2.0.3\"\r\n}\r\n```\r\n\r\nIn ember-cli-build.js\r\n\r\n```js\r\napp.import('bower_components/js-cookie/src/js.cookie.js');\r\n``` \r\n\r\nservices/session.js\r\n\r\n```js\r\nimport Ember from 'ember';\r\n\r\nexport default Ember.Service.extend({\r\n  currentUser: null,\r\n  store: Ember.inject.service(),\r\n  login(user){\r\n    this.set(\"currentUser\", user)\r\n    Cookies.set('userId', user.id)\r\n  },\r\n  logout(){\r\n    this.set(\"currentUser\", null)\r\n    Cookies.remove('userId')\r\n  },\r\n  initializeFromCookie: function(){\r\n    var userId = Cookies.get('userId');\r\n    if(!!userId){\r\n      var user = this.get('store').find('user', userId)\r\n      this.set('currentUser', user)\r\n    }\r\n  }.on('init')\r\n});\r\n```", guid: "4c963b386481a4187fb5b52e9da93eaef8b5e86d"},
  {title: "80- Inject Code with Application Initializers", video_url: "", description: "Initializers are useful when you need code to run before starting up the rest of your app.\r\n\r\nIn today’s video we introduce initializers, and use an Application Initializer to inject code into a component.", transcript: "Today we’re going to talk about initializers, specifically how to use application initializers to inject code into your application.\r\n \r\nSo initializers run before the rest of the application boots up, and there are two types of initializers. There are application initializers and instance initializers. Application initializers are what you’re used to, because they were introduced early in the 1.x series. Instance initializers were introduced in 1.12. And application initializers are more flexible, but instance initializers can save you a lot of time if you’re using testing or fastboot. We’ll go over more of the differences in this week’s pro-episode.\r\n \r\nSo the initializer has several properties, which we’ll be seeing in our example today. So it has the ‘initialize’ method, which is the only required one, and this method is the one that runs when the app is booting up. It has the ‘name’ which is useful for when you’re using the ‘before’ and ‘after’ methods. The ‘before’ and ‘after’ methods basically help you order how the initializers are run. \r\n\r\nSo this is our example initializer. Notice that the file’s in the `initializers` folder.\r\n![pictures of files in initializers folder](/content/images/2015/10/1-2.jpg)\r\nand that you just `export default` the hash, and that hash comes with three of the four arguments that we said, including the one that’s required.\r\n![export default the hash](/content/images/2015/10/2-1.jpg)\r\nSo the `name` we’re giving it is `preloader`, and then we’re doing it after `simple-auth`. So `simple-auth` is another initializer that I have in this project. And so what we’re doing in the `initialize` function so it takes two arguments, `initialize` always gives you two arguments, `container` and `app`, and `container` is good if you want to do something like looking up the store. So you could do `container.lookup(‘store:main’)`. So that would give you the `store`. \r\n![illustration of container.lookup('store:main') code](/content/images/2015/10/3-1.jpg)\r\nBut we don’t need the `store` in this particular example.\r\n \r\nSo first we’re registering something onto the `container`, and we’re using `app` since that’s how we do it now. It used to be `container` that did that. And we’re putting in the `preloader` file. So the `preloader` class is coming from the `controllers`. It’s what used to be a service object. And then we’re injecting that into every `controller` and every `component`. And how we end up using that is, this is a component, \r\n![picture of component](/content/images/2015/10/4-1.jpg)\r\nit’s being injected into a `component`, and then we can just get it because it’s a property on that component since it’s been injected in. \r\n\r\nSo to go back over that again, we’re registering the `preloader` class as `preloader:main`, and then we’re injecting it into the `controller` and the `component`. And we’re injecting `preloader:main`  what got registered here, and then we’re injecting it as `preloader`. That’s what the second argument is. \r\n\r\nAnd then later on in a `component` or a `controller`, we can just do `this.get(‘preloader’)`,\r\n![this.get('preloader') in a component or controller](/content/images/2015/10/5-1.jpg)\r\nand it’ll all access the same instance of `preloader`.\r\n\r\nYou can also specify where you want it put. So right now it’s putting on all components, but you could put it like this and it would put it on only the `minigame-wrapper` component.\r\n![minigame-wrapper component file](/content/images/2015/10/6-1.jpg)\r\nNow this used to be a perfect use-case for initializers. But this exact use-case for loading something that you can access as a service, it has been overtaken by services which were released in ember-1.10. \r\n![webpage covering injected properties in ember 1.10](/content/images/2015/10/7-1.jpg)\r\nSo I’ll be covering those in an episode soon. But first in this week’s pro-episode, I’ll be covering instance initializers, how they differ from application initializers and how you can use them to load data. \r\n\r\nI’ll see you then.\r\n", publish_date: "2015-10-07", links: "* [Ember Guide for initializers](http://guides.emberjs.com/v2.0.0/applications/initializers/)\r\n* [API docs for initializers](http://emberjs.com/api/classes/Ember.Application.html#method_initializer )\r\n", thumbnail_image: "Screenshot_2015-09-26_19.52.45.png", permalink: "80-inject-code-with-application-initializers", free: true, difficulty: "intermediate", seconds: 236, wistia_embed: "<div id=\"wistia_yzuihdh43j\" class=\"wistia_embed\" style=\"width:800px;height:528px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"80-inject-code-with-application-initializers\" /><meta itemprop=\"duration\" content=\"PT3M54S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/1cbc64e919fbef7ccf54a3a5fbefbdf9f3149738.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/6ce5ea3bd3537cedfd515ccbbea1b3b7cec32d61.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=18019195&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F172a231dbbf8c832a6bee01f1e89bf872217c04f.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=234.286&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F1cbc64e919fbef7ccf54a3a5fbefbdf9f3149738.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F6ce5ea3bd3537cedfd515ccbbea1b3b7cec32d61.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-09-30T18:00:16Z\" /><object id=\"wistia_yzuihdh43j_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:500px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=18019195&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F172a231dbbf8c832a6bee01f1e89bf872217c04f.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=234.286&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F1cbc64e919fbef7ccf54a3a5fbefbdf9f3149738.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F6ce5ea3bd3537cedfd515ccbbea1b3b7cec32d61.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=18019195&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F172a231dbbf8c832a6bee01f1e89bf872217c04f.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=234.286&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F1cbc64e919fbef7ccf54a3a5fbefbdf9f3149738.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F6ce5ea3bd3537cedfd515ccbbea1b3b7cec32d61.bin\" name=\"wistia_yzuihdh43j_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">80-inject-code-with-application-initializers</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"yzuihdh43j\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/yzuihdh43j/metadata.js\"></script>", code: "```js\r\n//initializers/sound-player.js\r\n\r\nimport Ember from 'ember';\r\nimport Preloader from '../controllers/preloader';\r\n\r\nexport default {\r\n  name: 'preloader',\r\n  after: 'simple-auth',\r\n  initialize(container, app){\r\n    app.register('preloader:main', Preloader)\r\n    app.inject('controller', 'preloader', 'preloader:main')\r\n    app.inject('component', 'preloader', 'preloader:main')\r\n  }\r\n}\r\n```\r\n\r\n```js\r\n//using the preloader in a component\r\n\r\nthis.get('preloader').play(`instructions/${minigameName}-minigame`)\r\n```", guid: "b0fe24d4e824f4494d593224b2edb10835ee9b88"},
  {title: "76 - Closure Actions in Ember 2.0 Components- Passing Functions", video_url: "", description: "Closure actions, introduced in Ember 1.13 and gaining prominence in Ember 2.0, are an exciting improvement over the old way of doing actions. Instead of sending up an action call through the component chain, we pass down a function.\r\n  \r\nIn this video we see how closure actions save you lots of code, especially in deeply nested components.", transcript: "null", publish_date: "2015-09-23", links: "* [Closure Actions introductory blog post](http://emberjs.com/blog/2015/06/12/ember-1-13-0-released.html#toc_closure-actions)\r\n* [Closure Actions RFC](https://github.com/emberjs/rfcs/pull/50/files)\r\n* [Another blog post](http://alexdiliberto.com/posts/ember-closure-actions/)\r\n* [Screencast on Ember 1.x Actions](https://www.emberscreencasts.com/posts/75-actions-and-components-in-ember-1x)\r\n* [Screencast on Handlebars Subexpresions](https://www.emberscreencasts.com/posts/24-revised-handlebars-subexpressions)\r\n", thumbnail_image: "Screenshot_2015-09-15_23.24.06.png", permalink: "76-closure-actions-in-ember-20-components-passing-functions", free: true, difficulty: "intermediate", seconds: 300, wistia_embed: "<div id=\"wistia_ms4ww0x25z\" class=\"wistia_embed\" style=\"width:800px;height:528px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"76-closure-actions-in-ember-2-0-components-passing-functions-with-attrs\" /><meta itemprop=\"duration\" content=\"PT5M\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/89cae774d86fa5e0a21e631062f5029aed8777de.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/a1c2439be73e70a03f9aa6b5b2dae9320f89da7f.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=12040439&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fd643b9a17bac67736fdd84ae4e36236862c00aba.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=300.463&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F89cae774d86fa5e0a21e631062f5029aed8777de.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fa1c2439be73e70a03f9aa6b5b2dae9320f89da7f.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-09-18T23:24:05Z\" /><object id=\"wistia_ms4ww0x25z_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:500px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=12040439&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fd643b9a17bac67736fdd84ae4e36236862c00aba.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=300.463&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F89cae774d86fa5e0a21e631062f5029aed8777de.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fa1c2439be73e70a03f9aa6b5b2dae9320f89da7f.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=12040439&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fd643b9a17bac67736fdd84ae4e36236862c00aba.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=300.463&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F89cae774d86fa5e0a21e631062f5029aed8777de.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fa1c2439be73e70a03f9aa6b5b2dae9320f89da7f.bin\" name=\"wistia_ms4ww0x25z_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\"><p>Closure actions, introduced in Ember 1.13 and gaining prominence in Ember 2.0, are an exciting improvement over the old way of doing actions. Instead of sending up an action call through the component chain, we pass down a function.</p><p>In this video we see how closure actions save you lots of code, especially in deeply nested components.</p></noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"ms4ww0x25z\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/ms4ww0x25z/metadata.js\"></script>", code: "Pass down a function (an action) with the `(action ...)` subexpression.\r\n\r\n```html\r\n{{control-accessory changeItem=(action \"changeShoe\") itemName=\"shoe\" itemColor=shoeColor}}\r\n```\r\n\r\nIn `components/control-accessory/template.hbs` we continue passing down the function through nested components.  Notice we don't need an action in the javascript component file.\r\n\r\n```html\r\n{{color-selector itemName=itemName itemColor=itemColor changeItem=attrs.changeItem}}\r\n```\r\n\r\nIn the component, call the function like a regular function.\r\n\r\n```js\r\nactions: {\r\n  changeItem(color){\r\n    this.attrs.changeItem(color)\r\n  }\r\n}\r\n```", guid: "0d068c92ef54c5f1766acfc135d9fac435f09c51"},
  {title: "108 - Ember Data 2.0: Overview of using Adapters and Serializers", video_url: nil, description: "Adapters and Serializers are how data is communicated between your server and your Ember app.  Adapters tell us which URL to use, and Serializers make sure the data is in the right format.\r\n\r\nThis episode gives an overview of Adapters and Serializers, showing what they do, how to set them up, the different types that you can use, and how to make sense of their public API.\r\n", transcript: "Hey and welcome to our series on how to use adapters and serializers within Ember data. The rough plan is it for it to be about 10 parts, and today we’re going to be starting with an overview of how to use adapters and serializers within your app. \r\n\r\n\r\nSo the basic distinction is that adapters, they determine the URL. So that’s the place that you’re going to be sending this request. And then the serializers, they determine both the data you send and the data you get back. So it takes what’s in your Ember Data model and it turns it, it serializes it into something that you can send to the server, and then it normalizes the data that you get back from the server.\r\n\r\n\r\nI’m going to show you how to get started quickly with both adapters and serializers. So for adapters, you go to the `adapters` folder then `application.js`. And then you get your chosen adapter and you extend it. And for serializers it’s very similar, `serializers` folder, `application.js`, and then you get your favorite serializer and you extend it. And by saying that you can choose which adapter or serializer you use, well, that implies there are choices, and there are.\r\n\r\n\r\nSo these are the ones that come bundled with Ember Data 2.0. And so the `Adapter`, we have the `RESTAdapter` and the `JSONAPIAdapter`. And for the serializers, we have first the `JSONSerializer` which I don’t think is in heavy direct use, but it’s a parent to both the `RESTSerializer` and the `JSONAPISerializer`. And because I use Rails, I like to add these to this graph. And of course, it’s not just Active Model Adapter and Serializer that you can add. There are also other ones on Ember Observer that you can add. \r\n\r\n\r\nHere’s a useful listing of 30 add-ons that change your adapter. `active-model-adapter` is probably the most popular, but there are plenty for whatever you need. And of course if you have a use case that isn’t covered by one of these thirty, we’re going to tell you enough in this series that you can get started on building your own. \r\n\r\n\r\nSo the reason we have different adapters and serializers is because different servers require different endpoints and they require the data to be massaged in different ways. And of course you can have these differences between apps, but you can also have differences between endpoints in the same app. \r\n\r\n\r\nSo let’s say we had a model called \"repositories\", and we wanted to change the adapter for this model because this model is actually stored on GitHub. So what we would do is we would make a new file in the `adapters` folder and we would call that file `repository.js`. And then we could extend the application adapter or we could put in a `RESTAdapter` or a completely different type of adapter. And then once we’re there, we can make changes to the configuration. Here we’re going to be changing the host so that it’s going to GitHub instead of our server. \r\n\r\n\r\nSo in this application, almost everything is going to our Rails server through the `ActiveModelAdapter` which we’ve pulled in through an add-on. But the `repository` is using the built-in `RESTAdapter` and going to the host `github.com`. This is a very simple and easy example of some of the vast diversity that Ember Data can give you in endpoints while still giving you same defaults, because for all our other models, we don’t have to define anything else. It’s just going to use the `ActiveModelAdapter` because it’s inherited from `application.js`.\r\n\r\n\r\nSo far, we’ve expended quite a bit of energy on how to have different adapters in your app, as well as seeing what different types of adapters there are. But how do we actually use these adapters? How do they get used? \r\n\r\n\r\nWell, we can find the public API of the adapters and the serializers in the base class, DS.Serializer and DS.Adapter. These are abstract base classes not meant to be used directly. They are to be overridden, and as we see they’re overridden in several different ways as well as ways you can customize, but they include the public API which for the serializer is pretty easy. It has `serialize` which takes the data that you currently have in your store and it serializes it into the type that your server wants. And `normalize` does the opposite. It takes the data that’s sent to you by the server and then it puts it into the form that Ember data wants for `store.push`. \r\n\r\n\r\nNow what’s interesting to note is that these methods, although there are public API to the serializer, are usually not called directly by your app code. It’s called by... I’m not exactly sure on this, but I believe it’s called by the store. But anyways, it’s called by something else in Ember Data, but we can define these to make the behavior different. That’s important to note when we go into the adapter base class, because we’re going to see some stuff that looks really familiar, like `createRecord`, `deleteRecord`, `findAll`, `findMany`, `updateRecord`. We’ve seen these before, but they’re slightly different than how they are in the store. \r\n\r\n\r\nIn the store, we’ll look at `createRecord`, and we’re not going to go over this a whole lot but notice the shape of it, and then in the `RESTAdapter`, `createRecord` is very different. That’s because they’re doing different things. In the adapter, `createRecord` is saying what URL do we need to send this to, and in the store, it’s actually creating it in the Ember Data store. \r\n\r\n\r\nAnd so when you see these methods, note that they’re different than the methods that we’ve seen before that are called by the same name. Although if you call `createRecord` on the store, it usually ends up eventually calling `createRecord` on the adapter. \r\n\r\n\r\nSo this has been the first part in this series showing how to use adapters and serializers. We’ll get into a lot more detail on this later.\r\n\r\n\r\nIn the next episode, we’re going to be showing how to customize these, the basics of what we can change and how that works. I’ll see you then.\r\n", publish_date: "2016-01-13", links: "* [Slides](http://slides.com/jeffreybiles/deck-21/#/ )\r\n* [Introductory article on EmberIgniter](http://emberigniter.com/fit-any-backend-into-ember-custom-adapters-serializers/ )\r\n* [Ember Observer: Adapter Addons](http://emberobserver.com/categories/ember-data-adapters )\r\n* [DS.Serializer base class](http://emberjs.com/api/data/classes/DS.Serializer.html )\r\n* [DS.Adapter base class](http://emberjs.com/api/data/classes/DS.Adapter.html#method_createRecord )\r\n", thumbnail_image: "Screenshot_2016-01-01_07.04.23.png", permalink: "108-ember-data-20-overview-of-using-adapters-and-serializers", free: true, difficulty: "intermediate", seconds: 423, wistia_embed: "<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script><div class=\"wistia_embed wistia_async_tvjymwhpcu\" style=\"height:528px;width:800px\">&nbsp;</div>", code: "You set your adapter by going to `adapters/application.js` and extending the adapter of your choice:\r\n\r\n```js\r\nimport DS from 'ember-data';\r\n\r\nexport default DS.RESTAdapter.extend({});\r\n```\r\n\r\nYou do something similar with serializers in `serializers/application.js`:\r\n\r\n```js\r\nimport DS from 'ember-data';\r\n\r\nexport default DS.RESTSerializer.extend({});\r\n```\r\n\r\nIf you have a model that goes to a different host or uses a different URL schema, you can define a completely separate Adapter at `adapters/${modelName}.js` by extending the Adapter of your choice.\r\n\r\nThe base classes `DS.Adapter` and `DS.Serializer` are abstract base classes and are not intended to be used directly.  You can use the core variants (REST and JSONAPI), get one from an addon (like ActiveModel), or create one from scratch.\r\n\r\nYou can also customize the existing ones, which is the subject of the next screencast.\r\n\r\n\r\n> Written with [StackEdit](https://stackedit.io/).", guid: "2b6c1130a83e89e2a4698c55409aee99f26b613a"},
  {title: "96 - Ember Data 2.0: Getting Started, and Basics of DS.Model", video_url: nil, description: "Ember Data is now stable, so we’re starting a big series on how to use it.\r\n\t\r\nThis first installment shows us how to get set up and how to create our first models.\r\n", transcript: "So a couple of months ago, Ember data became stable, and that is awesome. Not only did it become stable, it jumped pretty much straight to 1.13 and then 2.0. So we’re going to go ahead now that it’s stable to dig really deep into it in a multi-part series, in order to first get you going with Ember data, get the basics, and then dig into the deeper parts of it like making your own adapters or doing complicated relationships. \r\n\r\n\r\nSo, why Ember data? First, let’s get out of the way, you can use Ember without Ember data. You can do it in even large applications such as Discourse, and for certain cases that may be the better choice, but Ember data has gotten a lot better recently since this article was written, and so we’ll go with that.\r\n\r\n\r\nSo this introduction to Ember models, it gives a good overview of why you would want to use Ember data, but the basics are it helps manage your complexity and it gives you a consistent interface with a single source of truth, which allows you to get caching easily without you having to think about it. \r\n\r\n\r\nSo if you’ve been doing JavaScript a while, then basically think of no more Ajax calls. You’ll never have to do $.Ajax again. It also gets you access to the data tab on the Ember inspector. There you can look at all the data that your app has loaded, and this is much easier than trying to find it in the console.\r\n\r\n\r\nSo let’s get started. First we’ll define our adapter. Our choice will be the `ActiveModelAdapter`. That works really well with the Rails backend, which I have. You can also do a JSON API adapter, a REST adapter, or you can use any of the 29 data adapters that are available, for such as django, localstorage, emberfire, lots and lots of stuff that I haven’t heard of, but it may be useful to you. \r\n\r\n\r\nSo whichever one you choose, unless it’s the built-in REST adapter or JSON API adapter, you go ahead and make sure it’s installed through NPM, and then you import it and use it.\r\n\r\n\r\nNext you need to set up models for any type of data you’re pulling in. So here we have our monsters, our users, and our team memberships. So we start by importing `DS` from `ember-data`, and then we extend `DS.Model`. And so these models, they’re Ember objects, just like normal, except they can have `DS` attributes. \r\n\r\nSo the most basic attribute is just calling a `DS.attr`, and then no arguments, and what that says, it’ll say okay, when you receive something from the server, expect something called `name`, and this attribute just take it as it is. \r\n\r\n\r\nIf you put in `string`, then we’re telling Ember data to coerce it to the string type. So let’s say their name is 1, 2, 3. Then it would make sure that it was a string. We can also coerce it to a number type, and there are a `boolean` type, a `date` type, and you can also create your own types if you want. In general, it’s best to coerce it to a certain type, but if you’re not sure, let’s say you’re passing in an array of things, then you can just go ahead and not give that argument. \r\n\r\n\r\nAlright, so there’s also relationships, and you can call `DS.hasMany`, so a Monster will have multiple team memberships. If you’ve done any Rails, this will look really familiar. And there’s also a `belongsTo`. So the Monster has many team memberships and a team membership belongs to a Monster. So what a `hasMany` looks like is it can be passed in an array of IDs, and a `belongsTo` is just one ID. \r\n\r\nAnd so that’s how you can set up relationships. We’ll be going over those more later. And of course because `DS.Model` is an Ember object, you can do things like inject and define computed properties. \r\n\r\n\r\nOne thing to note is that if you have something coming in from the API but you don’t give it a `DS.attr`, then it just won’t show up. It won’t air but also just won’t be there. So we’ll take away price, and then when this reloads, we’ll see that there’s no longer price in this data, and anything that relies on the price is now not working. \r\n\r\n\r\nOn the other hand if you still have the price but you just remove the `number` coercion, then the price gets passed directly in, and it can still be used in these calculations but it’s not being rounded to an integer. It still has the decimal. In this particular case that’s not a big deal, but it helps to have things as the correct type. \r\n\r\n\r\nSo these are the basics of how you get started in Ember data and define your models. Of course there’s plenty more to know about Ember data, and we’ll be covering a lot of it, starting with this week’s pro-episode where we go over the most common way to pull data from the server with Ember data. I’ll see you then.\r\n", publish_date: "2015-12-02", links: "* [Ember Data 2.0 Release announcement](http://emberjs.com/blog/2015/09/02/ember-data-2-0-released.html)\r\n* [List of adapter addons](http://emberobserver.com/categories/ember-data-adapters )\r\n* [DS.attr documentation](http://emberjs.com/api/data/#method_attr)\r\n* [DS.Model documentation](http://emberjs.com/api/data/classes/DS.Model.html)\r\n* [Models guides](http://guides.emberjs.com/v2.2.0/models/)\r\n* [Blog post: Ember Without Ember Data](http://eviltrout.com/2013/03/23/ember-without-data.html)\r\n", thumbnail_image: "Screenshot_2015-11-25_20.47.42.png", permalink: "96-ember-data-20-getting-started-and-basics-of-dsmodel", free: true, difficulty: "basic", seconds: 315, wistia_embed: "<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script><div class=\"wistia_embed wistia_async_huivgmkwg7\" style=\"height:528px;width:800px\">&nbsp;</div>", code: "Install your adapter addon, if necessary, then use it in `adapters/application.js` to set the default adapter:\r\n\r\n```js\r\nimport ActiveModelAdapter from 'active-model-adapter';\r\n\r\nexport default ActiveModelAdapter.extend({\r\n});\r\n```\r\n\r\nThe create your DS.Models in the models folder:\r\n\r\n```js\r\nimport DS from 'ember-data';\r\n\r\nexport default DS.Model.extend({\r\n  name: DS.attr('string'),\r\n  level: DS.attr('number'),\r\n  imageUrl: DS.attr('string'),\r\n  teamMemberships: DS.hasMany('team-membership'),\r\n  price: DS.attr('number')\r\n});\r\n\r\n```", guid: "9f629d754be7f327bd853947cbbbafbe5b7c7eea"},
  {title: "79 - Closure Actions in Ember 2.0 Components - Block Components", video_url: "", description: "The block form of components is really useful for providing common visual idioms.  Wrap a block component around part of your template and you’ve changed how it displays.\r\n\r\nIn this video we show how to work with closure actions within a block component.", transcript: "In this episode we’ll be talking about how to use closure actions with block components. So in this example, I’ve taken what we had previously and put it inside a collapsible box that we can close and reopen.\r\n![Picture of Accessor.ly webpage with collapsible boxes](/content/images/2015/10/1.jpg)\r\nThis is how it looks before the box.\r\n![Picture of Accessory.ly webpage without collapsible boxes](/content/images/2015/10/2.jpg)\r\nAnd we’ve decided that users don’t necessarily want to see every single accessory, so we'll provide a way to close that up, and we'll want to reuse it in different parts of the application. So it can’t be part of the `control-accessory` component. It has to be a separate component. \r\n![control-accessory component](/content/images/2015/10/3-3.jpg)\r\nSo we’ll generate a component in the `pod` format, called the `collapsible-box`, \r\n![generating collapsible box component](/content/images/2015/10/4.jpg)\r\nWe’ll start by wrapping the `control-accessory` component within this component block, \r\n![wrapping the control-accessory component](/content/images/2015/10/5.jpg)\r\nand we’ll give this component a `className` of `collapsible-box`\r\n![naming component 'collapsible box](/content/images/2015/10/6.jpg)\r\nThen, we’ll give this box some styling. \r\n![styling collapsible box](/content/images/2015/10/7.jpg)\r\nLet’s see how it looks now. \r\n\r\nIt’s definitely a box, but it’s not collapsible yet. \r\n![Accessor.ly webpage with box, non-collapsible](/content/images/2015/10/8.jpg)\r\nBut before we get to collapsing it, I want you to note that the old buttons still work. So this context is still the context of the controller\r\n![9](/content/images/2015/10/9.jpg)\r\nrather than of this component. \r\n![10](/content/images/2015/10/10.jpg)\r\nSo we’ll create the `open` and `close` actions on this component, and setting it to `isOpen` by default.\r\n![setting box to 'open' by default](/content/images/2015/10/11.jpg)\r\nThen in the `template`, we’ll check to see if it’s open. If it is, we’ll show what’s there, and then give them a button that allows them to close. If it isn’t open, then we’ll say that it’s not open and give them a button that allows them to open it.\r\n![12](/content/images/2015/10/12.jpg)\r\nSo now we see that we can close and open the various boxes.\r\n![Accessor.ly webpage with collapsible boxes](/content/images/2015/10/13.jpg)\r\nSo now we have a perfectly good open and close collapsible box, and we didn’t actually have to do anything special with the actions to get it that way. \r\n\r\nHowever, what if we wanted to add a `close` button that was only in this instance of collapsible box, not in other collapsible boxes elsewhere? How would we do that?\r\n\r\n![Adding 'close' button to one collapsible box](/content/images/2015/10/14.jpg)\r\n\r\nSo it starts in the `collapsible-box` template. We yield the `action` `close`, \r\n![15](/content/images/2015/10/15.jpg) \r\nand so that’s passing that action into the template block here, and it’ll get passed as `close`.\r\n![16](/content/images/2015/10/16.jpg)\r\nAnd so now we have `close` to work with here, and so we’ll just use it as a variable right there, \r\n![17](/content/images/2015/10/17.jpg)\r\nand we can see that our button is working. So we’re saying we’re going to call the action in variable `close`, which is passed in by the block component. And then, that action is the `close` action, we happen to name them the same thing, on this block component here. So it’ll eventually call this.\r\n![18](/content/images/2015/10/18.jpg)\r\nSo that’s the basics, but I want to show you every part of this pipeline that we can access. So we’ll go ahead and take our `changeItem` action and we’ll unnecessarily refactor it to use every part of this. \r\n![19](/content/images/2015/10/19.jpg)\r\nSo first, we’ll pass in the `changeItem` action into the collapsible box, and we’ll call it `changeItem2`. Notice that we’re passing an `index` here. And later on when we get here, we will no longer be passing in that `index`. \r\n![20](/content/images/2015/10/20.jpg)\r\nSo then we’ll go to the template of the `collapsible-box`, and in the `yield` as a second parameter, we’ll pass in `attrs.changeItem2`.\r\n![21](/content/images/2015/10/21.jpg)\r\nThen here, we have our first `attr` which is `close`, and our second `attr` which is `changeItem2`. We’ll go ahead and call it `changeItem3`, showing that we can change the name of it if we want.\r\n![22](/content/images/2015/10/22.jpg)\r\nAnd then here, we’ll just have `changeItem` as `changeItem3`.\r\n![23](/content/images/2015/10/23.jpg)\r\nSo now, these are working just like they did before, except now it’s being passed through here,\r\n![24](/content/images/2015/10/24.jpg)\r\nand here,\r\n![25](/content/images/2015/10/25.jpg)\r\ngoing through the `yield`, and being passed through here, \r\n![26](/content/images/2015/10/26.jpg)\r\ninstead of just going straight to the controller from here.\r\n\r\nAnd obviously, you wouldn’t want to do this exact example in a real life application, but you can probably see how different parts of it could be useful to you.\r\n \r\nAnd there we go. That wraps up \"Closure Actions\". If there’s anything big that we missed, go ahead and send me an e-mail, and I may circle back and cover it. Thanks, and I’ll see you next week.\r\n", publish_date: "2015-10-02", links: "* [Blog post with example of closure actions and block components](http://alexdiliberto.com/posts/ember-closure-actions/)\r\n* [Ember Guides on block components](http://guides.emberjs.com/v1.13.0/components/wrapping-content-in-a-component/)", thumbnail_image: "Screenshot_2015-09-20_17.07.58.png", permalink: "79-closure-actions-in-ember-20-components-block-components", free: false, difficulty: "advanced", seconds: 261, wistia_embed: "<div id=\"wistia_o9qkfyqc8b\" class=\"wistia_embed\" style=\"width:800px;height:528px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"o9qkfyqc8b\");\r\n</script>", code: "```hbs\r\n//demonstrations/actions/template.hbs\r\n//calling the block component, sending in and using actions\r\n{{#collapsible-box  changeItem=(action \"changeItem\" index) as |close changeItem|}}\r\n  {{control-accessory changeItem=(action changeItem) itemName=item.itemName itemColor=item.itemColor}}\r\n  <button {{action close}}>Close Box</button>\r\n{{/collapsible-box}}\r\n```\r\n\r\n```hbs\r\n//components/collapsible-box/template.hbs\r\n//passing actions through yield\r\n<div style=\"border: 1px solid black\">\r\n  {{#if isShowing}}\r\n    <button {{action 'close'}} class=\"pull-right\">x</button>\r\n    {{yield (action 'close') attrs.changeItem}}\r\n  {{else}}\r\n    <button {{action 'open'}}>Click to reopen</button>\r\n  {{/if}}\r\n</div>\r\n```\r\n", guid: "aecf2a89ff4df1b764df6d9c2ec7faa71b3ade2f"},
  {title: "40 - Class Inheritance", video_url: "https://www.youtube.com/embed/ibxMae2Fs7Y", description: "Javascript is a prototypal language, but Ember went ahead and built an elegant Object System on top of it.  Find out how, starting with Class Inheritance.  \r\n\r\nIn this episode, we cover class extensions and the Inheritance Chain.", transcript: "", publish_date: "2015-05-23", links: "* [Object Model Guide](http://guides.emberjs.com/v1.11.0/object-model/classes-and-instances/)\r\n* [Ember.Object Class documentation](http://emberjs.com/api/classes/Ember.Object.html)", thumbnail_image: "Screenshot_2015-05-17_16.10.01.png", permalink: "40-class-inheritance", free: true, difficulty: "basic", seconds: 177, wistia_embed: "<div id=\"wistia_jcrlx4jpk9\" class=\"wistia_embed\" style=\"width:800px;height:500px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"40- Class Inheritance\" /><meta itemprop=\"duration\" content=\"PT2M57S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/0da48807a2a5cd71b14822582c2914449b9245a0.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/64ebb2df010b6c2ae7a86db0d72cf454811ee0dc.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=9327769&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F18fd78834d649f77a5df3fdef871f71e6b464273.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=177.095&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F0da48807a2a5cd71b14822582c2914449b9245a0.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F64ebb2df010b6c2ae7a86db0d72cf454811ee0dc.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-06-21T15:24:57Z\" /><object id=\"wistia_jcrlx4jpk9_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:500px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=9327769&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F18fd78834d649f77a5df3fdef871f71e6b464273.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=177.095&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F0da48807a2a5cd71b14822582c2914449b9245a0.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F64ebb2df010b6c2ae7a86db0d72cf454811ee0dc.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=9327769&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F18fd78834d649f77a5df3fdef871f71e6b464273.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=177.095&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F0da48807a2a5cd71b14822582c2914449b9245a0.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F64ebb2df010b6c2ae7a86db0d72cf454811ee0dc.bin\" name=\"wistia_jcrlx4jpk9_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">40- Class Inheritance</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"jcrlx4jpk9\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/jcrlx4jpk9/metadata.js\"></script>", code: "", guid: "8628bf46c72be702f91fdeca2a789bef058ab8c6"},
  {title: "77 - Closure Actions in Ember 2.0 Components- Metaprogramming with Parameter Currying", video_url: "", description: "Closure actions don't just save you code in what you're already doing- they allow you to do things that you had previously rejected as too difficult or verbose.\r\n  \r\nIn this video we focus on parameter currying, first showing a basic use of it that eliminates some repetition, and then diving deep into metaprogramming in order to make a more dynamic page.", transcript: "null", publish_date: "2015-09-25", links: "* [Closure Actions introductory blog post](http://emberjs.com/blog/2015/06/12/ember-1-13-0-released.html#toc_closure-actions)\r\n* [Closure Actions RFC](https://github.com/emberjs/rfcs/pull/50/files)\r\n* [Screencast introducing closure actions](https://www.emberscreencasts.com/posts/76-closure-actions-in-ember-20-components-passing-functions)", thumbnail_image: "Screenshot_2015-09-15_20.07.37.png", permalink: "77-closure-actions-in-ember-20-components-metaprogramming-with-parameter-currying", free: false, difficulty: "advanced", seconds: 248, wistia_embed: "<div id=\"wistia_1pfv8t9gfm\" class=\"wistia_embed\" style=\"width:800px;height:528px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"1pfv8t9gfm\");\r\n</script>", code: "In the controller we take the list of item names then automatically generate an array of items with the color and name attributes.  Then the `changeItem` method can change an arbitrary item to an arbitrary color.\r\n\r\n```js\r\nexport default Ember.Controller.extend({\r\n  items: ['hat', 'necklace', 'shoe'],\r\n  itemDetails: Ember.computed(function(){\r\n    return this.get(\"items\").map(function(itemName){\r\n      return {\r\n        itemName: itemName,\r\n        itemColor: 'none'\r\n      }\r\n    })\r\n  }),\r\n\r\n  actions: {\r\n    changeItem(itemName, newColor){\r\n      this.set(`itemDetails.${itemName}.itemColor`, newColor)\r\n    }\r\n  }\r\n})\r\n```\r\n\r\nWe loop through the array of items, displaying each while currying the appropriate parameters.\r\n\r\n```html\r\n{{#each itemDetails as |item index|}}\r\n  {{control-accessory changeItem=(action \"changeItem\" index) itemName=item.itemName itemColor=item.itemColor}}\r\n{{/each}}\r\n```\r\n\r\nAdding new items to the page is now as simple as adding their name to the array\r\n\r\n```js\r\n  items: ['hat', 'necklace', 'shoe', 'slap bracelet', 'scarf'],\r\n```", guid: "b47255be81ca6d3bfeff9a954822b37e2e5bb2e5"},
  {title: "72 - Introduction to Ember Actions", video_url: "", description: "Actions are how we make stuff happen in Ember, and they're becoming even more important in Ember 2.0.\r\n  \r\nIn this video we learn the basics of using the action helper, including where to put them on your template and controller, using parameters, and working with a wider variety of browser events than just clicking.", transcript: "null", publish_date: "2015-09-09", links: "* [Ember Guide on actions](http://guides.emberjs.com/v2.0.0/templates/actions/)\r\n* [Github diff](https://github.com/jeffreybiles/simpler-ember-sparks-website/commit/c842507735114e0be218aca40bd31204e19b4226)", thumbnail_image: "Screenshot_2015-09-07_11.11.05.png", permalink: "72-introduction-to-ember-actions", free: true, difficulty: "basic", seconds: 293, wistia_embed: "<div id=\"wistia_rd78m54zuo\" class=\"wistia_embed\" style=\"width:800px;height:528px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"72-introduction-to-ember-actions\" /><meta itemprop=\"duration\" content=\"PT4M53S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/9f0db849c781840b3f7f8fede8aa5fba133f5381.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/0b9fe472ed279b3488025004e6fd4afa72b5b027.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=13575934&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fb7978d9588fc868ef142eabc3fcacf4a57277f92.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=293.427&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F9f0db849c781840b3f7f8fede8aa5fba133f5381.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F0b9fe472ed279b3488025004e6fd4afa72b5b027.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-09-07T15:39:20Z\" /><object id=\"wistia_rd78m54zuo_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:500px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=13575934&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fb7978d9588fc868ef142eabc3fcacf4a57277f92.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=293.427&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F9f0db849c781840b3f7f8fede8aa5fba133f5381.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F0b9fe472ed279b3488025004e6fd4afa72b5b027.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=13575934&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fb7978d9588fc868ef142eabc3fcacf4a57277f92.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=293.427&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F9f0db849c781840b3f7f8fede8aa5fba133f5381.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F0b9fe472ed279b3488025004e6fd4afa72b5b027.bin\" name=\"wistia_rd78m54zuo_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\"><p>Actions are how we make stuff happen in Ember, and they're becoming even more important in Ember 2.0.</p><p>In this video we learn the basics of using the action helper, including where to put them on your template and controller, using parameters, and working with a wider variety of browser events than just clicking.</p></noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"rd78m54zuo\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/rd78m54zuo/metadata.js\"></script>", code: "Call actions in your template with the action helper\r\n\r\n```hbs\r\n<button {{action 'putOnHat'}}>Put on a hat</button>\r\n```\r\n\r\nCatch it in your actions hash in the controller\r\n\r\n```js\r\nactions: {\r\n  putOnHat(){\r\n    this.set('wearingAHat', true)\r\n  }\r\n}\r\n```\r\n\r\nYou can also pass parameters\r\n\r\n```hbs\r\n<button {{action 'putOnHat' 'red'}}>Put on a hat</button>\r\n```\r\n\r\n```js\r\nactions: {\r\n  putOnHat(color){\r\n    this.set('hatColor', color)\r\n    this.set('wearingAHat', true)\r\n  }\r\n}\r\n```\r\n\r\nFinally, you can use the `on` argument to make the action respond to browser events:\r\n\r\n```hbs\r\n<button {{action 'putOnHat' 'red' on=\"mouseEnter\"}}>Put on a hat</button>\r\n```", guid: "e24601293fb1b792d5d71718d8a93f45faedd2b6"},
  {title: "67 - Conditional Validations", video_url: "", description: "You don’t want all your validations to run all the time.  Luckily, ember-validations has conditional statements that allow you to turn them on or off based on what’s going on in the app when it loads.\r\n  \r\nWe go over the basic setup, the gotchas, and some of your options.", transcript: "null", publish_date: "2015-08-21", links: "* [Official documentation](https://github.com/dockyard/ember-validations#conditional-validators)", thumbnail_image: "Screen_Shot_2015-08-16_at_10.04.54_PM.png", permalink: "67-conditional-validations", free: false, difficulty: "intermediate", seconds: 171, wistia_embed: "<div id=\"wistia_otzcmgwrsx\" class=\"wistia_embed\" style=\"width:800px;height:478px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"otzcmgwrsx\");\r\n</script>", code: "You can set a validation to trigger only if a certain condition is true:\r\n\r\n```js\r\nqueryParams: ['specialScrutiny'],\r\nspecialScrutiny: false,\r\nvalidations: {\r\n  species: {\r\n    inclusion: {\r\n      'if': 'specialScrutiny',\r\n      in: ['Human', 'Homo Sapiens', 'Person'],\r\n      message: 'Be more specific'\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nYou can also use `unless` to do the opposite of `if`.", guid: "cf6d35f6a9940f156586f76f9bae5f04fd54e7f8"},
  {title: "115 - ES2016 Decorators", video_url: nil, description: "Decorators let you easily and repeatedly add functionality to existing functions.\r\n\r\nIn this episode we go over how to use and create decorators, creating two useful decorators that demonstrate different parts of the API.\r\n", transcript: "Decorators are coming to JavaScript, and they’re going to be awesome. And I say it in the future tense because they’re part of ES7 and they’re not by default part of Babel. However, they are experimentally available. And so you can turn them on in the ‘Try it out’ section of Babel by clicking the ‘Experimental’ check box, and as we’ll see next time when we look at Ember computed decorators, there are ways to turn it on in Ember.\r\n\r\n\r\nAlright. So let’s explore how decorators work, and we’re going to do that by starting off with the canonical example. So here we have, in the S6 class, and it’s been given the method `name`. That returns the first name and the last name concatenated together. So we can exercise this by creating a person, and then assigning `first` and `last` names to it and then logging out the name. Fairly straightforward example. \r\n\r\n\r\nHowever, let’s say we had a problem. There’s someone who had access to this and they kept on overwriting the `name` function. So as you can see, we’re overwriting the `name` function and outputting `hacked`. So we’d want to make this `name` function `readOnly`. How do we do this?\r\n\r\n\r\nSo it’s going to end up looking like this. This is a decorator, and what it does you can recognize it by the @ symbol, and it will say alright, we’re going to use the function called `readOnly` and it’s going to apply to whatever is right after it, in this case the name method. So it’s a method that takes a method and changes it. So `readOnly` is going to just be a function, a regular function, and it’s going to take a `target`, a `name`, and a `description`. Those are the three arguments. And for now, let’s just log out what those are. \r\n\r\n\r\nSo here we can see that the target is the `person` class, and then the name is funnily enough `name`, because that’s what the method is, so it’s the name of the method. And then the `description`, here it’s this `object`. It has three Booleans, `configurable`, `enumerable`, and `writable`, as well as a `value` which happens to be that function, the function that we’ve given it here. \r\n\r\n\r\nAnd so what we’re going to want to do to make this `readOnly` is, here we can change `writable`. So `description.writable = false`, and then we’ll just return the description. \r\n\r\n\r\nWhat we’ll find here is that now we have the error `Cannot assign to read only property 'name' of [object Object]`, which is the person. And we comment that out, it’s back to normal. So now our code is preventing us from overwriting that method. And it’s doing that because we have the `readOnly` decorator. If we cross this off, we’ll see that we can be hacked again. \r\n\r\n\r\nOf course overwriting just one of these Booleans isn’t all you can do. You can also mess with the value, change how the function actually works. We’ll do that. So instead of `readOnly`, let’s do something fluent. Now we won’t define fluent right away. What we’re going to do is set up a few more methods. They’ll be `sayName` and `setName`. So `sayName` will just say the name, it’ll log it out, and then `setName` will set the first and last name using the two things that we give it. And both of these will be fluent once we comment those back in. \r\n\r\n\r\nNow here’s how we use these. So instead of setting these directly, we’ll use `setName` and we’ll give it `hello` and `world`. And then instead of logging it out, we can call `sayName`, and once again scopes bite us. \r\n\r\nAlright, so we’re saying the name, but what if we wanted to do this in a jquery-like fluent syntax? Currently we can’t because it acts as if this is undefined. Our solution to this will be the fluent decorator, which I did steal mostly from this YouTube video, so you can go ahead and watch this afterwards if you like. \r\n\r\nSo our `fluent` function will of course take the target, name, and the description, and then we’re going to go ahead and save the function off of `descriptor.value`,  so we’re saving the original function. And then we’re going to overwrite the `descriptor.value` with a new function.\r\n\r\n\r\nFirst we’re going to give it all the arguments, target, name, and description, but we’re going to do something a little different. So we’re going to apply this first, and then we’re just going to return the target. So previously, I believe it was doing `fn.apply`, but now we’re also returning the target. And so if we set these to fluent, I will rename these and we can see that it’s now working. \r\n\r\nSo `setName` will return the person, the target, to here, and so we’re calling `sayName` on the person, the target. And we can even `setName` again to `('goodbye' , 'tacos')`. You may think that’s sad but they’re going goodbye because we’re eating them, so it’s happy. Alright, and so it says `('hello' , 'world')` and it sets the name and says `('goodbye' , 'tacos')`. So we have successfully created a fluent decorator.  \r\n\r\n\r\nI think those two examples can give you a fairly good idea of how to get started using decorators. In the next episode, we’ll learn how to use the Ember computed decorators add-on which has some cool decorators already built in. I’ll see you then.\r\n", publish_date: "2016-02-05", links: "* [javascript-decorators proposal](https://github.com/wycats/javascript-decorators) \r\n* [Screencast on decorators](https://www.youtube.com/watch?v=d8CDFsQHZpE)\r\n* [Blog post on Ember and decorators](http://karolgalanciak.com/blog/2015/12/02/ember-and-es7-decorators/ )\r\n* [ember-computed-decorator addon](https://github.com/rwjblue/ember-computed-decorators)\r\n", thumbnail_image: "Screenshot_2016-01-17_16.10.12.png", permalink: "115-es2016-decorators", free: false, difficulty: "intermediate", seconds: 446, wistia_embed: "<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script><div class=\"wistia_embed wistia_async_sus7aqr41d\" style=\"height:528px;width:800px\">&nbsp;</div>", code: "There are three booleans on the `description` argument of a decorator function.  Changing them changes how you can interact with the function:\r\n\r\n```js\r\nfunction readOnly(target, name, description) {\r\n  description.writable = false\r\n  return description\r\n}\r\n\r\nclass Person {\r\n  @readOnly\r\n  name() { return `${this.first} ${this.last}` }\r\n}\r\n\r\nconst p = new Person()\r\n\r\np.first = 'hello'\r\np.last = 'world'\r\n// p.name = () => 'hacked' //this can no longer happen\r\nconsole.log(p.name())\r\n```\r\n\r\n\r\n\r\nYou can use decorators to change how the function itself works, using `description.value`:\r\n\r\n```js\r\nclass Person {\r\n  name() { return `${this.first} ${this.last}` }\r\n  \r\n  @fluent\r\n  sayName(){console.log(this.name())}\r\n  \r\n  @fluent\r\n  setName(first, last){\r\n    this.first = first;\r\n    this.last = last;\r\n  }\r\n}\r\n\r\nfunction fluent(target, name, description){\r\n  const fn = description.value;\r\n  \r\n  description.value = function(...args){\r\n    fn.apply(target, args)\r\n    \r\n    return target\r\n  }\r\n}\r\n\r\n\r\nconst p = new Person()\r\n\r\np.setName('hello', 'world').sayName().setName('goodbye', 'tacos').sayName()\r\n//=> 'hello world'\r\n//=> 'goodbye tacos'\r\n```\r\n", guid: "427d26cc0361f1e2cb46cc74f6b6d2a1a2d673f1"},
  {title: "114 - ES2015 Destructuring", video_url: nil, description: "Destructuring is really cool, can save you code, and you’re probably already using a small portion of its power.\r\n\r\nLearn more about this cool new ES2015/ES6 feature, including how to destructure deeply nested objects, how to use it with Ember’s import statement, and how to use it with arrays.\r\n\r\nUPDATE: As Seth points out in the comments below, you *can* get a hash and an item within a hash: `let { x, z, z: { a } } = hash`.\r\n\r\nNote: I know some of you were expecting a screencast on Ember Data Serializers… but we’ve been doing Ember Data stuff for 2 months, and serializers alone will take another month… so we’re taking a break to explore some other topics for a bit.\r\n", transcript: "Hey. So I know that some of you were expecting this to be a screencast about serializers, but I realized we’ve been doing Ember data for two straight months now and there’s at least another month’s worth just in serializers. So we’re going to take a quick break and talk about some other more general Ember stuff. \r\n\r\n\r\nThis week we’re going to be talking about ES2015 destructuring. It’s a really cool concept that you might already be using, but you just don’t know what it’s called and all the cool advanced stuff you can do with it.\r\n\r\n\r\nSo here is one of the more basic examples. So we have our hash that has ‘x’,’ y’, and ‘z’ values. And then we let this hash be a ‘x’ and ‘y’. And so what that does is now ‘x’ here, this variable is 5, and this variable ‘y’ is 4. So when we `console.log` it will be 4. \r\n\r\n\r\nHere’s what it does when it’s transformed into ES5. So it has a private variable, xyz, and then it just calls ‘x’ on it, assigns that to variable ‘x’, and then calls ‘y’ on that and assigns that to variable ‘y’. So this is just a really great shortcut for these three lines. \r\n\r\nNow in this case we’re assigning directly from the hash when it’s declared. But you could call something a hash and put in a variable, and then destructure it. So you can carry this hash in another variable and destructure it later. \r\n\r\n\r\nYou can see a version of this in the imports and exports. You may remember this from video 62 where we’re exporting various types of salsa and we’re exporting named variables, and then the default, and then here these two are basically destructuring from where it got stored in the file system in the resolver. So that’s a more advanced version of this. I say more advanced. It’s really the same thing, but with knowledge of how the imports and exports of Ember work. \r\n\r\n\r\nSo this is the basic level of destructuring. You can also go further. Here we have this... now we’re destructuring and ‘z’ is an entire object. But we can also destructure things further. \r\n\r\n\r\nFor example, we could... let’s go ahead and name this something besides ‘x’. So we can take ‘z’ and we can let ‘a’ from ‘z’, so we’ve destructured that further, but we can do this all in the same `let` statement. So we’re destructuring this completely here. So we’re grabbing ‘a’, and ‘z’ of course is... well, you can’t actually get both ‘z’ and something within ‘z’. Right, because it says ‘z’ is not defined, so we can’t even have it as an undefined logging. \r\n\r\n\r\nSo if we wanted to do this, then we would need to once again do the slow version of destructuring. One other cool feature of destructuring is that you aren’t necessarily stuck with this variable. So it’s ‘a’ here but it doesn’t have to be called ‘a’. You can call it ‘h’. And then it’s working just fine. \r\n\r\n\r\nSo you can change the name of the variable that’s being used, that you’re destructuring it into. The first one is where it’s coming from, and the second one is the variable that you’re destructuring it into. If we’re going over to our ES5 over here, the first variable is what you call on the thing you’re destructuring. And the second one, the value, is the variable you’re putting it in.\r\n\r\n\r\nIn Ember exports and imports, there’s a shortcut for that, or it’s actually longer but it’s more obvious. It’s `as`. So we’re importing here `helper`, but we’re going to be calling it `makeHelper`. So in Ember that syntax is changed a little bit. \r\n\r\nIt’s also interesting to note that even though you can do complex destructures like we have here, it appears that within the Ember source code, there aren’t any that are that complex. My guess is that this is a conscious decision in order to reduce the complexity by only having a single layer of imports. You can tell that it’s already been broken down. In the old way this would have been `import` from Ember and then get the helpers, and then get this from the helpers. But in the new system that’s coming soon to an Ember near you, you can import it directly from `ember-htmlbars/helper`. \r\n\r\n\r\nSo that’s how it integrates with Ember. But that’s not all there is to destructuring. Before we go, let’s take a quick look at arrays, because arrays can destructure as well. So here we’re assigning this array to the variable `array`, and then we’re destructuring it into ‘x’, ‘y’, and ‘z’. And notice ‘z’ is now a hash still, so we can still destructure it like this. You can see logging it out, it gets us what we would expect. \r\n\r\n\r\nAnd a cool thing about this is you don’t actually have to give the same value. You don’t have to give a variable for each part of the array. So you can just leave some blank if you want.\r\n\r\n \r\nSo this has been the ES6 feature, JavaScript destructuring. If you want to learn more, you can go to this link I’ll include in the show notes, and you can go to the ‘Try it out’ to experiment and see what you can do. I’ll see you next time. \r\n", publish_date: "2016-02-03", links: "* [BabelJS destructuring docs](https://babeljs.io/docs/learn-es2015/#destructuring) \r\n* [Screencast on ES2015 import/export](https://www.emberscreencasts.com/posts/62-es2015-modules-import-export)\r\n", thumbnail_image: "Screenshot_2016-01-17_11.29.35.png", permalink: "114-es2015-destructuring", free: true, difficulty: "basic", seconds: 348, wistia_embed: "<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script><div class=\"wistia_embed wistia_async_lg3ch9zqsx\" style=\"height:528px;width:800px\">&nbsp;</div>", code: "In ES2015, you can destructure objects:\r\n\r\n```js\r\nlet {x, z} = {x: 5, y: 4, z: 3}\r\n\r\nconsole.log(x, z) //=> 5, 3\r\n```\r\n\r\nYou can destructure objects that are assigned to variables, destructure complex objects, and assign destructured values to new variables:\r\n\r\n```js\r\nlet hash = {x: 5, y: 4, z: {a: 'hats'}}\r\nlet {x, z} = hash //destructure above object, stored in the variable 'hash'\r\nlet {a: h} = z //destructure z, assign a to h\r\n\r\nconsole.log(z, h) //=> Object {a: \"hats\"}, \"hats\"\r\n```\r\n\r\n\r\nYou can also destructure arrays:\r\n\r\n```js\r\nlet array = [5, 4, 3]\r\nlet [x,,z] = array\r\n\r\nconsole.log(x, z) //=> 5, 3\r\n```", guid: "fd8325e27ec56f7ecc1f4b85dc96bd69036c9946"},
  {title: "83 - Session Service", video_url: nil, description: "To keep track of personalized data, we need a user.  To keep track of the current user, we need a session.  A service is the perfect structure for making a session.\r\n\r\nIn this video we create a session service and use it to (insecurely) login and logout users.  We then use that session to create customized teams for each user, and discover the power of a service with a good API.\r\n", transcript: "In the last episode, we created an app where we could sort through monsters and add them to our team. However, when we reloaded the page, they were all gone because they were just stored within the application. They weren’t persisted to anything, like a server. However, if you just have one current team that you persist to the server, then everyone’s going to have the same current team and that’s not good. That’s why we need sessions. That’s why we need users.\r\n\r\n\r\nSo I’ve created some users. They have a name and an e-mail address. And I’ve created two of them.\r\n\r\n\r\n![1 users route page with two users](/content/images/2015/10/1-5.jpg)\r\n\r\n\r\nOur session is going to keep track of which user we’re currently signed in as, as well as take care of the signing in and signing out for us.\r\n\r\n\r\nWe’ll start by generating an `Ember.Service` and we’ll call that service `session`. \r\n\r\n\r\n![2 generating ember.service session](/content/images/2015/10/2-4.jpg)\r\n\r\n\r\nThis `session` service will have a `currentUser` property. It’ll also have two functions, `login` and `logout`, which set the `currentUser` to a `user` or `null` respectively.\r\n\r\n\r\n![3 currentUser as user or null, with two functions, login and logout](/content/images/2015/10/3-5.jpg)\r\n\r\n\r\nOur first use of this service will be to create login buttons for both of these users. We’re not really concerned with security at the moment. We’ll be covering that in later screencasts. \r\n\r\n\r\nSo here we’ll add a button that has the action `login`,\r\n\r\n\r\n![4 adding Login action button](/content/images/2015/10/4-4.jpg)\r\n\r\n\r\nand then in our users controller, we’ll inject the `session` service. And then in the `login` action, we’ll call the `login` method on the session. And of course after we login, we’ll want to display that status to the user, and what better way than in our navbar.\r\n\r\n\r\n![code for user.js](/content/images/2015/10/5-4.jpg)\r\n\r\n\r\nSo let’s go to the `application` controller and we’ll go ahead and inject the service,\r\n\r\n\r\n![6 Inject service in application controller](/content/images/2015/10/6-4.jpg)\r\n\r\n\r\nthen in the handlebars template for the application, we’ll go ahead and create a `span` that’s pulled to the right, and that will display the current user’s e-mail. We are of course able to access the `currentUser` because we’re injecting the `session`. \r\n\r\n\r\n![code within application.hbs that creates a span displaying the current user's e-mail](/content/images/2015/10/7-4.jpg)\r\n\r\n\r\nWe’ll see this in action. We’ll hit ‘Log in’ and it shows the e-mail address over on the right.\r\n\r\n\r\n![8 users route page with login button and e-mail address](/content/images/2015/10/8-3.jpg)\r\n\r\n\r\nNow that we have the basic ‘Log in’, let’s go ahead and make this navbar a little bit more full-featured.\r\n\r\n\r\nSo first we’ll use an `if` statement to check where the `currentUser` exists. If it does exist, we’ll keep displaying the e-mail. If it doesn’t exist, then we’ll provide a link to the `users` page, and we’ll call this link `login`. Later this will link to an actual ‘Log in’ page. \r\n\r\n\r\n![9 providing a ‘login’ link to users page](/content/images/2015/10/9-3.jpg)\r\n\r\n\r\nThen let’s go ahead and edit this stuff within the `currentUser` block as well. So we’ll add a link to the `monsters` page since you’ll probably want to edit your monsters.  \r\n\r\n\r\n![10 adding link to monsters page](/content/images/2015/10/10-3.jpg)\r\n\r\n\r\nAnd then we’ll add a `logout` action around the e-mail.\r\n\r\n\r\n![11 adding logout action around the e-mail](/content/images/2015/10/11-4.jpg)\r\n\r\n\r\nThen, in the `application` controller, we want to add the `logout` action, which will call the `logout` action on `session`, on our session service, and then we’ll go ahead and transition to the users route, since after you logout that’s where you’ll want to be. \r\n\r\n\r\n![code for application.js](/content/images/2015/10/12-3.jpg)\r\n\r\n\r\nAnd while we’re at it for convenience sake, let’s go ahead and add a transition to the monsters route to the `login`.\r\n\r\n\r\n![13 adding a transition to the monsters route to the ‘login’](/content/images/2015/10/13-3.jpg)\r\n\r\n\r\nWe’ll see this in action. We’ll hit log in. It logs us in, takes us to the monsters route, \r\n\r\n\r\n![14 users route page with monsters route](/content/images/2015/10/14-3.jpg)\r\n\r\n\r\nand then we can log out and it’ll take us back to the users route. \r\n\r\n\r\nSo that’s the bare bones of the session service that we use to keep track of which user is currently signed in. \r\n\r\n\r\nNow we’ll see how having the user can help us assemble the current team and have that team be saved between sessions. \r\n\r\n\r\nSo we’ll see that the user in addition to having a `name` and an `e-mail`, they also have many `teamMemberships`, \r\n\r\n\r\n![15 user having name, e-mail, and team membership](/content/images/2015/10/15-3.jpg)\r\n\r\n\r\nand `team-membership` belongs to a `monster` and a `user`,\r\n\r\n\r\n![team-membership.js code, shows that team membership belongs to both a 'monster' and a 'user'](/content/images/2015/10/16-3.jpg)\r\n\r\n\r\nand a monster of course has many team memberships. So what we’ll have to do is find a way to connect the monster and the current user using team memberships. The answer is in the `currentTeam` service. \r\n\r\n\r\nSo we’ll just change the `currentTeam` service, so instead of working with the stand alone list of monsters, we’ll work with the list of monsters calculated from the team memberships of the currently signed in user.\r\n\r\n\r\n![code for current-team.js](/content/images/2015/10/17-3.jpg)\r\n\r\n\r\nThen when you’re adding a monster to the team, you must create the team membership record, and then save it.\r\n\r\n\r\n![using record.save to create team membership for a monster](/content/images/2015/10/18-2.jpg)\r\n\r\n\r\nAlso notice that `store`, it’s a service. We’ll go ahead and inject it. You can inject the store into any ember object. \r\n\r\n\r\n![19 injecting ‘store’](/content/images/2015/10/19-2.jpg)\r\n\r\n\r\nThen to remove a monster from a team, we must get the team memberships from the current user, and then filter it out so we find the one that contains that monster, and because of how we’re doing this it’ll be an array, so we’ll do a `forEach` on this, even though it’ll just be a length of one, and then destroy that record.\r\n\r\n\r\n![current-team.js code](/content/images/2015/10/20-2.jpg)\r\n\r\n\r\nFinally, we’ll have to change the `includes` method. How we’ll have to change it is we’ll have to `map` to get the `content`, and I’m not really happy with having to do this, so if you have any better solutions, please tell me in the comments.\r\n\r\n\r\n![current-team.js code](/content/images/2015/10/21-2.jpg)\r\n\r\n\r\nNow we’ll try this out. We’ll login as Jeffrey and then we’ll add stuff to the team, \r\n\r\n\r\n![22 adding monsters to current team while signed in as Jeffrey](/content/images/2015/10/22-2.jpg)\r\n\r\n\r\nand then when we reload, well we’re not logged in again. But we log back in as Jeffrey, it’ll keep our current team.\r\n\r\n\r\n![23 Jeffrey’s current team](/content/images/2015/10/23-2.jpg)\r\n\r\n\r\nAnd then when we log in as someone else, it’ll have a different team. \r\n\r\n\r\n![Webpage showing that the monster team is different when a different user is logged in](/content/images/2015/10/24-2.jpg)\r\n\r\n\r\nNow there’s something that I want you to notice. Even though there was a lot of churn within the `current-team` service, we didn’t actually change any of the places that are calling the `current-team` service. \r\n\r\n\r\n![code for current-team.js](/content/images/2015/10/25-2.jpg)\r\n\r\n\r\nSo in the `monster` model, `onTeam` calls the `currentTeam` list of monsters. It stays the same. It also calls `includes`. This has stayed the same.\r\n\r\n\r\n![monster.js - app/models code](/content/images/2015/10/26-2.jpg)\r\n\r\n\r\n`team-lineup`, this has stayed the same. \r\n\r\n\r\n![team-lineup.hbs code](/content/images/2015/10/27-1.jpg)\r\n\r\n\r\nAnd the `monster` controller, these have once again stayed the same. \r\n\r\n\r\n![monster.js - app/controllers/monsters code](/content/images/2015/10/28-1.jpg)\r\n\r\n\r\nSo this shows the power of a well-designed service with a stable API. You can change almost everything else about it, and as long as the API stays the same, nothing else in your app has to change. \r\n\r\n\r\nSo to review, in this episode we created a session service, a very basic one. It’s non-persistent and completely insecure. But it’s the basic bare bones and we’ll be expanding on this in coming episodes.\r\n\r\n\r\n![basic session.js code](/content/images/2015/10/29-1.jpg)\r\n\r\n\r\nThen we used that session service to create a navbar,\r\n\r\n\r\n![code required to create a navbar](/content/images/2015/10/30-1.jpg)\r\n\r\n\r\nand then finally we used the `user` and `currentUser` that this session service provides in order to make our current team persist to the database. And as a special bonus, we saw that `store` is actually a service now, so we can inject it onto any ember object we want.\r\n\r\n\r\n![store: Ember.inject.service() code](/content/images/2015/10/31-1.jpg)\r\n\r\n\r\nAnd that’s it for today. I’m so glad you chose to learn with me today, and I hope to see you next time when we talk more about user authentication authorization. \r\n\r\n\r\n", publish_date: "2015-10-16", links: "* [Episode introducing Services] (https://www.emberscreencasts.com/posts/82-introduction-to-services)\r\n* [Ember 2.1 Guides for Services](http://guides.emberjs.com/v2.1.0/applications/services/)\r\n", thumbnail_image: "Screenshot_2015-10-06_16.29.32.png", permalink: "83-session-service", free: false, difficulty: "intermediate", seconds: 405, wistia_embed: "<div id=\"wistia_xvgagt13b8\" class=\"wistia_embed\" style=\"width:800px;height:528px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"83-session-service\" /><meta itemprop=\"duration\" content=\"PT6M44S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/58a60e8df7cce8a41f0bf54033da61b216bd2445.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/5f4ea48ed443be794984b3ef067d6185b77033b8.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=28843167&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F533f93859925fa0d18add797b100574cb7b23e78.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=404.999&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F58a60e8df7cce8a41f0bf54033da61b216bd2445.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F5f4ea48ed443be794984b3ef067d6185b77033b8.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-10-07T16:59:44Z\" /><object id=\"wistia_xvgagt13b8_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:500px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=28843167&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F533f93859925fa0d18add797b100574cb7b23e78.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=404.999&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F58a60e8df7cce8a41f0bf54033da61b216bd2445.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F5f4ea48ed443be794984b3ef067d6185b77033b8.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=28843167&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F533f93859925fa0d18add797b100574cb7b23e78.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=404.999&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F58a60e8df7cce8a41f0bf54033da61b216bd2445.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F5f4ea48ed443be794984b3ef067d6185b77033b8.bin\" name=\"wistia_xvgagt13b8_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">83-session-service</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"xvgagt13b8\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/xvgagt13b8/metadata.js\"></script>", code: "The session service\r\n\r\n```js\r\n//services/session.js\r\n\r\nexport default Ember.Service.extend({\r\n  currentUser: null,\r\n  login(user){\r\n    this.set('currentUser', user)\r\n  },\r\n  logout(){\r\n    this.set('currentUser', null)\r\n  }\r\n});\r\n```\r\n\r\nDisplay current user and logout link\r\n\r\n```js\r\n//controllers/application.js\r\n\r\nexport default Ember.Controller.extend({\r\n  session: Ember.inject.service(),\r\n  actions: {\r\n    logout(){\r\n      this.get(\"session\").logout()\r\n      this.transitionToRoute('users')\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n```hbs\r\n//templates/application.hbs\r\n\r\n<div class=\"container\">\r\n  <div class=\"pull-right\">\r\n    {{#if session.currentUser}}\r\n      <span {{action 'logout'}} style=\"cursor: pointer;\">Logout {{session.currentUser.email}}</span>\r\n    {{else}}\r\n      {{#link-to 'users'}}Login{{/link-to}}\r\n    {{/if}}\r\n    ---\r\n    {{#link-to 'monsters'}}Monsters{{/link-to}}\r\n  </div>\r\n\r\n  {{outlet}}\r\n</div>\r\n```\r\n\r\nLogin link is temporarily in /users\r\n\r\n```js\r\n//controllers/users.js\r\n\r\nexport default Ember.Controller.extend({\r\n  session: Ember.inject.service(),\r\n  actions: {\r\n    login(user){\r\n      this.get(\"session\").login(user)\r\n      this.transitionToRoute(\"monsters\")\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n```hbs\r\n//templates/users.hbs\r\n\r\n<h1>Users</h1>\r\n{{#each model as |user|}}\r\n  <button {{action 'login' user}}>Log in</button>{{user.name}}--- {{user.email}}\r\n  <br>\r\n{{/each}}\r\n```", guid: "47099344cc9294fa1079dc0fc9dbac61445341f1"},
  {title: "49 - Image Upload Preview", video_url: "https://www.youtube.com/embed/rCkIgMWCb28", description: "When you're uploading an image, you want the immediate feedback of seeing the image you've selected.\r\n  \r\nThis screencast shows how to display the image to the user after they've selected it but before they've committed to uploading it to the server.", transcript: "null", publish_date: "2015-06-21", links: "* [Upload a File](https://www.emberscreencasts.com/posts/48-upload-a-file-as-part-of-a-form)\r\n* [relevant StackOverflow question](http://stackoverflow.com/questions/24586054/how-to-preview-image-before-upload-in-html)", thumbnail_image: "Screenshot_2015-06-20_20.39.23.png", permalink: "49-image-upload-preview", free: false, difficulty: "intermediate", seconds: 174, wistia_embed: "<div id=\"wistia_zjslbrwvii\" class=\"wistia_embed\" style=\"width:800px;height:500px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"zjslbrwvii\");\r\n</script>", code: "", guid: "70a5b729906d96a5286aad3127e281ca51399a14"},
  {title: "85 - Authenticated Routes", video_url: nil, description: "Some pages are only for your logged-in users, and you want to protect those routes.\r\n\r\nThis video shows you not only how to protect your authenticated routes, but also how to direct users back to that route once they’ve signed in.\r\n", transcript: "In the last few episodes we’ve been working with the session service, and working around user authentication authorization. In this episode, we’re going to be exploring authenticated routes. \r\n\r\n\r\nSo as you can see, we can go to this authenticated route when we’re logged in, \r\n\r\n\r\n![Going to an authenticated route on the monsters webpage](/content/images/2015/10/1-7.jpg)\r\n\r\n![Webpage for the authenticated route](/content/images/2015/10/2-6.jpg)\r\n\r\n\r\nbut if we log out, \r\n\r\n\r\n![Page for Users, reached after logging out](/content/images/2015/10/3-7.jpg)\r\n\r\n\r\nthen when we hit this \r\n\r\n\r\n![Clicking the \"Authenticated\" button after logging out](/content/images/2015/10/4-6.jpg)\r\n\r\n\r\nit’ll take us to the login route.\r\n\r\n\r\n![Page for logging in](/content/images/2015/10/5-6.jpg)\r\n\r\n\r\nAnd then when we log in, it will take us to the authenticated route where we were wanting to go before.\r\n\r\n\r\n![Page for authenticated route](/content/images/2015/10/6-6.jpg)\r\n\r\n\r\nSo how do we build that? We’ll start with what we had last time, and then we’ll generate a route called `authenticated` that will give us our route in our template and add that to the router.\r\n\r\n\r\n![7 generating an authenticated route](/content/images/2015/10/7-6.jpg)\r\n\r\n\r\nWe’ll paste in some text from the `authenticated` route and then here in our application for a header, we’ll have a link.\r\n\r\n\r\n![8 pasting text from authenticated route](/content/images/2015/10/8-5.jpg)\r\n\r\n\r\nSo we can go here, we can hit this, \r\n\r\n\r\n![Clicking the \"Authenticated\" button at the top of the Monster Cards webpage](/content/images/2015/10/9-5.jpg)\r\n\r\n\r\nand it’ll take us to the authenticated route.\r\n\r\n\r\n![Page for the authenticated route](/content/images/2015/10/10-4.jpg)\r\n\r\n\r\nHowever, if we’re logged out, it’ll still let us go to the authenticated route. \r\n\r\n\r\n![Going to the page for the authenticated route even after logging out](/content/images/2015/10/11-5.jpg)\r\n\r\n\r\nWe want to block users who aren’t signed in from visiting this page. We’ll do this in the authenticated route. So first we’ll inject the session service and then we’ll use the `beforeModel` hook. So `beforeModel` is run, well, before the model, but also important for our purposes before anything is displayed on the page. So it’ll check, we’ll check, to see if the `currentUser` is on the session, and if it’s not then we’ll transition to the users route. If you’re doing this you might transition to the `login` route, but we haven’t made a specific one of that yet.\r\n\r\n\r\n![Code for this.transitionTo('users')](/content/images/2015/10/12-4.jpg)\r\n\r\n\r\nSo now you’ll see that if we try to go to the authenticated route when we’re not logged in, \r\n\r\n\r\n![Clicking the \"Authenticated\" icon on the Monsters Cards webpage](/content/images/2015/10/13-4.jpg)\r\n\r\n\r\nit’ll redirect us to the users route, like we expect. \r\n\r\n\r\n![Page for the Users route](/content/images/2015/10/14-4.jpg)\r\n\r\n\r\nBut if we’re logged in, then it works.\r\n\r\n\r\n![Logged-in Users page.](/content/images/2015/10/15-4.jpg)\r\n\r\n![Page for Authenticated user route](/content/images/2015/10/16-4.jpg)\r\n\r\n\r\nSo right now it works, but currently it redirects them to the monsters route after every time they sign in, but if they got redirected to the users login route right after trying to go to the authenticated route, then they’re going to want to go back to the authenticated route and not to the monsters route. \r\n\r\n\r\n![Code for users.js](/content/images/2015/10/17-4.jpg)\r\n\r\n\r\nHow can we set this up? Our first step will be in the authenticated route where we’re doing the redirection. So the `beforeModel` hook, it has some arguments, and the first one of those arguments is the `transition`. So what we can do is we’ll get the `loginController` using `controllerFor`, and then we’ll set the property `previousTransition` to the `transition` that’s happening as we’re going through this `beforeModel` hook, so it’ll remember that it’s trying to go the `authenticated` route. \r\n\r\n\r\n![Code for the authenticated.js file](/content/images/2015/10/18-3.jpg)\r\n\r\n\r\nThen in the `users` controller which we’re having double as the `login` controller for now, we’re going to grab that `previousTransition`, and then if that `transition` is available, then first we’re going to set it to `null` so we don’t accidentally do it again next time that we log in, and then we’re going to retry that transition. \r\n\r\n\r\n![Code for the users.js file, with \"previousTransition\" set to null](/content/images/2015/10/19-3.jpg)\r\n\r\n\r\nSo what that’ll do is if we come from the authenticated route, \r\n\r\n\r\n![Non-logged-in page for Monster Cards](/content/images/2015/10/20-3.jpg)\r\n\r\n\r\nit’ll send us back to the authenticated route. \r\n\r\n\r\n![Authenticated route page](/content/images/2015/10/21-3.jpg)\r\n\r\n![Page for signed in user](/content/images/2015/10/22-3.jpg)\r\n\r\n\r\nSo what happens if we want to make more routes authenticated? One solution is just to copy all of this\r\n\r\n\r\n![Code contained in the authenticated.js file](/content/images/2015/10/23-3.jpg)\r\n\r\n\r\nand paste it in somewhere else. So if we want to make the `monsters` route authenticated, we could just paste it in like that. \r\n\r\n\r\n![Pasting code from the authenticated.js file into the monsters.js file](/content/images/2015/10/24-3.jpg)\r\n\r\n\r\nHowever, a mixin seems a much better choice. So let’s generate our mixin, \r\n\r\n\r\n![25 generating mixin](/content/images/2015/10/25-3.jpg)\r\n\r\n\r\nand then we can copy this code into the mixin, and so we’ll have this code exactly once.\r\n\r\n\r\n![Copying code into the mixin](/content/images/2015/10/26-3.jpg)\r\n\r\n\r\nThat means in the `authenticated` route, we can delete all of this code,\r\n\r\n\r\n![27 deleting code in authenticated route](/content/images/2015/10/27-2.jpg)\r\n\r\n\r\nand we’ll replace that by importing the `mixin` and using it. \r\n\r\n\r\n![28 replacing code by importing the mixin](/content/images/2015/10/28-2.jpg)\r\n\r\n\r\nThen we can do the same thing for the `monsters` route. \r\n\r\n\r\n![Deleting redundant code from monsters.js](/content/images/2015/10/29-2.jpg)\r\n\r\n\r\nOf course we’ll still be leaving in the model. \r\n\r\n\r\n![model() is still intact in the monsters.js file](/content/images/2015/10/30-2.jpg)\r\n\r\n\r\nSo now to make a route authenticated, we only have to import the `mixin` and include it. \r\n\r\n\r\nLet’s see this in action. So of course we can go to the monsters route, we can go to the authenticated route just fine.\r\n\r\n\r\n![Page for the authenticated route](/content/images/2015/10/31-2.jpg)\r\n\r\n![Monster Cards page for a logged-in user](/content/images/2015/10/32-1.jpg)\r\n\r\n![Navigating back to the authenticated route page from the Monster Cards page](/content/images/2015/10/33-1.jpg)\r\n\r\n\r\nBut when we log out, then we’ll try to go to the monsters route. \r\n\r\n\r\n![Attempting to go the Monsters route after having logged out.](/content/images/2015/10/34.jpg)\r\n\r\n![Attempting to go the Monsters route after having logged out.](/content/images/2015/10/35.jpg)\r\n\r\n\r\nIt redirects us to the users route. \r\n\r\n\r\n![Being redirected to the page for the Users route.](/content/images/2015/10/36.jpg)\r\n\r\n\r\nWe log in, it takes us to the monsters route. \r\n\r\n\r\n![Landing on the Monster Cards page after logging in](/content/images/2015/10/37.jpg)\r\n\r\n\r\nThen if we repeat the process with the authenticated route, we see it works there as well. \r\n\r\n\r\n![Navigating to the authenticated route page](/content/images/2015/10/38.jpg)\r\n\r\n![Page for the authenticated route](/content/images/2015/10/39.jpg)\r\n\r\n\r\nSo even though the code is completely generic, it still has the correct redirection behavior.\r\n \r\n\r\nSo that’s authenticated routes. One thing to note before we leave is that these aren’t completely secure even if we had more than just a login button. If we had password protection, this still wouldn’t completely protect your pages. The reason for that is because you can easily go into the services, go into the container, and just edit it. \r\n\r\n\r\n![Process for directly editing the services for the authenticated routes page.](/content/images/2015/10/40.jpg)\r\n\r\n\r\nSo make sure to protect your stuff at the level of the server as well, and we’ll show you how to do that next week. I’ll see you then.\r\n", publish_date: "2015-10-23", links: "* [Episode introducing the Session Service](https://www.emberscreencasts.com/posts/83-session-service)\r\n* [Ember Guides for authenticated routes](http://guides.emberjs.com/v2.1.0/routing/preventing-and-retrying-transitions/)\r\n", thumbnail_image: "Screenshot_2015-10-09_15.44.26.png", permalink: "85-authenticated-routes", free: false, difficulty: "intermediate", seconds: 297, wistia_embed: "<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script>\r\n<div class=\"wistia_embed wistia_async_45g20mkg0t\" style=\"height:528px;width:800px\">&nbsp;</div>", code: "mixins/authenticated-route.js\r\n\r\n```js\r\nimport Ember from 'ember';\r\n\r\nexport default Ember.Mixin.create({\r\n  session: Ember.inject.service(),\r\n  beforeModel(transition){\r\n    if(!this.get('session.isLoggedIn')){\r\n      var loginController = this.controllerFor('users');\r\n      loginController.set('previousTransition', transition);\r\n      this.transitionTo('users')\r\n    }\r\n  }\r\n});\r\n```\r\n\r\nMixing it into a route:\r\n\r\n```js\r\nimport Authenticated from '../mixins/authenticated-route';\r\n\r\nexport default Ember.Route.extend(Authenticated, {\r\n  //...\r\n})\r\n```\r\n\r\nController for login page:\r\n\r\n```js\r\nexport default Ember.Controller.extend({\r\n  session: Ember.inject.service(),\r\n  actions: {\r\n    login(user){\r\n      this.get(\"session\").login(user)\r\n      var previousTransition = this.get('previousTransition');\r\n      if (previousTransition) {\r\n        this.set('previousTransition', null);\r\n        previousTransition.retry();\r\n      } else {\r\n        // Default back to homepage\r\n        this.transitionToRoute('index');\r\n      }\r\n    }\r\n  }\r\n})\r\n```", guid: "ecb56c73af2490dee0b9ae887671bdfc215674ea"},
  {title: "50 - Browser Events", video_url: "", description: "Browser Events are the core of user interaction.  Ember has built some layers so you don't have to constantly think of them, but there's great power in knowing how to work with them.\r\n  \r\nToday we'll explore using the click event on a component, see how to fix common problems, and then take a peek at the vast array of browser events available.", transcript: "null", publish_date: "2015-06-27", links: "* [Built-in browser events (scroll down to \"Adding New Events\")](http://guides.emberjs.com/v1.12.0/understanding-ember/the-view-layer/)\r\n* [MDN list of browser events](https://developer.mozilla.org/en-US/docs/Web/Events)", thumbnail_image: "Screenshot_2015-06-25_11.43.29.png", permalink: "50-browser-events", free: true, difficulty: "intermediate", seconds: 202, wistia_embed: "<div id=\"wistia_3wny6sxu59\" class=\"wistia_embed\" style=\"width:800px;height:500px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"50- Browser Events\" /><meta itemprop=\"duration\" content=\"PT3M22S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/e13b4b4aa5270d6fb5912de6b53ea1c44c25efa6.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/bc46aa02f3f4570a9ab2fab1d7f7390c190feec6.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=720&hdUrl%5Bsize%5D=22273576&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F37382b0ffffd70638e387ab9bee712bc0756d8ec.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=202.498&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fe13b4b4aa5270d6fb5912de6b53ea1c44c25efa6.bin%3Fimage_crop_resized%3D640x360&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fbc46aa02f3f4570a9ab2fab1d7f7390c190feec6.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-06-25T16:47:30Z\" /><object id=\"wistia_3wny6sxu59_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:500px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=720&hdUrl%5Bsize%5D=22273576&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F37382b0ffffd70638e387ab9bee712bc0756d8ec.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=202.498&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fe13b4b4aa5270d6fb5912de6b53ea1c44c25efa6.bin%3Fimage_crop_resized%3D640x360&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fbc46aa02f3f4570a9ab2fab1d7f7390c190feec6.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=720&hdUrl%5Bsize%5D=22273576&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F37382b0ffffd70638e387ab9bee712bc0756d8ec.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=202.498&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fe13b4b4aa5270d6fb5912de6b53ea1c44c25efa6.bin%3Fimage_crop_resized%3D640x360&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fbc46aa02f3f4570a9ab2fab1d7f7390c190feec6.bin\" name=\"wistia_3wny6sxu59_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">Browser Events are the core of user interaction. Ember has built some layers so you don't have to constantly think of them, but there's great power in knowing how to work with them. Today we'll explore using the click event on a component, see how to fix common problems, and then take a peek at the vast array of browser events available.</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"3wny6sxu59\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/3wny6sxu59/metadata.js\"></script>", code: "", guid: "341de50e3bf24797bbfb38615b581adb2fc1d9b6"},
  {title: "95 - Multiple Concurrent Promises", video_url: nil, description: "Sometimes promises have to happen in an exact order, but often there will be several calls that can be made concurrently.  RSVP’s Promise implementation allows that.\r\n\t\r\nIn this video we show how to use the hash method, one of several methods available to do concurrent promises.\r\n", transcript: "So we’ve been talking about promises and how they’re useful for your app, but so far we’ve only done single promises, basically acting in sequence. But there’s a whole 'nother world where you can do multiple promises through methods like `hash` or `all`. We’ll look into those today.\r\n\r\n\r\nSo we have our Monster Card program, and for this route we’re pulling in a lot of monsters. We’re using the Ember data `findAll` method. And as you recall, `findAll` is a promise, and `model` has stuff to deal with promises. \r\n\r\n\r\nBut what if we need to find more than just monsters? What if we need to find all the worlds that are in this game? Now if this were a purely synchronous thing, then we would be able to just put them in a hash and then have them as keys on that hash. However, even if we made it so that it was a promise so it worked, it would still have problems in high latency situations. Notice how it took a few seconds for that to load. That’s because the page was already loading before these promises were loaded, because Ember doesn’t recognize these as promises in its loading machinery. It only looks at this. And this is fine for what we’re doing here, but in more complex applications that could be a problem. \r\n\r\n\r\nSo instead, you can do a hash. And so using an `Ember.RSVP` hash, what it does is it’ll just wait until all the promises within it are returned, and then it’ll return that promise. So notice here, it all loaded at once after all the promises were done loading. And since this `hash` method wrapping these two promises is also a promise, we can use `.then` and `.catch` on it as well. Let’s go ahead and log out the response so we can see what it looks like. \r\n\r\n\r\nSo we can see that the object returned, the promise returned, has an array of worlds and an array of monsters. Of course to make these monsters show up, I did have to change this line to say `model.monsters` instead of just `model` like it was before. And then of course we can add in code so we can view the worlds. And then on our page, we can see the worlds displayed, loaded at the exact same time as the monsters, as far as the user is concerned. \r\n\r\n\r\nWe should also note that an `RSVP` hash doesn’t take just promises. It can also take just regular values. So we’ll set `taco` to `true`, and it’ll handle it just fine. See it loads taco as true, and then the worlds and monsters as they were before. \r\n\r\n\r\nNow what happens if one of these throws an error? Let’s go ahead and reject the taco, and we’ll do it using the `Ember.RSVP.reject` shortcut, and we’ll create a catch function and see what that gives us. \r\n\r\n\r\nSo we can see several things from this result. The first is that the monsters and the worlds, they don’t load, even though as we can see here, the XHR, the ajax request, happened perfectly fine, but they’re not showing up because our promise, our hash, was rejected. We’ll also see that the rejected reason is given as ‘undefined’. That’s because we didn’t put anything in here. And now, it’ll say ‘Oops’ instead of ‘undefined’. \r\n\r\n\r\nSo this is using `hash` which has a fail-fast error handling. So if any of these fail, then it’s straight to the catch block for all of them. If we use `hashSettled`, then it’s a little bit different. So while the monsters and the worlds still don’t display, it gives us the response in the `.then` \r\n\r\n\r\nSo notice `the response was` is the log that we have in the `.then`, not in the `.catch`. And then this object, it has stuff for the monsters, the taco, and the worlds. One thing you’ll notice is that each of these, so taco, it’s in the state ‘rejected’ and the reason given is ‘Oops’, and worlds will be in the state ‘fulfilled’ and it has a value of ‘all the worlds’.\r\n\r\n\r\nSo so far we’ve talked about `hash` and `hashSettled`, and as you can see there are a lot more. We did touch on briefly the `reject` method, and it has a companion method of `resolve`, so you can do `Ember.RSVP.resolve` to just send back a promise. Some other ones of note are the `all` and `allSettled`. So `all` just takes an array rather than object or a hash, like hash does. And then `allSettled` is the array equivalent of `hashSettled`. Also `map` is very similar to JavaScript map in that it does an action on each of the promises or each of the results of the promises that come in. \r\n\r\n\r\nSo that’s it for today. I hope you’ll join us next week as we go into other types of asynchronous abstractions like generators and Async/Await. I’ll see you then. \r\n", publish_date: "2015-11-27", links: "* [Ember.RSVP documentation](http://emberjs.com/api/classes/RSVP.html)\r\n", thumbnail_image: "Screenshot_2015-11-25_21.14.07.png", permalink: "95-multiple-concurrent-promises", free: false, difficulty: "intermediate", seconds: 326, wistia_embed: "<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script><div class=\"wistia_embed wistia_async_j1lxiukvjc\" style=\"height:528px;width:800px\">&nbsp;</div>", code: "We can use `.hash()` to wait on multiple promises and put them within an object.\r\n\r\n```js\r\n  model(){\r\n    return new Ember.RSVP.hash({\r\n        worlds: this.store.findAll('world'),\r\n        monsters: this.store.findAll('monster'),\r\n        taco: true\r\n    }).then((response)=>{\r\n      console.log('the response was', response)\r\n      return response\r\n    }).catch((reason)=>{\r\n      console.log(\"rejected\", reason)\r\n    })\r\n  }\r\n```\r\n\r\n`.all()` can be used to do the same thing but put the promises in an array.", guid: "249c11edc117870a6a77ae1b82e1b13988e3e1b9"},
  {title: "82 - Introduction to Services", video_url: nil, description: "Services were introduced in Ember 1.10, replacing and improving upon the common pattern of service controllers.  They’re incredibly useful for connecting to third-party APIs, connecting disparate parts of your application, and storing state that should survive route changes but not be saved to the server.\r\n\t\r\nIn this video we create a Service, then share that Service and its state between a Controller, a Model, and a Component by injecting it into all three.\r\n", transcript: "Services were introduced to Ember in 1.10, and they’ve become very, very important since then. So a service is an Ember object that sticks around for the life of the application, and it can store state and you can access it in almost any part of the application easily, just by injecting it. \r\n\r\n\r\nHere are some of the things that the core team thinks that you might use services for. These all look like great episode ideas, so if you want to see one of them in particular, go ahead and put it down in the comments. \r\n\r\n\r\n![1 Webpage for services in Ember](/content/images/2015/10/1-4.jpg)\r\n\r\n\r\nIn this episode we’ll be talking about the basics, and then in future episodes we will definitely be going over user and session authentication. \r\n\r\n\r\nSo today we’ll be working with a Monster Card collection app, where we have a bunch of monster cards and we want to assemble a team out of some of them.\r\n\r\n\r\n![2 Monster Cards webpage](/content/images/2015/10/2-3.jpg)\r\n\r\n\r\nSo we’ll be going through multiple URLs, multiple routes, but we’ll want to keep the same state throughout all of that, and so that makes this a good use for a service. \r\n\r\n\r\nWe’ll go ahead and generate a service called the `current-team`.\r\n\r\n\r\n![3 Generate service called current-team](/content/images/2015/10/3-4.jpg)\r\n\r\n\r\n This is what was generated for us. Notice it extends of `Ember.Service`.\r\n\r\n\r\n![4 Ember.Service.Extend](/content/images/2015/10/4-3.jpg)\r\n\r\n\r\nSo for our team of monsters we’ll need a list of monsters. It’ll start off by default as just an empty array. Then we’ll need methods that add and remove the monster. So we’ll just `pushObject` to the array and `removeObject` from the array. Later we’ll need methods that check whether the monster is already included in the array and whether the team is full, full being having six monsters already. So we’ll go ahead and add those. \r\n\r\n\r\nWe’ll also add an `if` check to see if the team is full, and if it is, we’ll give an alert instead of adding that monster. So there’s our first service.\r\n\r\n\r\n![5 Methods to add/remove monsters to team, check if monster is already included, and check if team is full](/content/images/2015/10/5-3.jpg)\r\n\r\n\r\nNotice it’s laid out just like any other `Ember.Object`, but the important thing isn’t understanding what this particular service does, it’s how we’re going to use it in the rest of the app. \r\n\r\n\r\nSo first, we’re going to want to display the monsters team here, \r\n\r\n\r\n![6 Display of monsters team](/content/images/2015/10/6-3.jpg)\r\n\r\n\r\nso we’ll want to access it in the `team-lineup` component. How we do that is we’re going to create the `currentTeam` variable, do `Ember.inject.service`, and so what that’s going to do is that’s going to find the service called `currentTeam` and it’ll know to take that camelcase and turn it into dash case, and it will inject that there so we can access that service from this component.\r\n\r\n\r\n![Implementing code in team-lineup.js](/content/images/2015/10/7-3.jpg)\r\n\r\n\r\nNotice if we want to call it something else like `monsterTeam`, we can still do that. We’d have to give the name of the service as an argument, \r\n\r\n\r\n![Giving the name of the service as an argument to Ember.inject.service()](/content/images/2015/10/8-2.jpg)\r\n\r\n\r\nbut we’ll go ahead and stick with `currentTeam` for now. So we got the `currentTeam` service injected into the `team-lineup` component. Let’s go ahead and use that in our template. So we’ll loop through that. So we get the `currentTeam` and then grab the list of monsters off of there and loop through them. Then for now we’ll just display it whole and put them each in a list item, since they’re part of a list.\r\n\r\n\r\n![Using <li> and </li> to display monsters in the monster list](/content/images/2015/10/9-2.jpg)\r\n\r\n\r\nAnd we’ll go ahead and give the `currentTeam` some seed data. Once again these will soon be full objects, but we’re just showing that it works. \r\n\r\n\r\n![Code for the current-team.js file](/content/images/2015/10/10-2.jpg)\r\n\r\n\r\nAnd there we go. \r\n\r\n\r\n![Webpage displaying monster cards collection](/content/images/2015/10/11-2.jpg)\r\n\r\n\r\nSo we have our service being injected into the component and displaying its data. Next we’ll make this ‘Add Team’ button work so it will actually add stuff to the current team. \r\n\r\n\r\nTo prepare for that, we’ll go ahead and remove this seed data from the monsters hash since we’ll be putting in real objects. \r\n\r\n\r\n![Removing seed data from the monsters hash in current-team.js](/content/images/2015/10/12-2.jpg)\r\n\r\n\r\nAnd then we’ll go ahead and put in a much more complete styling here, a much more complete template. \r\n\r\n\r\nSo now the `current-team` service\r\n\r\n\r\n![12 code for the current-team service](/content/images/2015/10/12a.jpg)\r\n\r\n\r\nand the `team-lineup` component \r\n\r\n\r\n![13 code for the team-lineup component](/content/images/2015/10/13-2.jpg)\r\n\r\n\r\nare ready for the ‘Add Team Member’ button. To make that work we need to go to our `controllers`, `monster` , `monster` controller, and then we have to inject the service. \r\n\r\nNotice this is just like how we injected the service on the `team-lineup` component. So now, just like in the `team-lineup` component, the `currentTeam` service is available for use. Now we just have to add the `add` action to this controller, and it’ll grab the `currentTeam` service and use that `add` action, \r\n\r\n\r\n![Adding the 'add' action to monster.js code](/content/images/2015/10/14-2.jpg)\r\n\r\n\r\nand then we’ll put the `add` action in this controllers template. \r\n\r\n\r\n![Putting an 'add' action into the monsters.hbs code](/content/images/2015/10/15-2.jpg)\r\n\r\n\r\nNow we can start building our team. \r\n\r\n\r\n![16 Building monsters team](/content/images/2015/10/16-2.jpg)\r\n\r\n\r\nThere are a couple of problems though. First, you can keep on adding the same monster to your team, and you don’t want that. You only want one of each monster per team. \r\n\r\n\r\n![17 Adding same monster repetitively to same team](/content/images/2015/10/17-2.jpg)\r\n\r\n\r\nWe’ll solve this problem by going to the `monster` model, then we’ll inject the service here. Yes, you can inject service onto models as well, and we’ll use that to create the `onTeam` property, which tells you if this particular monster is already on your team. It does that by watching the monsters hash and then checking whether it includes the current monster. \r\n\r\n\r\n![using .includes(this) to check whether a monster is already on a team](/content/images/2015/10/18-1.jpg)\r\n\r\n\r\nSo here’s how we’ll start off using this. We’ll go to the template of the monsters controller, and we see that we have the button showing at all times now. But here we can go and create an `if` statement, so `if` it’s `onTeam`, it’ll show something else. \r\n\r\n\r\n![19 Already on team! notification](/content/images/2015/10/19-1.jpg)\r\n\r\n\r\nNow when we add a Zombird, you can only add it once. \r\n\r\n\r\n![20 Already on team! notification](/content/images/2015/10/20-1.jpg)\r\n\r\n\r\nSo these are the basics of having this service, but there are two quick little features that’ll make it even nicer. One is to reuse the `onTeam` property and work to style the card differently when it’s already on the team. We’ll do that both in the monster controller \r\n\r\n\r\n![monster.hbs code](/content/images/2015/10/21-1.jpg)\r\n\r\n\r\nas in the monsters plural controller. \r\n\r\n\r\n![monsters.hbs code](/content/images/2015/10/22-1.jpg)\r\n\r\n\r\nThen we’ll go to our browser and we’ll see that it’s changing how it’s styled, so we can tell which monsters are on our team so we don’t accidentally click on them again. \r\n\r\n\r\n![23 Styling monsters to determine which are already selected in team](/content/images/2015/10/23-1.jpg)\r\n\r\n\r\nThe second addition is a remove button, so we’ll add a `remove` action on the monsters controller, which calls the `remove` action, the `remove` method on `currentTeam`.  \r\n\r\n\r\n![monster.js code](/content/images/2015/10/24-1.jpg)\r\n\r\n\r\nAnd then in the monster template, we’ll create a button where you can call the `remove` action. \r\n\r\n\r\n![Adding code to monster.hbs which implements a 'remove' button](/content/images/2015/10/25-1.jpg)\r\n\r\n\r\nSo then when we add it, we can remove it again. \r\n\r\n\r\n![26 Displays the ‘Remove from Team’ button](/content/images/2015/10/26-1.jpg)\r\n\r\n\r\nSo in order to make this feature, we created a service. This service was a `currentTeam` service, and we did it by extending the `Ember.Service` object.\r\n\r\n\r\n![Ember.Service contained in the current-team.js file](/content/images/2015/10/27.jpg)\r\n\r\n\r\nThen in three different places we injected this service. We did it in the model, \r\n\r\n\r\n![Injecting the service into the monster.js model code](/content/images/2015/10/28.jpg)\r\n\r\n\r\nwe did it in the `monster` controller, \r\n\r\n\r\n![Injecting the service into the monster.js controller code](/content/images/2015/10/29.jpg)\r\n\r\n\r\nand then in the `team.lineup` component. \r\n\r\n\r\n![Injecting the service into the team-lineup.js code](/content/images/2015/10/30.jpg)\r\n\r\n\r\nIn each of them, we used `Ember.inject.service`. So each of these was accessing the same service, and that same service had the same data. It was a singleton. \r\n\r\n\r\nSo in the `monster` controller, you could add and remove stuff from there, \r\n\r\n\r\n![monster.js controller code](/content/images/2015/10/31.jpg)\r\n\r\n\r\nand then in the `team.lineup` you could loop through every monster in the list. \r\n\r\n\r\n![Code for looping through the monster list](/content/images/2015/10/32.jpg)\r\n\r\n\r\nAnd then in the `monster` model, you’re checking whether that monster was on the list or not.\r\n\r\n\r\n![.includes(this) code, which checks whether a monster is on the list or not](/content/images/2015/10/33.jpg)\r\n\r\n\r\nWithout services this would have been pretty difficult to coordinate, because you can’t necessarily have all these things talking with each other easily. So we have a service that stores all this data and then everything else is accessing it. \r\n\r\n\r\nIn this week’s pro episode, we’ll be seeing another use case of this with a current user and a session service. I’ll see you then.\r\n", publish_date: "2015-10-14", links: "* [Blog post introducing service injection](http://emberjs.com/blog/2015/02/07/ember-1-10-0-released.html#toc_injected-properties)\r\n* [Ember 2.1 Guides for Services](http://guides.emberjs.com/v2.1.0/applications/services/)", thumbnail_image: "Screenshot_2015-10-06_16.28.08.png", permalink: "82-introduction-to-services", free: true, difficulty: "intermediate", seconds: 444, wistia_embed: "<div id=\"wistia_tjmxdhajft\" class=\"wistia_embed\" style=\"width:800px;height:528px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"82-intro-to-services\" /><meta itemprop=\"duration\" content=\"PT7M24S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/46e3329577daddfb624a36108beb6c5ac398acb7.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/d711ad844d3352c82757b0a310ac0fe28f377ee2.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=31372863&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F08b2d5efa35066fc3b51317d2ce8ada70c426827.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=444.125&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F46e3329577daddfb624a36108beb6c5ac398acb7.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fd711ad844d3352c82757b0a310ac0fe28f377ee2.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-10-07T16:33:55Z\" /><object id=\"wistia_tjmxdhajft_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:500px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=31372863&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F08b2d5efa35066fc3b51317d2ce8ada70c426827.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=444.125&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F46e3329577daddfb624a36108beb6c5ac398acb7.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fd711ad844d3352c82757b0a310ac0fe28f377ee2.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=31372863&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F08b2d5efa35066fc3b51317d2ce8ada70c426827.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=444.125&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F46e3329577daddfb624a36108beb6c5ac398acb7.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fd711ad844d3352c82757b0a310ac0fe28f377ee2.bin\" name=\"wistia_tjmxdhajft_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">82-intro-to-services</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"tjmxdhajft\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/tjmxdhajft/metadata.js\"></script>", code: "Create the service\r\n\r\n```js\r\n//services/current-team.js\r\n\r\nexport default Ember.Service.extend({\r\n  monsters: [],\r\n  add(monster){\r\n    if(this.get(\"fullTeam\")){\r\n      alert('Team is full. Remove a monster to add another.')\r\n    } else {\r\n      this.get('monsters').pushObject(monster)\r\n    }\r\n  },\r\n  remove(monster) {\r\n    this.get('monsters').removeObject(monster);\r\n  },\r\n  includes(monster){\r\n    return this.get('monsters').includes(monster)\r\n  },\r\n  fullTeam: Ember.computed.gte('monsters.length', 6)\r\n});\r\n```\r\n\r\nInject it in several different places\r\n\r\n```js\r\n//controllers/monsters/monster.js\r\n\r\nexport default Ember.Controller.extend({\r\n  currentTeam: Ember.inject.service(),\r\n  actions: {\r\n    add(){\r\n      this.get(\"currentTeam\").add(this.get(\"model\"))\r\n    },\r\n    remove(){\r\n      this.get(\"currentTeam\").remove(this.get(\"model\"))\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n```js\r\n//models/monster.js\r\n//...\r\ncurrentTeam: Ember.inject.service(),\r\nonTeam: Ember.computed('currentTeam.monsters.[]', function(){\r\n  return this.get('currentTeam').includes(this);\r\n})\r\n```\r\n\r\n```js\r\n//components/team-lineup.js\r\nexport default Ember.Component.extend({\r\n  currentTeam: Ember.inject.service(),\r\n  teamMembers: Ember.computed.alias('currentTeam.monsters')\r\n});\r\n```", guid: "bf2f9f6245722626c64b91410077f5dc4356282b"},
  {title: "69 - Custom Validators with Multiple Keys", video_url: "", description: "Having a validator that just relies on one property isn't cool.  You know what's cool?  Relying on two properties.  Even three properties.\r\n  \r\nember-validations lets you be cool, using dependentValidationKeys.", transcript: "null", publish_date: "2015-08-28", links: "* [ember-validations library](https://github.com/dockyard/ember-validations)\r\n* [Github diff for xor validator](https://github.com/jeffreybiles/simpler-ember-sparks-website/commit/1a254651bd3fef92778a05334ef5ccbf406daa34)", thumbnail_image: "Screen_Shot_2015-08-18_at_9.38.42_PM.png", permalink: "69-custom-validators-with-multiple-keys", free: false, difficulty: "advanced", seconds: 295, wistia_embed: "<div id=\"wistia_zu9vxzedai\" class=\"wistia_embed\" style=\"width:800px;height:478px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"zu9vxzedai\");\r\n</script>", code: "You want to display an error if one or the other checkboxes is checked, but not both:\r\n\r\n```hbs\r\n<p>Boolean logic, that'll catch'em!</p>\r\n{{input type='checkbox' checked=xor1}} xor {{input type='checkbox' checked=xor2}}\r\n{{display-errors errors=errors.xor showErrors=showErrors}}\r\n```\r\n\r\nSo you set the validation to xor, giving it two different keys\r\n\r\n```js\r\nvalidations: {\r\n  xor: {\r\n    xor: {key1: 'xor1', key2: 'xor2'}\r\n  }\r\n}\r\n```\r\n\r\nThen you create the xor validator.  Note we're pushing objects onto the `dependentValidationKeys` array.\r\n\r\n```js\r\nimport Base from 'ember-validations/validators/base';\r\n\r\nexport default Base.extend({\r\n  init: function(){\r\n    this._super()\r\n\r\n    this.dependentValidationKeys.pushObject(this.options.keyOne);\r\n    this.dependentValidationKeys.pushObject(this.options.keyTwo);\r\n  },\r\n  call: function(){\r\n    var one = this.model.get(this.options.keyOne)\r\n    var two = this.model.get(this.options.keyTwo)\r\n    if((one && two) || (!one && !two)){\r\n      this.errors.pushObject('Must be one or the other')\r\n    }\r\n  }\r\n});\r\n```\r\n\r\nThe more general case (Select X of the options) can be found [here](https://github.com/jeffreybiles/simpler-ember-sparks-website/commit/2745d1510ddcd7c4e407fdbf953798b80ff1568e)", guid: "9f0f5576f56637d27194206b0282059db276f50e"},
  {title: "65 - Displaying Validation Errors", video_url: "", description: "Validation errors are far more useful if you can show them to your users.\r\n  \r\nIn this screencast we look at two different strategies- flash messages and inline messages.", transcript: "null", publish_date: "2015-08-14", links: "* [Check out emberscreencast episode 64](https://www.emberscreencasts.com/posts/64-form-validation-with-ember-validations)\r\n* [ember-cli-flash episode](https://www.emberscreencasts.com/posts/57-ember-cli-flash)\r\n* [GitHub diff for flash messages](https://github.com/jeffreybiles/simpler-ember-sparks-website/commit/398cb8dba453466832bda1c5e916ed050130fccb)\r\n* [GitHub diff for inline messages](https://github.com/jeffreybiles/simpler-ember-sparks-website/commit/acb073f073df1f715faf7ab1c3b3913cc8babc79)", thumbnail_image: "Screen_Shot_2015-08-10_at_10.33.39_AM.png", permalink: "65-displaying-validation-errors", free: false, difficulty: "intermediate", seconds: 369, wistia_embed: "<div id=\"wistia_qk2p13cj1g\" class=\"wistia_embed\" style=\"width:800px;height:478px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"qk2p13cj1g\");\r\n</script>", code: "Display errors in flash messages:\r\n\r\n```js\r\nactions: {\r\n  save(){\r\n      //...\r\n      this.validate().then(()=>{\r\n        model.save().then(()=>{\r\n          this.transitionToRoute('post.show', model)\r\n        })\r\n      }).catch(()=>{\r\n        var errorHashes = this.get('errors.model')\r\n        var errorKeys = Object.keys(errorHashes)\r\n        this.get('flashMessages').clearMessages()\r\n        errorKeys.forEach((key)=>{\r\n          errorHashes[key].forEach((error)=>{\r\n            this.get(\"flashMessages\").danger(`${key} ${error}`, {sticky: true})\r\n          })\r\n        })\r\n        console.log(this.get(\"errors\"), errorKeys)\r\n      })\r\n  }\r\n}\r\n```\r\n\r\nYou can also display errors inline.  Here's a `display-errors` component you can use:\r\n\r\n```hbs\r\n{{#if showErrors}}\r\n  {{#each errors as |error|}}\r\n    <p style=\"color: red;\">{{error}}</p>\r\n  {{/each}}\r\n{{/if}}\r\n```\r\n\r\nAnd here is it being used in a template:\r\n\r\n```hbs\r\n<p>Title: {{input value=model.title}}</p>\r\n{{display-errors errors=errors.model.title showErrors=showErrors}}\r\n\r\n<p>Length (in seconds): {{input value=model.seconds}}</p>\r\n{{display-errors errors=errors.model.seconds showErrors=showErrors}}\r\n```\r\n\r\nThe showErrors attribute usually starts off false, but then is turned to true when validation fails.", guid: "abb2f1b29e239c98f363d9d7710269c43bd4bfc6"},
  {title: "53 - dragEnter and dragLeave", video_url: "", description: "Our drag and drop from episode 51 is functional, but it isn't very clear how to use it.\r\n  \r\nIn this episode we'll combine the dragEnter and dragLeave events with some css in order to improve the experience and make it more obvious when you're supposed to drop your file.\r\n", transcript: "null", publish_date: "2015-07-05", links: "* [Episode 51- drag and drop file upload](https://www.emberscreencasts.com/posts/51-drag-and-drop-with-file-uploads)\r\n* [Github diff](https://github.com/jeffreybiles/simpler-ember-sparks-website/commit/733350a95d73db915509bed85cf620cecca672fb)", thumbnail_image: "Screenshot_2015-07-02_11.14.56.png", permalink: "53-dragenter-and-dragleave", free: false, difficulty: "intermediate", seconds: 158, wistia_embed: "<div id=\"wistia_te2sutsq00\" class=\"wistia_embed\" style=\"width:800px;height:500px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"te2sutsq00\");\r\n</script>", code: "", guid: "156bd2b23d0a01eccd1a18f9fa5759779c69a094"},
  {title: "81 - Load Data with Instance Initializers", video_url: nil, description: "Instance Initializers were introduced in Ember 1.12.  By using them you can speed up testing and fastboot.\r\n\r\nLearn about the differences between Instance Initializers and Application Initializers, and see how to load custom config data from the server using an Instance Initializer.", transcript: "Hey and welcome back to EmberScreencast. Last time we introduced initializers, specifically application initializers. This time we’re going to introduce instance initializers, and we’ll see how we can load some data before the code even loads. \r\n\r\nHere are some of the differences, and we’ll be looking into more of these as we go to our example. So application initializers have been around a lot longer, whereas instance initializers were introduced in 1.12. Application initializers are more flexible, whereas instance initializers, they’re useful for when you’re testing or when you’re running fastboot. They can save you time. The function in the initialize function, it’s called differently. Application initializer has a container and an application, whereas the function instance initializers just give you application as an argument. Application initializers are run first, and instance initializers are run after all the application initializers are run. Application initializers are run once per app boot, whereas instance initializers are run over and over again every time it’s initialized, and that difference comes to the fore when you’re doing testing and when you’re doing fastboots. So instance initializers, they run every single test, whereas application initializers they just run once at the beginning of the test suite, and the same for when you’re doing fastboot. So fastboot can customize stuff for each individual person in the instance initializers, whereas the application initializers they’re going to have the more general stuff, the code loading. And lastly, application initializers can defer readiness, and instance initializers cannot.\r\n\r\n![differences between application initializers and instance initializers](/content/images/2015/10/1-3.jpg)\r\n\r\nNow we’ll go back to our example, Accessor.ly, where we have a list of items and it creates stuff for each item that we can mess around with.\r\n\r\n![Accessor.ly](/content/images/2015/10/2-2.jpg)\r\n\r\nNow this list of items is currently just given as a list of different types of accessories that we can use, \r\n\r\n![different types of accessories](/content/images/2015/10/3-2.jpg)\r\n\r\nbut what if we wanted to have that list in multiple places within the application, or later what if we wanted to load it from the server? Instance initializers let us do that. \r\n\r\nSo this is our instance initializer. Notice it goes in the `instance-initializers` folder instead of the `initializers` folder. \r\n\r\n![instance initializer](/content/images/2015/10/4-2.jpg)\r\n\r\nIt looks a little bit different than what we saw last time although it’s definitely building off of it. Let me explain those differences. First, I generate this with `ember.cli`, and so it created the `initialize` function separately from the initializer that it’s exporting. And then as you see it takes that `initialize` function, puts it down here under the `initialize` key. So that looks different, it’s really the same. \r\n\r\nThe next thing is that, as we said before, instead of `container` and `application`, it’s just `application`, and then we do `application.container.register` and `application. registry.injection`. So in instance initializers, well before you could do `application.register` and `application.inject`, but those APIs have changed. So this for resgistering and this for injecting. The other parts of the APIs have stayed the same. The arguments that you give it are the exact same. Here you can see we made up something called `stuff:global`  because it requires a name, a colon, and another name. So we just made that up and we stuck our `GlobalConfig` in it. \r\n\r\nAnd notice the second argument to the register if we try to just feed it this array, it wouldn’t work. It has to be an `Ember.Object`, something like this. So we create an `Ember.Object` that currently just has one property, and that’s `accessoryTypes`, and that’s where we’re sticking our list of accessories.\r\n\r\nGoing back to our controller, \r\n\r\n![controller screen](/content/images/2015/10/5-2.jpg)\r\n\r\nwe need to figure out how to get that list out of the `GlobalConfig` and into our controller. So here we're doing an `Ember.computed.alias`, and we have access to `global` and then we’ll be doing the `accessoryTypes`, so we’ll get the `accessoryTypes` property on this `GlobalConfig`.\r\n\r\n![Ember.computed.alias(global.accessoryTypes)](/content/images/2015/10/6-2.jpg)\r\n\r\nSo we have `hats` and `boots`, and `caps`. Let’s go ahead and add one. We’ll add `scarves` back,\r\n\r\n![adding scarves](/content/images/2015/10/7-2.jpg)\r\n\r\nand we can see that when we reload, it’s getting the scarves.\r\n\r\n![scarves in Accessor.ly page](/content/images/2015/10/8-1.jpg)\r\n\r\nSo it’s picking it up from this `custom-config`. But we want to go farther. We want to pick up stuff from the server.\r\n\r\nHere’s our server side template.\r\n![server side template](/content/images/2015/10/9-1.jpg)\r\n\r\nSo as you can see, in `data-globals` were putting a hash that contains an array under the key accessories. So this will be our `globals` hash and then we’ll get the `accessories` from it. We can get other things from it later.\r\n\r\nSo here in `Global.Config`, we’ll start by getting the data from `globals`. We’ll use `jquery` to grab the `global-stash` div, and then we’ll get the data from it that’s in `data(‘globals’)`.\r\n\r\n![getting data from globals](/content/images/2015/10/10-1.jpg)\r\n\r\nSo `globals` is just going to be in JavaScript object, and it’ll be the one we have in here, which in this case is a hash, a hash that has the `accessories` key on it.\r\n\r\n![hash that has accessories, shoes, socks, and boots](/content/images/2015/10/11-1.jpg)\r\n\r\nSo we’ll take advantage of that and use `Ember.computed.alias` to get that key off of there, to get the value for that key.\r\n\r\n![12](/content/images/2015/10/12-1.jpg)\r\n\r\nSo then we take this to our client and we reload and it is getting the stuff off of the server instead of the stuff we had before. \r\n\r\n![Accessor.ly page](/content/images/2015/10/13-1.jpg)\r\n\r\nNow we’re going to take this just one step further and this is being done in Rails, but there’s similar stuff you can do in any server side framework.\r\n\r\nSo we’re going to take our `accessories` and we’re going to get it from the `controller`. And so right now it’s being defined just as an array, but this could easily be pulled from the database or calculated based on what the user is doing.\r\n\r\n![14](/content/images/2015/10/14-1.jpg)\r\n\r\nSo of course this also works, and in Rails it works pretty magically getting the JSON correct. In other frameworks you may have a bit more difficult time, but hopefully you won’t.\r\n\r\nSo there you go. We’re taking a `config` all the way from your server side controller\r\n\r\n![server side controller](/content/images/2015/10/15-1.jpg)\r\n\r\nthrough your server side template,\r\n\r\n![server side template](/content/images/2015/10/16-1.jpg)\r\n\r\nwe’re loading it up in an instance initializer and then we’re using it in our controller.\r\n\r\n![17](/content/images/2015/10/17-1.jpg)\r\n\r\nNow you may be wondering, why don’t we just grab it through `ajax` on the controller instead of doing an instance initializer. And that is a possibility, but I have done that, and it can take a little bit of time each time you load that controller, and that messes with the user’s flow. It’s especially bad if, in the case that I was using it, I was getting the options for a select box. And so select boxes wouldn’t be working for a little while, and this was especially bad because one might have been already selected and their select boxes would be changing midstream while they’re working on their form. The instance initializer approach avoids all that and it means you only have to load it once.\r\n\r\nSo I hope this helps you when you’re trying to decide when you should use an instance initializer and when you should use an application initializer. I know I learned a lot making this, so go out and initialize.\r\n\r\n\r\n\r\n", publish_date: "2015-10-09", links: "* [Blog post introducing instance initializers](http://emberjs.com/blog/2015/05/13/ember-1-12-released.html)\r\n* [API docs for instance initializers](http://emberjs.com/api/classes/Ember.Application.html#method_instanceInitializer)", thumbnail_image: "Screenshot_2015-09-26_20.00.53.png", permalink: "81-load-data-with-instance-initiliazers", free: false, difficulty: "advanced", seconds: 421, wistia_embed: "<div id=\"wistia_7howxrhawa\" class=\"wistia_embed\" style=\"width:800px;height:528px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"7howxrhawa\");\r\n</script>", code: "```js\r\n//instance-initializers/load-custom-config.js\r\nvar GlobalConfig = Ember.Object.extend({\r\n  globals: Ember.computed(function(){\r\n    return $('#global-stash').data('globals')\r\n  }),\r\n  accessoryTypes: Ember.computed('globals', function(){\r\n    return this.get(\"globals.accessories\")\r\n  })\r\n})\r\n\r\nexport function initialize(application) {\r\n  application.container.register('stuff:global', GlobalConfig)\r\n  application.registry.injection('controller', 'global', 'stuff:global')\r\n}\r\n\r\nexport default {\r\n  name: 'load-custom-config',\r\n  initialize: initialize\r\n};\r\n```\r\n\r\n```erb\r\n//in server template\r\n<div id=\"global-stash\"\r\n        data-globals='{\"accessories\": [\"hats\", \"boots\"]}'>\r\n</div>\r\n```\r\n\r\n```js\r\n//used in a controller\r\nitems: Ember.computed.alias('global.accessoryTypes')\r\n```", guid: "0c8f549c4fe780106e7b6533d954af9e6b21e1ee"},
  {title: "78 - Closure Actions In Ember 2.0 Components - Return Value", video_url: "", description: "Actions used to be really different than functions, but Ember 1.13’s closure actions have narrowed that gap.  \r\n\r\nOne new lack­ of ­difference is return values.\r\n\r\nReturn values make all sorts of things easier.  We give two examples in this video, one of which goes into depth.", transcript: "Today we’re going to be looking at another aspect of closure actions, and that aspect is how they can return a value. We’ll see some situations that can be useful in.\r\n![Closure actions documentation on emberjs.com](/content/images/2015/09/1-1.jpg)\r\nSo we have our site, Accessor.ly, and we can change the color of different accessories. What we want to do is add a feature where it flashes when we select an accessory of the same color as a previous accessory. \r\n![picture of Accessor.ly website](/content/images/2015/09/2-1.jpg)\r\nWe’ll provide the flashing effect with `jquery-ui`. \r\n![webpage for 'ember-cli-jquery-ui](/content/images/2015/09/3-2.jpg)\r\nWe’ll add in a `class` with the color name, since this is `jquery` and that's what it needs.\r\n![adding 'color' class to the template file](/content/images/2015/09/4-2.jpg)\r\nIf we had a component for the `button`, then we could do something more Ember-y. \r\n\r\nThen, after we change the item color, we’ll find that button then apply the `pulsate` effect on it with `jquery.ui`.\r\n![inserting code for the 'pulsate' effect](/content/images/2015/09/5-1.jpg)\r\nThis is what the effect looks like. But as you can see, it applies the effect no matter what the color is, whether it’s matching or not, and we want it to do it only when it’s matching. This is where `return` values can help us.\r\n\r\nSo we’re going to write the rest of this function as if it’s already returning a `return` value, and then we’ll see what we need to do to make that actually happen.\r\n![code for the component.js file](/content/images/2015/09/6-1.jpg)\r\nSo here in our `changeItem` action, it gives a `return` value, just like a regular function would, and this `return` value will be \r\nanother method `matchesAnotherItem` that we’ll write right now.\r\n\r\nSo some interesting things about this are that we’re writing it just like another function. So the mental model is way more similar than the previous one of passing up the action string. And the actual details of this aren’t super interesting. It’s just checking to make sure that there’s another item that has that same color. \r\n![contoller.js code.](/content/images/2015/09/7-1.jpg)\r\nSo does this work? Let’s find out. \r\n\r\nIt doesn’t flash when we have an unmatching item, and it does flash when we have a matching item, so our `return` values are working great. \r\n\r\nBefore we move on some other applications, I want to review how the `return` value works. So you have this action which is just a regular function now and it has a `return` value, \r\n!['action' code from the contoller.js file, which has a return value](/content/images/2015/09/8-1.jpg)\r\nand then when you call that function, you can get the `return` value. \r\n![component.js code which shows the return value of the action code from the controller.js file](/content/images/2015/09/9-1.jpg)\r\nSo there’s nothing new here. The only new thing is that you’re not as limited as you were before, and this opens up some great possibilities. \r\n\r\nLet’s say that the function being passed down is the `save` function. Now the `save` function, it normally returns a promise, and with `return` values, now you can do that. You can have promise handling on your lower components without breaking data-down/actions-up.\r\n![component.js code](/content/images/2015/09/10-1.jpg)\r\nSo that’s return values and closure actions, and I’m sure you can think of a lot more possibilities for your own apps, since you’re already used to thinking in functions, and this is much more intuitive than doing the string passing that was `actions` previously.\r\n\r\nSo in this week’s pro-episode, we'll be talking about how to use `block` components and how to pass actions through there, and we can do some really cool effects, like here we have a collapsible box, that wraps around our previous stuff.\r\n![Accessor.ly webpage with collapsible boxes implemented.](/content/images/2015/09/11-1.jpg)\r\nI look forward to seeing you then.\r\n", publish_date: "2015-09-30", links: "* [Official blog post introducing closure actions](http://emberjs.com/blog/2015/06/12/ember-1-13-0-released.html#toc_closure-actions)\r\n* [Blog post on nuances of return values in closure actions](http://alisdair.mcdiarmid.org/ember-closure-actions-have-return-values/)", thumbnail_image: "Screenshot_2015-09-20_15.02.59.png", permalink: "78-closure-action-in-ember-20-components-return-values", free: true, difficulty: "intermediate", seconds: 196, wistia_embed: "<div id=\"wistia_jgtagvr6lh\" class=\"wistia_embed\" style=\"width:800px;height:528px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"78-closure-actions-in-ember-2-0-components-return-values\" /><meta itemprop=\"duration\" content=\"PT3M16S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/e4bda6bf026c6da50f1d5e978c347a52f05d3ed0.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/e363df8bfababc70b921197c93505f3b597111f9.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=17195702&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Faf66560b7afc949134e344df718e537b7bd83234.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=196.298&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fe4bda6bf026c6da50f1d5e978c347a52f05d3ed0.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fe363df8bfababc70b921197c93505f3b597111f9.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-09-29T17:35:01Z\" /><object id=\"wistia_jgtagvr6lh_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:500px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=17195702&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Faf66560b7afc949134e344df718e537b7bd83234.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=196.298&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fe4bda6bf026c6da50f1d5e978c347a52f05d3ed0.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fe363df8bfababc70b921197c93505f3b597111f9.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=17195702&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Faf66560b7afc949134e344df718e537b7bd83234.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=196.298&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fe4bda6bf026c6da50f1d5e978c347a52f05d3ed0.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fe363df8bfababc70b921197c93505f3b597111f9.bin\" name=\"wistia_jgtagvr6lh_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">78-closure-actions-in-ember-2-0-components-return-values</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"jgtagvr6lh\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/jgtagvr6lh/metadata.js\"></script>", code: "```js\r\n//in components/color-selector/component.js\r\nactions: {\r\n  changeItem(color){\r\n    var matches = this.attrs.changeItem(color)\r\n    if(matches){\r\n      this.$(`.${color}`).effect('pulsate')\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n```js\r\n//in demonstrations/actions/controller.js\r\nactions: {\r\n  changeItem(itemIndex, newColor){\r\n    this.set(`itemDetails.${itemIndex}.itemColor`, newColor)\r\n    return this.matchesAnotherItem(itemIndex)\r\n  }\r\n}\r\n```", guid: "9c662add613e4c460c08d41152a660870676a001"},
  {title: "75 - Actions and Components in Ember 1.x", video_url: "", description: "Learn how actions are passed from and between components in Ember 1.x.\r\n  \r\nAlthough some of this is superseded by closure actions, these methods are still possible in Ember 2.x, and are key to understanding legacy apps.", transcript: "In this episode, we’re going to be talking about how to pass actions from one component to another and eventually to a controller. This is how actions will pass through components all throughout the ember 1.x series, and you’re still allowed to do it in the ember 2.0 series. In newer apps, you’ll be wanting to do the ‘Closure Actions’ which we’ll be covering in the next episode and the episode after that. However, you’re still going to be seeing a lot of this old style, especially if you’re working on an older version of ember or working with the legacy app, so it pays to know it.\r\n\r\nSo where we last left our startup Hat.io,\r\n![](/content/images/2015/09/1.png)\r\n we had several buttons which they would send up actions and those actions would then put up a message. Now they want to expand their product line to more than just hats, so they’ll need to componentize all the logic they have here.\r\n![](/content/images/2015/09/2.png)\r\n\r\nSo just by copying and pasting, we can make it so it looks the same, and even the actions work, except they aren’t sending up and sending messages. Recall those messages were in the route, so these actions are not getting up to the route.\r\n \r\nSo the first thing to note is that these previous methods we used `this.send` and `return true`, those don’t work anymore. `this.send` we’ll replace with `this.sendAction`. So when we’re inside a component, we use `sendAction`, and then we’ll also have to connect it in the template. So here we’re going to take the `showModalDialog` action, and we’ll link it up like this, because remember, a component is its own encapsulated thing, and we have to poke little holes into it, and we’re going to have to poke holes into it for each one of these actions that we send up. So now when we press this button, it sends the `showModalDialog` action up to the controller, which then bubbles up to application route.\r\n\r\nFor the other two, here we’ll just change `send` to `sendAction`, and then we replace `return true` with `this.sendAction(‘takeOffHat’)`.\r\n![](/content/images/2015/09/4.png)\r\n\r\nThen we’ll poke two holes in the component, one for each of those actions that we’re sending up.\r\n![](/content/images/2015/09/5.png)\r\n\r\nIt is important to note that the thing on the left side `=` doesn’t have to be the same word as on the right side of the `=`. So the one on the left side is what’s used inside the component, and the string on the right is the action that will be passed to outside the component.\r\n![](/content/images/2015/09/6.png)\r\n\r\nWe can see that in the modal dialog component we had last time. So `close` is something that’s defined on the modal dialog, and then `closeModalDialog` is an action that we define that’s called whenever `close` is sent up. \r\n\r\nSo we originally wanted this so we could have different items than just hats. So with a snap we will make it generic. So you replaced all references of hat with item, and then we had an `itemName`, which in this case will be hat. But we case easily replicate this and make one for necklaces and shoes, so then we come in here \r\n![](/content/images/2015/09/7.png)\r\nand now we’ve greatly expanded our product line, and it’s all working great. This is all thanks to components and indirectly thanks to component actions.\r\n \r\nSo to review what we’ve done so far, here for the `putOnItem` action, we’re taking that action and then in the component, `putOnItem` is doing something and then it’s doing the `sendAction` of `pressRelease`. And then we’ve poked a hole. This hole, a `pressRelease` sized hole, into the control accessory component when we’re calling it. And then that bubbles up, and eventually hits this action in the route. But this action passing doesn’t have to be just between a component and a controller. It can also be between components. \r\nSo here we’re going to abstract away this\r\n![](/content/images/2015/09/8.png)\r\nand replace it with a `color-selector` component 04:16 passing it the `itemName`, the `itemColor`, and the action `putOnItem`.\r\n![](/content/images/2015/09/9.png)\r\n \r\nIn the color selector template, we’ll paste in what we copied from the previous one, and then in the component, the `putOnItem` action, we’ll just take the color and then pass on the `putOnItem` action up the line with the color as well. This sort of thing may seem wasteful and the exact sort of thing that ember is supposed to save you from. But, in the old days before closure actions, this is how you had to do it.\r\n \r\nSo in this episode we saw how to use actions in ember components in ember 1.x. We focused on poking holes in the component, and then using `sendAction` from an action in the component to push it up through those holes. So we are basically manually bubbling stuff up. Lots of times this works great, sometimes it can result in inefficiencies. We’ll see how those inefficiencies can be fixed in our next screencast where we look at ‘Closure Actions’. I’ll see you then.\r\n", publish_date: "2015-09-18", links: "* [Ember 1.12 guides- handling user interaction with actions](http://guides.emberjs.com/v1.12.0/components/handling-user-interaction-with-actions/)\r\n* [Ember 1.12 guides- sending actions from components](http://guides.emberjs.com/v1.12.0/components/sending-actions-from-components-to-your-application/)\r\n* [Screencast introducing actions](https://www.emberscreencasts.com/posts/72-introduction-to-ember-actions)", thumbnail_image: "Screenshot_2015-09-10_19.02.47.png", permalink: "75-actions-and-components-in-ember-1x", free: false, difficulty: "intermediate", seconds: 318, wistia_embed: "<div id=\"wistia_ab1db4myls\" class=\"wistia_embed\" style=\"width:800px;height:528px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"ab1db4myls\");\r\n</script>", code: "Send an action up from a component: \r\n\r\n```js\r\nthis.sendAction('actionName', arguments)\r\n```\r\n\r\nCatch in the component declaration: \r\n\r\n```hbs\r\n{{component-name actionSentUpFromComponent=\"nameOfActionInControllerOrParentComponent}}\r\n```\r\n\r\nIn demonstrations/actions/template.hbs\r\n\r\n```hbs\r\n{{control-accessory showModalDialog=\"showModalDialog\" pressRelease=\"pressRelease\" takeOffHat=\"takeOffHat\" itemName=\"hat\"}}\r\n{{control-accessory showModalDialog=\"showModalDialog\" pressRelease=\"pressRelease\" takeOffHat=\"takeOffHat\" itemName=\"necklaces\"}}\r\n{{control-accessory showModalDialog=\"showModalDialog\" pressRelease=\"pressRelease\" takeOffHat=\"takeOffHat\" itemName=\"shoes\"}}\r\n```\r\n\r\nIn components/control-accessory/component.js\r\n\r\n```js\r\nimport Ember from 'ember';\r\n\r\nexport default Ember.Component.extend({\r\n  hasItem: false,\r\n  itemColor: \"blue\",\r\n  colors: [\"blue\", \"red\", \"green\", \"purple\", \"orange\"],\r\n  actions: {\r\n    putOnItem(color){\r\n      this.set('itemColor', color)\r\n      this.set('hasItem', true)\r\n      this.sendAction('pressRelease')\r\n    },\r\n    takeOffItem(){\r\n      this.set('hasItem', false)\r\n      this.sendAction('takeOffItem')\r\n    },\r\n    howToRemoveItem(){\r\n      this.sendAction('showModalDialog', 'we realize it is difficult to remove our proprietary vicelok Items')\r\n    }\r\n  }\r\n})\r\n```\r\n\r\nIn components/control-accessory/template.hbs:\r\n\r\n~~~hbs\r\n{{#if hasItem}}\r\n  <p>You're wearing a <span style=\"color:{{itemColor}};\">{{itemColor}}</span> {{itemName}}.</p>\r\n\r\n  <button {{action 'takeOffItem'}}>Take off the {{itemName}} <button {{action 'howToRemoveItem' bubbles=false}}>How?</button></button>\r\n{{else}}\r\n  {{color-selector itemName=itemName itemColor=itemColor putOnItem=\"putOnItem\"}}\r\n{{/if}}\r\n~~~\r\n\r\nIn components/color-selector/template.hbs\r\n\r\n```hbs\r\nPut on a {{itemName}}:\r\n{{#each colors as |color|}}\r\n  <button {{action 'putOnItem' color}} style=\"color:{{color}};\">{{color}}</button>\r\n{{/each}}\r\n```\r\n\r\nIn components/color-selector/component.js\r\n\r\n```js\r\nexport default Ember.Component.extend({\r\n  colors: [\"blue\", \"red\", \"green\", \"purple\", \"orange\"],\r\n  actions: {\r\n    putOnItem(color){\r\n      this.sendAction('putOnItem', color)\r\n    }\r\n  }\r\n});\r\n```", guid: "dcb8baa1fe7ab6db9ddeb6a62be47f01be376f62"},
  {title: "74 - ember-modal-dialog", video_url: "", description: "A modal dialog box is a common UI pattern.  The ember-modal-dialog addon makes creating that pattern easy!\r\n  \r\nIn this video we learn how to install the addon, create modals both in specific controllers and in the application route, and apply different configurations and styles to make it look how we want.", transcript: "Hi, and welcome back to Ember Screencasts. Today we’ll be covering the `ember-modal-dialog` add-on.  I’m covering this add-on for three reasons. First and most important to anyone watching in the future, is because it’s an awesome add-on that lets you easily implement a common feature. Second, is because that feature works well with the action sequence that we’ve been doing, and we can make it replace the alert boxes. Third,  because it’s delaying a tactic that lets me have an extra week to properly figure out closure actions, because those are a big change. I want to make sure I get it right for you guys.\r\n \r\nSo currently when we’re wanting to send a message to the user, we use an alert box. \r\n![Alert box demonstration](/content/images/2015/09/1.jpg)\r\nBut that’s ugly. We want something better. That’s where the `ember-modal-dialog` add-on comes in. It allows us to easily create beautiful modals. Let’s get started.\r\n![github for ember-modal-dialog](/content/images/2015/09/2.jpg)\r\n\r\nFirst, we’ll install the `ember-modal-dialog` add-on. Then, we’ll install the `ember-cli-sass` add-on, since it relies on it.\r\n![Installation procedure for ember-modal-dialog and ember-cli-sass](/content/images/2015/09/3-1.jpg)\r\nThen we’ll copy these two lines, we’ll change our `app.css` to `app.scss`,\r\n![changing app.css to app.scss](/content/images/2015/09/4-1.jpg)\r\nso we’re using sass now, and then we’ll paste these two lines in there. So we’re importing the styles from the add-on. \r\n![utilizing pre-written code to import styles from the add-on](/content/images/2015/09/5.jpg)\r\n\r\nThen, in our actions template, we’ll put in a `modal-dialog` box. \r\n![putting in the modal dialog box](/content/images/2015/09/6.jpg)\r\nSo when we restart the server and reload the page, we get this `modal-dialog` box.\r\n![displaying the modal dialog box after server restart](/content/images/2015/09/7.jpg)\r\nNow you’ll notice that this modal is missing some of the features that you might normally expect from a modal. For example, greying out the rest of the screen, and being able to close it. So let’s add those in.\r\n \r\nIf we go to the read me for the add-on, we see that there is some configurable properties, one of which is `translucentOverlay`. \r\n![chart with configurable properties for modal-dialog components](/content/images/2015/09/8.jpg)\r\nSo we’ll set that to `true`.\r\n![setting translucentOverlay to 'true'](/content/images/2015/09/9.jpg)\r\nNow it grays out the rest of the screen, like we would expect.\r\n![Demonstration of a greyed-out screen](/content/images/2015/09/10.jpg)\r\nWe would also expect the `modal-dialog` to be a little bit larger. So what we’ll do is we’ll find the class there, `ember-modal-dialog`,\r\n![Locating the ember-modal-dialog class](/content/images/2015/09/11.jpg)\r\nand then we’ll increase the size through `css`.\r\n![Increasing modal-dialog box size with css](/content/images/2015/09/12.jpg)\r\nThere, we have a nice, larger `ember-modal-dialog`. \r\n![Demonstration of larger modal-dialog box](/content/images/2015/09/13.jpg)\r\n\r\nNow we use the `ember-modal-dialog' css`, and here we have the modal overlays and the `ember-modal-overlay`.\r\n![locating relevant sections of code](/content/images/2015/09/14.jpg)\r\nIf you want to add different classes, you can use `overlay-class` and `overlayClassNames` and `container-class` and `containerClassNames`, \r\n![table with additional configurable class properties](/content/images/2015/09/15.jpg)\r\nand you can use those to add different class names to different modals, if you’re using multiple modals and you want to style them differently. \r\n\r\nSo now our modal is looking nice, but we can’t close it, and we want to be able to do that. So we’ll do that by putting an action on the `close` property. \r\n![table with information about the configurable 'close' property](/content/images/2015/09/16.jpg)\r\nSo we’ll have the `close` property, and we’ll attach this to the `closeModalDialog` action. As we’ll see in this week’s pro-video, this is how we attach actions to components. \r\n![Demonstration of code attaching 'close' property to 'closeModalDialog' action](/content/images/2015/09/17.jpg)\r\n\r\nSo to make our `close` action mean something, we’ll first wrap this `modal-dialog` in an `if` statement, so it only shows up if the `isShowingModal` Boolean is `true`. \r\n![Code wrapping the 'modal-dialog' in an 'if' statement](/content/images/2015/09/18.jpg)\r\n\r\nIn controller, we’ll temporarily set the `isShowingModal` default to `true`, and then we’ll create the `closeModalDialog` action. In this action, we will set the `isShowingModal` property to `false`, \r\n![setting 'isShowingModal' to 'false'](/content/images/2015/09/19.jpg)\r\nand we’ll see that when we click outside, it closes that modal dialog.\r\n \r\nSo now we’ll need a way to open up that `modal-dialog` box. We’ll start by putting the default of `isShowing dialog` as `false`, so that it will start from where we want to be normally. And then we’ll create an action called `showModalDialog`. This action will take a parameter, and then that parameter will be set to the `modalMessage` property. And then, we’ll set the `isShowingModal` to `true`. \r\n![Setting 'isShowingModal' to 'true'](/content/images/2015/09/20.jpg)\r\nNow that `modalMessage` property, we’ll be having that in the middle of the `modal-dialog`, and that’s going to replace the \"thank you for using hats\". \r\n![Removing the phrase \"thank you for using hats\"](/content/images/2015/09/21.jpg)\r\nAnd how we’ll use this is by taking the places where we’re showing an alert, and we’ll replace that with `showModalDialog`. \r\n![Using 'showModalDialog' instead of an alert.](/content/images/2015/09/22.jpg)\r\nSo then when we try to trigger that, it will show our modal dialog instead of an alert.\r\n![on-screen demonstration of modal dialog box](/content/images/2015/09/23.jpg)\r\nSo this is great. We have our modal dialog, it’s showing when you click something, and it’s disappearing when you click away. But our other things are still alerts, and the way we have this set up, it’ll be difficult to make them not alerts, because those alerts are called in the route. \r\n![code from the rout.js folder](/content/images/2015/09/24.jpg)\r\n\r\nSo what we need to do is take all this and move it up the action bubbling chain. \r\n![selecting 'closeModalDialog' and 'showModalDialog' code](/content/images/2015/09/25.jpg)\r\nWe could move it to the route, however, let’s keep on bubbling up until we get to the application route. \r\n![placing 'closeModaldialog' and 'showModalDialog' code into the application route](/content/images/2015/09/26.jpg)\r\nSo we’ve taken out these two actions from the controller, then we’ll take this from the template \r\n![removing the isShowingModal' code wrapped in an 'if' statement from the template](/content/images/2015/09/27.jpg)\r\nand paste it into the application template. \r\n![pasting the isShowingModal' code wrapped in an 'if' statement into the application template](/content/images/2015/09/28.jpg)\r\nBut unfortunately, it doesn’t work quite right out of the box like that. The reason is because we’re setting the `modalMessage` and `isShowingModal` on the router.\r\n![router.js code](/content/images/2015/09/29.jpg)\r\nWhat we need to do is set them on controller. So we’ll grab the `controllerFor('application')`, and then we’ll set it on there.\r\n![altering relevant code with 'controllerFor('application)')](/content/images/2015/09/30.jpg)\r\nWith that done, we’ll see that it’s working like we expect. It should be noted that `controllerFor` is a private property, so it might change. However, I don’t know a better way to do this at the moment. \r\n\r\nSo with these actions set on the application route and the `modal-dialog` set on our application template, we can go back to our actions route here and we can start changing these over.\r\n![original route.js code with alerts](/content/images/2015/09/31.jpg)\r\n![new route.js code with 'this.send('showModalDialog') plus relevant messages](/content/images/2015/09/32.jpg)\r\nAnd with those changed, then we’ll be seeing that for all of these actions, we’re using the `modal-dialog` instead of the `alert`. This is much better.\r\n\r\nIf you want to learn more about `ember-modal-dialog`, you can go to the read me on github.\r\n![picture of yapplabs github page](/content/images/2015/09/33.jpg)\r\nIt contains lots of information, including some live demos, it includes several configurable properties, and also shows how to position it, if you want it to not be on the center of your screen. It also shows you how to change the styles more than we did and do keyboard shortcuts and create custom modals. So if you want to have a type of modal that shows up in several places but not all places, custom modals will be your thing. \r\n\r\nSo I hope you’ll be able to find `ember-modal-dialog` useful, and we should be soon getting back to our regular scheduled screencasts on ‘Actions and Components’. \r\n", publish_date: "2015-09-16", links: "* [ember-modal-dialog addon](https://github.com/yapplabs/ember-modal-dialog)\r\n* [Github diff](https://github.com/jeffreybiles/simpler-ember-sparks-website/commit/ddd3e91f02f4f137fdfca95156caaf16ed5f0247)", thumbnail_image: "Screenshot_2015-09-10_13.13.23.png", permalink: "74-ember-modal-dialog", free: true, difficulty: "intermediate", seconds: 425, wistia_embed: "<div id=\"wistia_74ovta04uf\" class=\"wistia_embed\" style=\"width:800px;height:528px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"74-ember-modal-dialog\" /><meta itemprop=\"duration\" content=\"PT7M5S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/c09fb6c89104d3b33aab5b7aee2982ed933b017a.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/7903a5432dae3370f4b0fd7f3b1cddf0739bd245.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=38025222&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F0e4880fb88f1643e3e975fe78e9a9cf478a99a38.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=425.293&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fc09fb6c89104d3b33aab5b7aee2982ed933b017a.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F7903a5432dae3370f4b0fd7f3b1cddf0739bd245.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-09-14T21:34:29Z\" /><object id=\"wistia_74ovta04uf_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:500px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=38025222&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F0e4880fb88f1643e3e975fe78e9a9cf478a99a38.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=425.293&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fc09fb6c89104d3b33aab5b7aee2982ed933b017a.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F7903a5432dae3370f4b0fd7f3b1cddf0739bd245.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=38025222&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F0e4880fb88f1643e3e975fe78e9a9cf478a99a38.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=425.293&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fc09fb6c89104d3b33aab5b7aee2982ed933b017a.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F7903a5432dae3370f4b0fd7f3b1cddf0739bd245.bin\" name=\"wistia_74ovta04uf_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">74-ember-modal-dialog</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"74ovta04uf\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/74ovta04uf/metadata.js\"></script>", code: "```js\r\n//in demonstrations/actions/controller.js\r\nactions: {\r\n  howToRemoveHat(){\r\n    this.send('showModalDialog', 'we realize it is difficult to remove our proprietary vicelok hats')\r\n  }\r\n}\r\n```\r\n\r\n```js\r\n//in application/route.js\r\nexport default Ember.Route.extend({\r\n  actions: {\r\n    closeModalDialog(){\r\n      this.controllerFor('application').set('isShowingModal', false)\r\n    },\r\n    showModalDialog(message){\r\n      this.controllerFor('application').set('modalMessage', message)\r\n      this.controllerFor('application').set('isShowingModal', true)\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n```hbs\r\n//applications/template.hbs\r\n//...\r\n{{#if isShowingModal}}\r\n  {{#modal-dialog translucentOverlay=true close='closeModalDialog'}}\r\n    {{modalMessage}}\r\n  {{/modal-dialog}}\r\n{{/if}}\r\n```\r\n\r\n", guid: "6f4d75ec806a0bc7ac8098df7252ea205dc29c1c"},
  {title: "71 - Upgrade Ember with ember-cli-deprecation-workflow", video_url: "", description: "When upgrading (especially to Ember 1.13) the amount of deprecation warnings can be overwhelming.\r\n  \r\nember-cli-deprecation-workflow helps you tame the warnings and tackle the deprecations on your terms.", transcript: "null", publish_date: "2015-09-04", links: "* [ember-cli-deprecation-workflow](https://github.com/mixonic/ember-cli-deprecation-workflow)\r\n* [Example deprecation-workflow config file](https://github.com/jeffreybiles/simpler-ember-sparks-website/commit/6b7d203497d01af6850dfa6f62dd3d82bda70618)", thumbnail_image: "Screen_Shot_2015-08-25_at_2.31.42_PM.png", permalink: "71-upgrade-ember-with-ember-cli-deprecation-workflow", free: false, difficulty: "advanced", seconds: 255, wistia_embed: "<div id=\"wistia_q2gy711t8k\" class=\"wistia_embed\" style=\"width:800px;height:478px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"q2gy711t8k\");\r\n</script>", code: "", guid: "dfd6d2535483295ef8ce6d0ec0eac9067d89489f"},
  {title: "68 - Custom Validations with ember-validations", video_url: "", description: "ember-validations includes nine built-in validations, but sometimes they aren’t exactly what you need.\r\n  \r\nIn this episode we show how to create basic custom validations- specifically, an email validation that abstracts away our regex and makes it reusable.", transcript: "null", publish_date: "2015-08-26", links: "* [ember-validations library](https://github.com/dockyard/ember-validations)\r\n* [github diff for our email validation](https://github.com/jeffreybiles/simpler-ember-sparks-website/commit/ad068261ab30df84038ed72f834d22e41ae5db84)", thumbnail_image: "Screen_Shot_2015-08-18_at_9.39.16_PM.png", permalink: "68-custom-validations-with-ember-validations", free: true, difficulty: "advanced", seconds: 288, wistia_embed: "<div id=\"wistia_6dtt89gpjg\" class=\"wistia_embed\" style=\"width:800px;height:478px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"68- Custom Validations with ember-validations\" /><meta itemprop=\"duration\" content=\"PT4M47S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/e7baf4d8476b91c1b444e3da87c88369b101f96d.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/2a29051c950ac9399811b853e56ed06e978dbe5c.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=720&hdUrl%5Bsize%5D=13251623&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F4b984d0cffa81b13844045d172c6d1898762f089.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=287.529&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fe7baf4d8476b91c1b444e3da87c88369b101f96d.bin%3Fimage_crop_resized%3D800x450&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F2a29051c950ac9399811b853e56ed06e978dbe5c.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-08-19T02:00:41Z\" /><object id=\"wistia_6dtt89gpjg_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:450px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=720&hdUrl%5Bsize%5D=13251623&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F4b984d0cffa81b13844045d172c6d1898762f089.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=287.529&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fe7baf4d8476b91c1b444e3da87c88369b101f96d.bin%3Fimage_crop_resized%3D800x450&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F2a29051c950ac9399811b853e56ed06e978dbe5c.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=720&hdUrl%5Bsize%5D=13251623&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F4b984d0cffa81b13844045d172c6d1898762f089.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=287.529&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fe7baf4d8476b91c1b444e3da87c88369b101f96d.bin%3Fimage_crop_resized%3D800x450&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F2a29051c950ac9399811b853e56ed06e978dbe5c.bin\" name=\"wistia_6dtt89gpjg_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">ember-validations includes nine built-in validations, but sometimes they aren’t exactly what you need. In this episode we show how to create basic custom validations- specifically, an email validation that abstracts away our regex and makes it reusable.</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"6dtt89gpjg\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/6dtt89gpjg/metadata.js\"></script>", code: "Define a new validator in `validators/local/email.js`\r\n\r\n```js\r\nimport Base from 'ember-validations/validators/base';\r\n\r\nexport default Base.extend({\r\n  call: function(){\r\n    var email = this.model.get(this.property)\r\n    if(!email){\r\n      this.errors.pushObject(\"Must include an email\")\r\n    } else if(!email.match(/.*@.*\\..*/)){\r\n      this.errors.pushObject(\"Must be formatted like an email\")\r\n    }\r\n  }\r\n});\r\n```\r\n\r\nUse it in the validations hash\r\n\r\n```js\r\nvalidations: {\r\n  email: {\r\n    email: true\r\n  }\r\n}\r\n```", guid: "b1a59e0bc742bc150473bf60f72f42e7b34723db"},
  {title: "66 - Advanced Validations with ember-validations", video_url: "", description: "ember-validations provides nine built-in validations.\r\n  \r\nIn this episode we use all nine of them while helping prepare our client for the coming robot apocalypse.", transcript: "null", publish_date: "2015-08-19", links: "* [ember-validations library](https://github.com/dockyard/ember-validations)\r\n* [github diff for mixin and \"model.key\" strategy](https://github.com/jeffreybiles/simpler-ember-sparks-website/commit/59cfff7769eac3b93b483d5b68ab4771a72fcdda)", thumbnail_image: "Screen_Shot_2015-08-16_at_10.03.54_PM.png", permalink: "66-advanced-validations-with-ember-validations", free: true, difficulty: "intermediate", seconds: 405, wistia_embed: "<div id=\"wistia_9c055qenno\" class=\"wistia_embed\" style=\"width:800px;height:478px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"Advanced Validations with Ember Validations\" /><meta itemprop=\"duration\" content=\"PT6M44S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/15d9da73ad81991c0c15e9470e62794c7e7b90fd.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/c280743e6aa054fb416c13088d6b13e4e72b4ea2.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=720&hdUrl%5Bsize%5D=19094959&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fd7a11a4be86d6f073bc540fa39c1ecd32a202bb8.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=404.999&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F15d9da73ad81991c0c15e9470e62794c7e7b90fd.bin%3Fimage_crop_resized%3D800x450&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fc280743e6aa054fb416c13088d6b13e4e72b4ea2.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-08-17T03:04:20Z\" /><object id=\"wistia_9c055qenno_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:450px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=720&hdUrl%5Bsize%5D=19094959&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fd7a11a4be86d6f073bc540fa39c1ecd32a202bb8.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=404.999&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F15d9da73ad81991c0c15e9470e62794c7e7b90fd.bin%3Fimage_crop_resized%3D800x450&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fc280743e6aa054fb416c13088d6b13e4e72b4ea2.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=720&hdUrl%5Bsize%5D=19094959&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fd7a11a4be86d6f073bc540fa39c1ecd32a202bb8.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=404.999&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F15d9da73ad81991c0c15e9470e62794c7e7b90fd.bin%3Fimage_crop_resized%3D800x450&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fc280743e6aa054fb416c13088d6b13e4e72b4ea2.bin\" name=\"wistia_9c055qenno_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">ember-validations provides nine built-in validations. In this episode we use all nine of them while helping prepare our client for the coming robot apocalypse.</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"9c055qenno\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/9c055qenno/metadata.js\"></script>", code: "A validation hash demonstrating the 9 built-in types of validations:\r\n\r\n```js\r\n  validations: {\r\n    username: {\r\n      presence: true\r\n    },\r\n    email: {\r\n      format: {with: /.*@.*\\..*/, message: \"Must be formatted like an email\"}\r\n    },\r\n    password: {\r\n      length: {minimum: 8},\r\n      confirmation: true\r\n    },\r\n    cps: {\r\n      inclusion: {range: [0, 9], message: \"That's suspiciously fast...\"},\r\n      numericality: true\r\n    },\r\n    blank: {\r\n      absence: {message: \"Cylon detected\"}\r\n    },\r\n    notABot: {\r\n      acceptance: {accept: \"affirmative\"}\r\n    },\r\n    species: {\r\n      exclusion: {in: ['Robot', 'Computer', 'AI', 'Cylon', 'Overlord'], allowBlank: true, message: \"We don't serve your kind here\"},\r\n    },\r\n  },\r\n```\r\n\r\nThe handlebars code where these validations are used:\r\n\r\n```hbs\r\n<h1>(Human) User Signup Form</h1>\r\n\r\n<p>Username: {{input value=username}}</p>\r\n{{display-errors errors=errors.username showErrors=showErrors}}\r\n\r\n<p>Email: {{input value=email}}</p>\r\n{{display-errors errors=errors.email showErrors=showErrors}}\r\n\r\n<p>Password: {{input value=password}}</p>\r\n{{display-errors errors=errors.password showErrors=showErrors}}\r\n<p>Password Confirmation: {{input value=passwordConfirmation}}</p>\r\n{{display-errors errors=errors.passwordConfirmation showErrors=showErrors}}\r\n\r\n<p>How many 1-digit calculations can do you in your head per second? {{input value=cps}}</p>\r\n{{display-errors errors=errors.cps showErrors=showErrors}}\r\n\r\n<p>LEAVE BLANK (bot detection) {{input value=blank}}</p>\r\n{{display-errors errors=errors.blank showErrors=showErrors}}\r\n\r\n<p>Are you sure you're not a bot? Type 'affirmative' {{input value=notABot}}</p>\r\n{{display-errors errors=errors.notABot showErrors=showErrors}}\r\n\r\n<p>Seriously, what species are you? {{input value=species}}</p>\r\n{{display-errors errors=errors.species showErrors=showErrors}}\r\n```", guid: "d62c27e3bdb8e847f37ede24eb8e69fa51c1df2e"},
  {title: "59 - Computed Properties: Working with Arrays", video_url: "", description: "Computed properties can be used to work arrays of data.\r\n  \r\nIn this episode, we look at how to compute off of an array and off of various properties on an array using @ and {}.", transcript: "null", publish_date: "2015-07-26", links: "* [Ember Guide on @each](http://guides.emberjs.com/v1.13.0/object-model/computed-properties-and-aggregate-data/)\r\n* [Github diff for @](https://github.com/jeffreybiles/simpler-ember-sparks-website/commit/ad58784bdb0a16fb9d7f44917ea02ab7c72b3f9d)\r\n* [Github diff for {}](https://github.com/jeffreybiles/simpler-ember-sparks-website/commit/153df3412d4fcef3034dc2662546c90556bb89a5)", thumbnail_image: "Screenshot_2015-07-25_13.00.35.png", permalink: "59-computed-properties-working-with-arrays", free: false, difficulty: "basic", seconds: 346, wistia_embed: "<div id=\"wistia_ad4mtbi504\" class=\"wistia_embed\" style=\"width:800px;height:478px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"ad4mtbi504\");\r\n</script>", code: "", guid: "bed34ea5406df5f0a87642d16be2729f6106ea76"},
  {title: "110 - Ember Data 2.0: Essential Adapter Customizations", video_url: nil, description: "There are a huge array of customization options available to users of the RESTAdapter and JSONAPIAdapter.  In this episode we narrow it down to the 5 most common.\r\n\r\nWe track the URL, HTTP Method, and query params for 7 different endpoints, watching them change as we customize our Adapter class.\r\n", transcript: "Hey and welcome back to our series on Ember Data Adapters and Serializers. Today we’re going to be exploring adapters more in depth, getting into some of the more common customizations for adapters. In this week’s pro-episode, we’ll get into some even more in-depth customizations you can make.\r\n\r\n\r\nSo in the DS.Adapter base class, it gives us these methods. These are the core methods that need to be implemented. Those are the ones that are the core of DS.Adapter. Everything else is to serve those. And what they do is they basically they give you a URL and then they call that URL. I happen to have hijacked some of these so that instead of calling the URL, they just post it here. And so we’ll use this to help explore the different ways we can customize your adapter. So first let’s do a rundown of the different methods that we have here. \r\n\r\n\r\nSo we have `createRecord` which will send something to the server that will create a record. And notice I have the name first. That’s what it’s called within the Ember Data Adapter. Then I have the HTTP method that’s used. Then I have the URL that it’s sent to, and then I have any additional query params that are sent up with it. Notice that there is other data that’s being sent. We’re posting a taco here so it would send up data about that taco, but that’s controlled by the serializer, and so we won’t think about that during this time. We’ll just worry about the query params such as when you’re doing the query. \r\n\r\n\r\nAlright, so we can create a record, update the record, delete the record, find all of the records, we can `query` and `queryRecord`, and I believe `query` returns an array and `queryRecord` just turns one. And then we have `findRecord` which just gets us one record. \r\n\r\n\r\nIt’s worth noting that the `RESTAdapter` which we’re using today has three other ones like this, `findBelongsTo`, `findHasMany`, and `findMany`. However, these go off of the links that are given in the data. I couldn’t get that working generically and it’s not part of the core DS.Adapter, so we’re going to skip over it for now. \r\n\r\n\r\nNow we’re ready to customize our adapter. Alright, so we’ll start with the most common one, which is `namespace`, so let’s say the namespace is `api/v1`. So you’ll see that it attaches that before what it had before, so it attaches it to the beginning but doesn’t attach it completely to the beginning because there’s also the host attribute which it’ll attach before that. \r\n\r\n\r\nSo without the host attribute, it’s assuming that it’s hosted at the same place as you’re serving your Ember app from, and that might not always be the case. The host you’ll probably want to change on an adapter by adapter basis a lot of the time rather than in the application, say if you’re calling out to GitHub or something like that. \r\n\r\n\r\nA third common edit is `pathForType`. So this is the default `pathForType` in the `RESTAdapter`. So what it does is it takes the `modelName`, it camelizes it and then it pluralizes it. So you’ll see here that it’s pluralized taco, and then for taco-taco, it camelizes it and pluralizes it. \r\n\r\n\r\nSo we’ll see the change when we define our own `pathForType`. We’ll take the `modelName` and then we’ll just return it. And this is all singularized and this is singularized and this is both singularized and not camelCase. \r\n\r\n\r\nOf course you can do more than just return the plain `modelName` and getting rid of the default `pathForType`. I’ll leave those exact details up to the twisted imagination of whoever designed your API. \r\n\r\n\r\nThere are two other modifications that I want to show you today that are still fairly common, they just aren’t as visible on this example I’ve made. So the first is `headers`, and it’s fairly straightforward, it’s just a hash of headers that you send. As you can see, they can be dynamic. You should note if you use a dynamic header that sometimes that dynamicism isn’t within the Ember Observer system, so you may have to call `.volatile` on that function. \r\n\r\n\r\nAlright, and the second set of customizations are the `isInvalid` and `isSuccess` methods. So they’re used by `handleResponse` to decide whether the response is a success or a failure. And the defaults are fairly straightforward. If it’s greater than 200, less than 300, or it’s 304, then it’s a success. However, your server might not send back status codes like that, or it might send weird custom status codes. So `isSuccess` and `isInvalid` is a place to accommodate those. \r\n\r\n\r\nSo in this episode, we were introduced to the core methods of the adapter and roughly what they do. And we saw how several different things can modify them. Several of the most common modifications are `host`, `namespace`, `headers`, `isInvalid` and `isSuccess`, and `pathForType`. We also saw that at least in the REST Adapter, there are several ones that are just for getting relationships. \r\n\r\n\r\nIn the next episode, we’re going to be going over several of these other things, like `buildURL`, the `urlFor` set of methods, and the reloading set of methods, as well as several others. I hope to see you then.\r\n", publish_date: "2016-01-20", links: "* [DS.Adapter base class](http://emberjs.com/api/data/classes/DS.Adapter.html#method_createRecord )\r\n* [DS.RESTAdapter class](http://emberjs.com/api/data/classes/DS.RESTAdapter.html) \r\n\r\n", thumbnail_image: "Screenshot_2016-01-02_18.15.42.png", permalink: "110-ember-data-20-essential-adapter-customizations", free: true, difficulty: "intermediate", seconds: 366, wistia_embed: "<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script><div class=\"wistia_embed wistia_async_zolo6n54u9\" style=\"height:528px;width:800px\">&nbsp;</div>", code: "There are many ways to customize Ember Data Adapters.  This screencast covers the most popular.\r\n\r\nSome change the URL itself:\r\n\r\n```js\r\nexport default DS.RESTSerializer.extend({\r\n\tnamespace: 'api/v1',\r\n\thost: 'www.tacodeli.com',\r\n\tpathForType(modelName){\r\n\t\treturn Ember.String.capitalize(modelName);\r\n\t}\r\n})\r\n```\r\n\r\nThe three above apply to all of the URLs, turning the `findRecord` URL for 'taco' from `/taco` to `www.tacodeli.com/api/v1/Taco`.\r\n\r\n`headers` is just a hash that automatically attaches headers based on the calculated values.  [More details here](http://emberjs.com/api/data/classes/DS.RESTAdapter.html#toc_headers-customization).\r\n\r\n`isSuccess` and `isInvalid` and used by `handleResponse` to decide what to do with the response.\r\n\r\n```js\r\nexport default DS.RESTSerializer.extend({\r\n  isSuccess: function(status, headers, payload) {\r\n    return status >= 200 && status < 300 || status === 304;\r\n  },\r\n  isInvalid: function(status, headers, payload) {\r\n    return status === 422;\r\n  }\r\n})\r\n```\r\n\r\nDeeper customizations will be covered next episode.", guid: "c7ec978a556254c63d004fbdf69c703aad353f0c"},
  {title: "111 - Ember Data 2.0: Advanced Adapter Customizations", video_url: nil, description: "In this video we dive deeper into Ember Data Adapter customization, going into customizations that are less common and more drastic than the ones we covered last time.\r\n\r\nWe first talk about the what goes into the core methods, using `createRecord` as our example.  Then we look at the `buildURL` and `ajax` methods, finally seeing what happens when we overwrite `urlForCreateRecord`.\r\n", transcript: "In our last episode, we looked at the different URLs that are produced by the RESTAdapter, and we looked at common ways to change those, to customize it. In this episode, we’re going to be going even deeper. We’re going to be looking at some of the less common ways, more invasive ways, of customizing the adapter. \r\n\r\n\r\nSo the first and the most obvious is to write over something directly. So we can just completely write over the `createRecord` method. However that’s not typically recommended because there’s a lot that gets it done within that method. \r\n\r\n\r\nSo it’s different for each of the methods, but in `createRecord`, three main things happen. First, the URL is built up using various options. Then, the data is serialized into a hash. And then, you call out to the server using ajax. \r\n\r\n\r\nSo you can recreate all of this and create a new method called `createRecord`, but often times it’s easier to go deeper in, to change something within `buildURL` or something within `ajax`. You could also change stuff in the serializer, and we’ll get to `serializeIntoHash` later. \r\n\r\n\r\nHowever, there is one case where it would actually be better to overwrite `createRecord`, and that’s when you need to change to HTTP verb, or if you need to change how this data is constructed, if you don’t want it all within `data`. But aside from that, we’ll want to go into `buildURL` or `ajax` to change stuff. \r\n\r\n\r\nSo `buildURL` is defined within the `buildURLMixin`, and the main method, it just takes the `requestType` and it calls out to several other methods. That’s what all the `urlFor` methods do. And then these `urlFor` methods are all defined down here. However, you can overwrite them individually.\r\n\r\n\r\nLet’s go ahead and overwrite `urlForCreateRecord`. And so that’ll take the `modelName` and the `snapshot`, and then we could do a lot of processing. We’ll just return a string for now. \r\n\r\n\r\nAnd one thing you’ll notice is that the host and the namespace are not applied. It’s not `tacodeli.com/api/v1/hello`. It’s just `hello`. And that is because `urlForCreateRecord` calls `buildURL`, the private version, and that private version is where all the magic happens. So this is where the `urlPrefix` and the `host` are added on and where a lot of other processing occurs.\r\n\r\n\r\nThat’s not to say you shouldn’t overwrite `urlForCreateRecord`. It’s just that you should know what you’re replacing, the complexity of it, before you go and replace it so you can make up for some of that complexity. \r\n\r\n\r\nSo that’s a `buildURL`. Then we have the `serializer` which we’re calling `serializeIntoHash` on, and we’ll go over that when we go over the serializers. And then we call `ajax`. Ajax is where we prepare and then call the ajax call. So it’s a promise and we’ll define something for what will happen when it’s successful, and when it fails, and then we go ahead and call it. You can of course overwrite ajax, and that’s what I’ve done in order to create this app, right here. \r\n\r\n\r\nSo here instead of calling out to a server, I mock up some stuff based on what Ember Data expects back, and then I just resolve it while sending out to my `urlTracker` so that I can display it on the screen.\r\n\r\n\r\nWhile we’re here, you’ll also notice that I overrode `buildURL` as well, but in this case, I have it returning `super`, and so it ends up calling `buildURL` as it was before in addition to what I did.\r\n\r\n \r\nSo in this episode, we went over some methods that are pretty core to what the RESTAdapter does but aren’t necessarily overridden as much as the ones we went over last time. Those are `buildURL`, the `urlFor`X methods, as well as the ones that are directly called like `createRecord` or `deleteRecord`. We also went over the `ajax` method which you’ll notice isn’t here. That’s because it’s a private method. So `ajax` is really not meant to be overridden, although I did it because I had a very special use case. \r\n\r\n\r\nSo those are all the core ones but you’ll notice that there are still some that we haven’t gone over. We’ll go over those miscellaneous methods in the next episode. I’ll see you then.\r\n", publish_date: "2016-01-22", links: "* [DS.Adapter base class](http://emberjs.com/api/data/classes/DS.Adapter.html#method_createRecord )\r\n* [DS.RESTAdapter class](http://emberjs.com/api/data/classes/DS.RESTAdapter.html) \r\n", thumbnail_image: "Screenshot_2016-01-04_18.05.58.png", permalink: "111-ember-data-20-advanced-adapter-customizations", free: false, difficulty: "advanced", seconds: 299, wistia_embed: "<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script><div class=\"wistia_embed wistia_async_kt203mg6ho\" style=\"height:528px;width:800px\">&nbsp;</div>", code: "This episode shows how to make deeper customizations to your Ember Data Adapter.\r\n\r\nThere are several core methods you can directly overwrite:\r\n\r\n* createRecord\r\n* updateRecord\r\n* deleteRecord\r\n* findRecord\r\n* findAll\r\n* query\r\n* queryRecord\r\n\r\nYou can also directly overwrite the following relationship-focused methods:\r\n\r\n* findBelongsTo\r\n* findHasMany\r\n* findMany\r\n\r\nWhat the above 10 methods have in common is that they all call `buildURL` and `ajax` (and, sometimes, the serializer).\r\n\r\n`buildURL` is found in the `build-url-mixin`, and consists of sending off to a `urlForX` method based on the method that sent it in.  The `urlForX` methods then send to the private method `_buildURL` which then creates the URL based on the arguments sent in by the `urlForX` method.\r\n\r\n`ajax` is a private method which eventually calls jquery's `ajax` method.  You shouldn't normally mess with it, but In the Adapter for this series we've hijacked it to help display the URLs instead of sending off to the server.", guid: "701c666e58b4121d41b70aaafae54c7e98f07fa1"},
  {title: "64 - Form Validation with ember-validations", video_url: "", description: "ember-validations make form validations easy...er.\r\n \r\nIn this episode we set up the library, work with some basic examples, and discuss different strategies for how to handle your validations.", transcript: "null", publish_date: "2015-08-12", links: "* [ember-validations library](https://github.com/dockyard/ember-validations)\r\n* [github diff for mixin and \"model.key\" strategy](https://github.com/jeffreybiles/simpler-ember-sparks-website/commit/59cfff7769eac3b93b483d5b68ab4771a72fcdda)\r\n", thumbnail_image: "Screen_Shot_2015-08-10_at_10.25.14_AM.png", permalink: "64-form-validation-with-ember-validations", free: true, difficulty: "intermediate", seconds: 512, wistia_embed: "<div id=\"wistia_vz5x1c5pk2\" class=\"wistia_embed\" style=\"width:800px;height:478px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"64- Form Validations with ember-validations\" /><meta itemprop=\"duration\" content=\"PT8M31S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/a12d978e83becbe2f2b1ee301de494b59222fdde.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/c74221cec99ccee93ac3b6c16bb676c686859bf2.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=720&hdUrl%5Bsize%5D=40308944&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F57b67b9fd24e41f049b0f02219cfec96af30c18f.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=511.88&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fa12d978e83becbe2f2b1ee301de494b59222fdde.bin%3Fimage_crop_resized%3D800x450&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fc74221cec99ccee93ac3b6c16bb676c686859bf2.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-08-10T15:20:51Z\" /><object id=\"wistia_vz5x1c5pk2_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:450px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=720&hdUrl%5Bsize%5D=40308944&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F57b67b9fd24e41f049b0f02219cfec96af30c18f.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=511.88&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fa12d978e83becbe2f2b1ee301de494b59222fdde.bin%3Fimage_crop_resized%3D800x450&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fc74221cec99ccee93ac3b6c16bb676c686859bf2.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=720&hdUrl%5Bsize%5D=40308944&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F57b67b9fd24e41f049b0f02219cfec96af30c18f.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=511.88&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fa12d978e83becbe2f2b1ee301de494b59222fdde.bin%3Fimage_crop_resized%3D800x450&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fc74221cec99ccee93ac3b6c16bb676c686859bf2.bin\" name=\"wistia_vz5x1c5pk2_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">ember-validations make form validations easy...er. In this episode we set up the library, work with some basic examples, and discuss different strategies for how to handle your validations.</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"vz5x1c5pk2\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/vz5x1c5pk2/metadata.js\"></script>", code: "Add ember-validations (2.0.0-alpha.4) to your package.json dependencies\r\n\r\n```js\r\n\"ember-validations\": \"2.0.0-alpha.4\",\r\n```\r\n\r\nYou can create a validations hash with various options.  The hash can be on a controller, a component, or even a mixin which you include in multiple controllers or components.\r\n\r\n```js\r\nimport Ember from 'ember';\r\nimport EmberValidations from 'ember-validations';\r\n\r\nexport default Ember.Mixin.create(EmberValidations, {\r\n  validations: {\r\n    \"model.title\": {\r\n      presence: true,\r\n      length: {minimum: 5, maximum: 300}\r\n    },\r\n    \"model.seconds\": {\r\n      numericality: true\r\n    }\r\n  },\r\n});\r\n```\r\n\r\nYou can then validate on an action (before saving)\r\n\r\n```js\r\nimport PostValidations from 'ember-admin/mixins/validations/post';\r\n\r\nexport default Ember.Controller.extend(PostValidations, {\r\n  actions: {\r\n    save(){\r\n      //...\r\n      this.validate().then(()=>{\r\n        model.save().then(()=>{\r\n          this.transitionToRoute('post.show', model)\r\n        })\r\n      }).catch(()=>{\r\n        console.log(this.get(\"errors\"))\r\n      })\r\n    }\r\n  }\r\n}\r\n```", guid: "7d08231fec53a47f312f17396e307b5346d71970"},
  {title: "9 (revised) - Computed Property Macros", video_url: "", description: "Break up giant functions and make your logic beautiful using Ember.computed macros.\r\n  \r\nIn this episode, we learn the basics, then refactor a large computed property into smaller more readable macros.", transcript: "null", publish_date: "2015-07-27", links: "* [Ember.computed documentation](http://emberjs.com/api/classes/Ember.computed)\r\n* [More computed macros](https://github.com/cibernox/ember-cpm)", thumbnail_image: "Screenshot_2015-07-26_12.10.27.png", permalink: "9-revised-computed-property-macros", free: true, difficulty: "intermediate", seconds: 544, wistia_embed: "<div id=\"wistia_afrws7scvs\" class=\"wistia_embed\" style=\"width:800px;height:478px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"9 (revised)-computed-property-macros\" /><meta itemprop=\"duration\" content=\"PT9M3S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/e150227205b4b6acdcaf172a763c6783c35f28db.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/ebeefe831408ad088f4f71d22d8bb60390c6b1a6.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=720&hdUrl%5Bsize%5D=15726911&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Febeefe831408ad088f4f71d22d8bb60390c6b1a6.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=543.831&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fe150227205b4b6acdcaf172a763c6783c35f28db.bin%3Fimage_crop_resized%3D800x450&unbufferedSeek=true&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Febeefe831408ad088f4f71d22d8bb60390c6b1a6.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-07-26T17:11:32Z\" /><object id=\"wistia_afrws7scvs_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:450px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=720&hdUrl%5Bsize%5D=15726911&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Febeefe831408ad088f4f71d22d8bb60390c6b1a6.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=543.831&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fe150227205b4b6acdcaf172a763c6783c35f28db.bin%3Fimage_crop_resized%3D800x450&unbufferedSeek=true&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Febeefe831408ad088f4f71d22d8bb60390c6b1a6.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=720&hdUrl%5Bsize%5D=15726911&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Febeefe831408ad088f4f71d22d8bb60390c6b1a6.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=543.831&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fe150227205b4b6acdcaf172a763c6783c35f28db.bin%3Fimage_crop_resized%3D800x450&unbufferedSeek=true&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Febeefe831408ad088f4f71d22d8bb60390c6b1a6.bin\" name=\"wistia_afrws7scvs_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">9 (revised)-computed-property-macros</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"afrws7scvs\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/afrws7scvs/metadata.js\"></script>", code: "", guid: "75858086588505e3dc007c109d43d7c60585ac31"},
  {title: "55 - Awesome Select Boxes", video_url: "", description: "Having the new 2.0 style of select boxes opens up lots of possibilities.\r\n \r\nIn this episode we'll look at creating extra options, prompts, lists from multiple sources, and options that vary depending on the status of your user or your app.", transcript: "null", publish_date: "2015-07-12", links: "* [Episode 54- Ember 2.0 Select Boxes](https://www.emberscreencasts.com/posts/54-select-boxes-in-ember-20)\r\n* [Github diff for emberx-select](https://github.com/jeffreybiles/simpler-ember-sparks-website/commit/a7c3051f3a572750ba4ddb3c54a7b3b888ddb3b0)\r\n* [Github diff translating back to vanilla Ember](https://github.com/jeffreybiles/simpler-ember-sparks-website/commit/d7b22ae8e2fc80a64d9698aff40a339e148db777)\r\n* [Github diff for if statements](https://github.com/jeffreybiles/simpler-ember-sparks-website/commit/b647514c292a8bdef638907fa01e323a1f595467)", thumbnail_image: "Screenshot_2015-07-05_17.17.04.png", permalink: "55-awesome-select-boxes", free: false, difficulty: "intermediate", seconds: 272, wistia_embed: "<div id=\"wistia_wzkt3aig99\" class=\"wistia_embed\" style=\"width:800px;height:478px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"wzkt3aig99\");\r\n</script>", code: "", guid: "795edec1612ab29a813f39011e5e346bbaa8e8e2"},
  {title: "44 - ES2015 Template Strings", video_url: "https://www.youtube.com/embed/fbZa_l6pw48", description: "Template strings are an incredibly useful new feature in ES2015... and you can use them in your Ember apps today!  \r\n \r\nHere are 3 cool things that template strings enable.", transcript: "", publish_date: "2015-06-06", links: "* [Some other sources on template strings](http://babeljs.io/docs/learn-es2015/#template-strings)", thumbnail_image: "Screenshot_2015-05-31_21.23.11.png", permalink: "es2015-template-strings", free: true, difficulty: "basic", seconds: 160, wistia_embed: "<div id=\"wistia_3n3y4p9jwq\" class=\"wistia_embed\" style=\"width:800px;height:500px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"42-es2015-template-strings\" /><meta itemprop=\"duration\" content=\"PT2M39S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/a498dd9002c31a4929a9d3c1d091d668ba9bc3d3.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/4342113840f6638943b0a2b8d0e22f677169e5f8.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=5556739&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fa96513e07d4fb8002398da86484388ce1d0f784b.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=159.68&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fa498dd9002c31a4929a9d3c1d091d668ba9bc3d3.bin%3Fimage_crop_resized%3D640x400&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F4342113840f6638943b0a2b8d0e22f677169e5f8.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-06-21T15:24:29Z\" /><object id=\"wistia_3n3y4p9jwq_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:500px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=5556739&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fa96513e07d4fb8002398da86484388ce1d0f784b.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=159.68&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fa498dd9002c31a4929a9d3c1d091d668ba9bc3d3.bin%3Fimage_crop_resized%3D640x400&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F4342113840f6638943b0a2b8d0e22f677169e5f8.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=5556739&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fa96513e07d4fb8002398da86484388ce1d0f784b.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=159.68&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fa498dd9002c31a4929a9d3c1d091d668ba9bc3d3.bin%3Fimage_crop_resized%3D640x400&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F4342113840f6638943b0a2b8d0e22f677169e5f8.bin\" name=\"wistia_3n3y4p9jwq_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">42-es2015-template-strings</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"3n3y4p9jwq\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/3n3y4p9jwq/metadata.js\"></script>", code: "", guid: "ea87326443bedbed744a6836db75ff03f4d6cab8"},
  {title: "42 - Object Instantiation", video_url: "https://www.youtube.com/embed/tobyo5NBZTE", description: "Classes define Objects, but the Instances do all the heavy lifting.\r\n\r\nLearn how to instantiate an instance manually, as well as how Ember sometimes instantiates things behind your back.", transcript: "", publish_date: "2015-05-30", links: "* [.create documentation](http://emberjs.com/api/classes/Ember.Object.html#method_create)", thumbnail_image: "Screenshot_2015-05-30_19.49.35.png", permalink: "object-instantiation", free: true, difficulty: "basic", seconds: 184, wistia_embed: "<div id=\"wistia_a9xu1rekkc\" class=\"wistia_embed\" style=\"width:800px;height:500px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"42-object-instantiation\" /><meta itemprop=\"duration\" content=\"PT3M3S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/50bda667ee22b1bf6aaf32b2f984ab8dc8def8ec.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/97837de65c076b0b2e876285b243e09e4c44fe5d.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=7439865&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F72a4627d967a4fffec9894eb302aa9182bac0f28.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=183.759&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F50bda667ee22b1bf6aaf32b2f984ab8dc8def8ec.bin%3Fimage_crop_resized%3D640x400&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F97837de65c076b0b2e876285b243e09e4c44fe5d.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-06-21T15:24:17Z\" /><object id=\"wistia_a9xu1rekkc_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:500px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=7439865&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F72a4627d967a4fffec9894eb302aa9182bac0f28.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=183.759&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F50bda667ee22b1bf6aaf32b2f984ab8dc8def8ec.bin%3Fimage_crop_resized%3D640x400&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F97837de65c076b0b2e876285b243e09e4c44fe5d.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=7439865&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F72a4627d967a4fffec9894eb302aa9182bac0f28.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=183.759&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F50bda667ee22b1bf6aaf32b2f984ab8dc8def8ec.bin%3Fimage_crop_resized%3D640x400&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F97837de65c076b0b2e876285b243e09e4c44fe5d.bin\" name=\"wistia_a9xu1rekkc_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">42-object-instantiation</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"a9xu1rekkc\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/a9xu1rekkc/metadata.js\"></script>", code: "", guid: "89f3bacd002101e22a7c800a809a54eec2437739"},
  {title: "37- Blueprint Basics Pt 2- Custom Variables, Editing Files, and Exploring the Unknown", video_url: "https://www.youtube.com/embed/oebreLvpJWY", description: "Today we're creating custom variables, learning how to edit preexisting files, looking at the blueprint lifecycle hooks, and more!\r\n\r\nA 13-minute extravaganza that includes common pitfalls of working with blueprints and general tips for when you're exploring undocumented features.", transcript: "Welcome to part 2 of our series on blueprints. In the last episode, we learned how to create a file system and files as well as how to put content within those files using the default variables that are available. While this allowed us to do a lot of time-saving automation, it's somewhat limited. That's why, in this episode, we're going to be editing our index.js. \r\n\r\nIndex.js is where we can create our own variables, as well as take other actions.\r\n\r\n## Exploring the Undocumented\r\n\t\r\nA little bit of a warning before we go farther— we're going to be using some features that aren't very well documented. The main thrust of this episode isn't necessarily telling you how to use these specific features because I'm not necessarily using them perfectly or to their full extent. The idea is to show you how that you can go and use features like this when they're not documented, steps you can take to explore. Also to do some sweet automation using blueprints. To do that, we're going to tell you some common pitfalls and some common strategies, as well as make our blueprints.\r\n## Pitfalls\r\n\r\nLet's start with some pitfalls that you may encounter while working with blueprints. \r\n\r\nFirst is that you don't have access to ember. This is not an ember environment, this is an ember-cli environment. You also don't have access to a lot of things that ember-cli provides you. You don't have import statements or ES6, for example. Also, you can only use npm packages that are in dependencies, not the ones that are in devDependencies.\r\n\tIn a way, we really are exploring a hostile, unfamiliar environment. Let's keep that in mind, but we'll press on because, unlike other hostile environments, the only thing that can get hurt is our ego.\r\n\r\n## Learning from the Model Generator\r\n\r\nThe first thing we'll want to do is find a way to create the attributes for our ds.model. To do that, let's look for inspiration, say, in the model generator that comes with ember-cli. As you can see, they put out attributes just like we want to and they compile those attributes in index.js. Let's take inspiration from that.  \r\n\r\nWhen I say \"inspiration,\" what I mean is copy. This is the code from the model pasted and simplified. Let's take a look at our simplified locals. What locals does is it takes in options and it returns a hash of variables that you can use in your components over here, in your files.\r\nThe pattern we have is we have our empty array. Then we loop through the entity options and this line I just copied whole-sale from model, I'm not sure why things are as they are, but when you're exploring, you don't have to know why for everything. \r\n\r\nWe loop through all these entity options. We use StringUtils to create different forms of the name, and we have to do this because, as you recall, we can't access ember. Normally we'd do ember.string. Here, we have to fall back on StringUtils.\r\n\t\r\nThis line is copied over, but we also had to go and create our own lib utilities directory and put string within it. We had to copy that over. If you see files like this when you're working with blueprints, you have to copy those over as well.\r\n\r\nEOL, it worked right off the bat. \r\n\r\nAnyways, so we loop through those, we push them onto the empty array. We have the camelized name, then a colon, and then the results of DS.attr, which is just a switch statement saying if it's known, then you do it of that type. If there's no known type, you just do an empty attr.  \r\n\r\nThen, when you've looped through all those, you join them together with a comma, then an end of line, then a little bit of spacing. Once you've joined them, you dump them out into model attrs. That you can then use as a variable. That variable will get you the results that you need.  Here, these were formed from model attrs. \r\n\r\n## Replicating the Pattern for Other Attributes Displays\r\n\r\nWe're going to repeat that pattern 3 more times. One of the times will be in the new controller, where we're creating the new object that is not yet an ember data object. So you have to get the new object attrs and their defaults. Then, in the show template, we have to get the display attrs. Then in the edit fields, we have to do the input attrs.\r\n\r\nUp here, in the locals function, the pattern is the same. You start off with an empty array, and then you push something into it. It differs a little bit and most the differences are going to be down here in the functions we call out to. Then we join them, usually with an end of line, sometimes with a little extra in the case of new object attrs, since these are in a JavaScript file and these are a Handlebars file. The technique is still very similar. Then you return them in the locals.\r\n\r\nYou can put in different Handlebars, different mark up, to set them apart. As we said, the input field and display and new object default, they're also going to be case statements that change based on the type. A boolean input field would be a type checkbox and have checked, while everything else is regular and has a value. If it's a date, good luck with that. The same with a new object default, if it's a boolean, the default is false, otherwise the default is an empty string.\r\n\r\nThat will generate, for example, in the new post, these. In the template, it'll generate something appropriate. Then in the edit fields, it'll also generate something appropriate. Sometimes, like this text area here, it'll start off as input. Then you want to change it because you'll want something a little bit different, a little bit longer. That's okay, this is convention over configuration. It'll spit out the convention and you can go back in and change it to configure it.\r\n\r\n## Editing an Existing File (router.js)\r\n\r\nWe've got most of what we want, but the router is still not being edited. We want this chunk of text to be inputted into the router, into an already-existing file when we type in our blueprint. How do we do that?\r\n\tMy first thought was to go to the ember-cli router blueprint. Unfortunately, they use a package called \"ember router generator,\" which is even more undocumented than what we have going. As far as I can tell, it won't be able to do this sort of nested routing that we need. \r\n\r\nSo we look to a slightly unorthodox source.  This is the index.js for the ember-cli CoffeeScript route blueprint. I chose it because I knew that they would need to generate a route that was in CoffeeScript, so it's different than the standard. I wasn't disappointed. Down here, in add route to router, what they do is, essentially, they grab a regex and that will put you in the middle. Then they replace it with new content, so they open up the file and stick stuff in the middle.\r\n\r\nThis is what we get after stealing liberally from the ideas in the ember-cli router blueprint index. We have our add route to router function, which it gets the path for the router and then all the content from it. That uses path and fs, which are things that we have to require. Fs.extra, we have to remember to put it in our dependencies in our package.json.  Do that. \r\n\r\nWe use a similar regex. I've changed away from CoffeeScript and made it so it uses the regular JavaScript conventions. Then this is pretty much the same, but with the thing we're adding in being different. This has been handcrafted to generate the stack, the CRUD stack.  Then we use fs again to write the file. \r\n\r\n## Blueprint Hooks\r\n\r\nThat's our function that adds stuff to the router. How that gets called is through the after install hook. It gets called after you install it and then it just calls this.\r\n\t\r\nAfter install is one of the seven hooks that are available in ember-cli blueprints. There's a locals hook which we saw before, and the file map tokens hook which we saw in the previous episode, and normalized entity name. Then there are the several install and uninstall hooks, which do about what you would expect.\r\n\t\r\nThe uninstall hooks, you can destroy your blueprint. You have a destroy command. The destroy commands are really nifty because you can generate something and if you made a mistake, just type destroy with the same stuff and it will destroy it. However, we're not going to make one for this particular blueprint.\r\n\r\n## So Much More to Explore\r\n\t\r\nAs a matter of fact, there's a lot that we're not going to do today. This is already over 12 minutes. It probably could've been multiple screencasts, and each of these things, adding them would take its own screencast.\r\n\t\r\nWhat I want you to get from this, even more than specifics of things, like how to work with locals and after install, is how to explore features that are not yet fully documented. How to look at other open source code and find what you need.\r\n\t\r\nI hope you're able to do this and I hope to see you next week, where we tackle the slightly more tamed area of creating an add-on. I'll see you then.\r\n", publish_date: "2015-05-10", links: "* [index.js documentation](http://www.ember-cli.com/#indexjs)\r\n* [Model Blueprint index.js](https://github.com/ember-cli/ember-cli/blob/master/blueprints/model/index.js)\r\n* [Coffeescript Route Blueprint index.js](https://github.com/kimroen/ember-cli-coffeescript/blob/master/blueprints/route/index.js)", thumbnail_image: "Screenshot_2015-05-05_13.08.27.png", permalink: "37-blueprint-basics-pt-2-custom-variables-editing-files-and-exploring-the-unknown", free: false, difficulty: "advanced", seconds: 776, wistia_embed: "<div id=\"wistia_hl00l6u41v\" class=\"wistia_embed\" style=\"width:800px;height:500px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"hl00l6u41v\");\r\n</script>", code: "", guid: "988b7d98500335c0ccb1a38c589f982ef3e0beff"},
  {title: "36- Blueprint Basics Pt 1- Generating Files", video_url: "https://www.youtube.com/embed/AwvtU1fXuqc", description: "Blueprints are machines for generating code.  Let's build a machine for making a CRUD resource.  In this first episode, we generate the files and customize them using the default variables available in blueprints.", transcript: "In episodes 34 and 35, we created a CRUD interface. It took us about 15 minutes. However, lots of CRUD interfaces have a lot in common. This week, we're going to create a machine for generating CRUD interfaces. \r\n\r\n## The Power of Blueprints\r\n\r\nLet me demonstrate that machine in action. First let's delete last week's work. Now we'll fire up the machine with this command. Generate is the command for getting a machine, a blueprint. CRUD is the name of the machine. Post is name of what we'll be generating. Then the rest are data options. Let's hit that and it creates all these things for us. \r\n\t\r\nThere's a couple of things that need changed to make it exactly like what we had before. I'll do that real quick. \r\n\r\nNow we have something exactly like we had before with our edit and our delete buttons and our new buttons. All that work that we did last week was accomplished in less than a minute. It takes out a lot of the possibility of error because the computer does it for us. Let's go in-depth on how we created that machine. \r\n\r\n## Who Generates the Generators?\r\n\r\nYou can generate the blueprint using an Ember generator. Type blueprint and then the name of the blueprint that you want. That will create a folder within the blueprints folder and then an index file. \r\n\t\r\nThe index file is where you create a lot of the custom logic and custom variables that you can use in your path and templates. For this first episode, we're going to just be using the defaults that they give us. In the pro episode, we'll be creating our own variables and figuring out how to manipulate the index file. \r\n\r\n## Your Resource’s Directory Structure\r\n\r\nWe create a files folder, which is where all our files will go. Within that, we create a root folder— notice the double underscores. That means that it's a variable. In our case, the __root__ is app, although you might have named yours something else. __root__ will know that. \r\n\t\r\nWithin root, we'll create a double underscore name folder. When this is generated, it will be post. We'll also generate a double underscore name S folder. When this is generated, it will be posts, plural. Things surrounded by double underscores are variables. Everything else is taken literally. \r\n\r\nAs an aside, the things with double underscores are called file map tokens. You can define your own in the index.js. This is the index.js for the route generator that comes with Ember-cli. This also happens to be how they can create classic and pod architectures in the Ember-cli generators. We won't be doing that today, but if you wanted to, you could do that. Now back to the main event. \r\n\r\n## File Blueprints And Default Variables\r\n\r\nNow that we know the mechanics of naming the folders, let's create some files. We'll create a model.js and here we'll just do like we normally would. When we generate, it will generate this. In our pro episode, we'll put the attributes here based on what we put in in the command line, but for now, we won't be using any special variables. \r\n\r\nBy contrast, if we do the show folder, then we'll be needing some of the special variables that Ember gives us. This is our current show controller. Let's go ahead and copy that and then use that to construct our controller down here. We'll just need to change the transition to route since we won't be transiting to posts every time. It will be dependent on what you name your CRUD interface. We'll put in dasherize module name and then add the S to make it plural. There are better ways to make it plural, but this is good enough for now. \r\n\r\nDasherize module name is just one of five template variables that you get by default with your blueprints. We'll be using many of these when we're creating our files. \r\n\r\nI created a bunch of these files off screen. Let's take a walk through several or them. \r\n\r\nLet's start with the name plural template file. Here we have the finished product after it's generated posts. Over here we have the template and the blueprint. Notice everywhere it has posts, it has one of these variables. Here it's dasherize module name. Down here it's camelize module name because when there are multiple words, you want them to act differently. It's just taking what you want and then putting in the variables wherever you have the name or something that's going to change depending on what you're generating. \r\n\r\nFrom the top, we have the edit controller and the edit template, then the edit fields component and then template, which still has some stuff that we're going to put in during the pro episode. You've already seen the show controller and template in the model, then the new controller, the new template. You can pause at any point. You see that right now we're just replacing a post with various module names. \r\n\r\n## Next Time: Custom Variables, Adding to Preexisting Files\r\n\r\nIt's that easy to generate the files. The harder part comes next time when we explore the index.js. Specifically, we'll learn how to add attributes to our model, how to display attributes in our show template, how to put in the edit fields for our edit fields template, and then how to add nested resources within a currently existing file. I look forward to seeing you then. ", publish_date: "2015-05-09", links: "", thumbnail_image: "Screenshot_2015-05-04_12.48.34.png", permalink: "36-blueprint-basics-pt-1-generating-files", free: true, difficulty: "intermediate", seconds: 442, wistia_embed: "<div id=\"wistia_rrhnngytc3\" class=\"wistia_embed\" style=\"width:800px;height:500px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"36-blueprint-basics-pt-1\" /><meta itemprop=\"duration\" content=\"PT7M21S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/d88dc309695083562ece3357a2c578bf6a01cb62.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/95a539b22c00a61827df32342d6b62f0e2eb4449.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=30864094&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F3d0aac97316d593c92224aeafcf3ba6bfc2eafe5.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=441.687&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fd88dc309695083562ece3357a2c578bf6a01cb62.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F95a539b22c00a61827df32342d6b62f0e2eb4449.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-06-21T15:27:54Z\" /><object id=\"wistia_rrhnngytc3_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:500px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=30864094&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F3d0aac97316d593c92224aeafcf3ba6bfc2eafe5.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=441.687&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fd88dc309695083562ece3357a2c578bf6a01cb62.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F95a539b22c00a61827df32342d6b62f0e2eb4449.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=30864094&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F3d0aac97316d593c92224aeafcf3ba6bfc2eafe5.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=441.687&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fd88dc309695083562ece3357a2c578bf6a01cb62.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F95a539b22c00a61827df32342d6b62f0e2eb4449.bin\" name=\"wistia_rrhnngytc3_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">36-blueprint-basics-pt-1</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"rrhnngytc3\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/rrhnngytc3/metadata.js\"></script>", code: "", guid: "e915f7b0a7499d574a474498165940eed6dc9f7b"},
  {title: "33- Pods", video_url: "https://www.youtube.com/embed/xbvkgKbz9Rg", description: "Pods is another way to structure your files and folders.  It's becoming more popular, and may be the default in Ember 2.0.  In this screencast we explore some of the finer details of using pods in your project.", transcript: "Pods are a new way of organizing your directories and your files. It is becoming more popular, and it may even be the default in Ember 2.0, but before I show you how to create your file directory in a pod like structure, I want to show you the problem that it is trying to solve. \r\n\r\n## Why Pods\r\n\r\nLet's say that we are trying to find all the files that pertain to a particular resource, in this case territories. In our traditional app structure, we would have to go through all these folders. There is probably not an adapter, but there probably is a controller, so we go down here, so we have that open. There is probably a model. You have to go in here and a route and some nested routes… as you can see, it is taking us a while to find all the code that is related to this one thing. It is spread out all over and so now we have it all at our fingertips after about 20-30 seconds of searching, but God forbid we open other tabs and lose track of these. \r\n\r\n## Pods vs “Classic”\r\n\r\nPods help us organize it so we only have to open one folder and we are able to access all of this. This is how a post and post resource would be organized under classic. Under pods, they would be organized according to resource, so we have our posts resource and then our post resource. You do not have to open one folder, you have to open two. That is way better than searching through five, six gigantic folders. We have the resource name and then the function of the file. \r\n\r\nLet's see that within our app. We have our post folder which there is an index, so it has that and then our post folder with the model and the template. That is fairly simple and it follows this pretty well and we will see that our tags and our tag also follow this. Notice there is an edit and a show folder for the show and edit routes. The magical thing about this is no matter how many resources we have, tag and tags will still be right beside each other and I can just open up and work and have everything I need in an easily understandable structure and that is structure is really easy to understand when you are reading, but what about when you are writing?\r\n\r\n## Writing Pods\r\n\r\nThe first situation is, you have a resource. Let's say you have the tag resource. The model would go inside and you could put a controller or route or template inside. In this case, there is not direct template or router controller, but those do show up in the show and edit routes. You also have folders have folders for routes underneath the resource. Then if you want to do something like a partial, you can create another folder for it, so we call this partial tag/edit-fields which is in tag/edit-fields/template. Once again, the file names give you the job that it is doing and the folder names give you the route or the resource that it is at. We can go and see that this holds true for tags, as well. In this case, there is no model, because it uses the tag model.\r\n\r\nYou will notice that in the router, tag is nested under tags. However, each resource gets its own folder on the route directory when you are using pods. If you try to put tag under tags, then the model will not be recognized. That is how to arrange your files and folders for pods. \r\n\r\n## Customizing ember-cli\r\n\r\nIf you are using Ember CLI and you put your folders nested under app, then Ember CLI will automatically recognize them, but there are a few things you can do to customize it. In the command line interface, if you want to generate something using pods, you just add the —pod at the end. \r\n\r\nIf you are always going to be wanting to generate in pods then you can, in your dot Ember CLI file include the use pods true option. When you do that, then doing —pod will actually reverse it and make it so you no longer are using pods. So —pod switches whatever is happening and use pods sets the default to using pod. \r\nIf you want to have a different prefix than app, then in your config/environment.js you can set that, so you can have a folder specifically for your pods. \r\n\r\n## Limits of Pods and Resources\r\n\r\nYou will notice that under my app directory, not everything is a resource and that is for a good reason, because pods still are not good at handling everything. You can have your application folder which is pod based— you may not think of it as a resource, but it is. That does count as a pod. \r\n\r\nYou also have your components folder which when you are doing pod based components will come in handy. Those do not fit under resources. You have your helpers, because, where else are they going to go? You do not want to create a new pod for each helper. The same with initializers. Then you have the templates which are for miscellaneous things and shared partials, as well as your app index and router files.\r\n\r\n##Conclusion\r\n\r\nSo that is pods. They are (hopefully) the future of directory structures, and that future may be here as soon as Ember 2.0, as a default. \r\n\r\nIt is important to note that pods and classic directory structure are not mutually exclusive, so you do not have to convert everything over in a big bang. You can do it piecemeal. Good luck, and I'll see you next time.", publish_date: "2015-04-26", links: "* [ember-cli documentation: naming conventions](http://www.ember-cli.com/#pod-structure)\r\n* [ember-cli documentation: general](http://www.ember-cli.com/#pods)", thumbnail_image: "Screenshot_2015-04-26_07.48.22.png", permalink: "33-pods", free: false, difficulty: "intermediate", seconds: 423, wistia_embed: "<div id=\"wistia_pk1v7bsnfr\" class=\"wistia_embed\" style=\"width:800px;height:500px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"33-pods\" /><meta itemprop=\"duration\" content=\"PT7M2S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/d34d783b4da23d57f8a5758022df6b7254cc7040.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/9312af63aed21209d71f129677792ccd1129c46a.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=23281777&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F9a940510bc0c6c8353d44e1e44e1ba04e1355b60.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=422.623&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fd34d783b4da23d57f8a5758022df6b7254cc7040.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F9312af63aed21209d71f129677792ccd1129c46a.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-06-21T15:29:43Z\" /><object id=\"wistia_pk1v7bsnfr_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:500px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=23281777&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F9a940510bc0c6c8353d44e1e44e1ba04e1355b60.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=422.623&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fd34d783b4da23d57f8a5758022df6b7254cc7040.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F9312af63aed21209d71f129677792ccd1129c46a.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=23281777&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F9a940510bc0c6c8353d44e1e44e1ba04e1355b60.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=422.623&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fd34d783b4da23d57f8a5758022df6b7254cc7040.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F9312af63aed21209d71f129677792ccd1129c46a.bin\" name=\"wistia_pk1v7bsnfr_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">33-pods</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"pk1v7bsnfr\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/pk1v7bsnfr/metadata.js\"></script>", code: "", guid: "1a2c13da223307bb0c5c4c14d7f6aa1f3a69dea2"},
  {title: "22 - highlight selected sort options", video_url: "https://www.youtube.com/embed/_wnSHAJWb8c", description: "In the first two parts of this series, we created a sorting interface.  In this video, we add highlighting- a visual indicator of which sort is currently selected.  We also use some shiny new Ember 1.11 syntax.", transcript: "In the last two episodes in this series, we’ve shown how to create a sorting interface.  In episode one, the interface was workable but didn’t have any visual indicators.  You had to know that you were supposed to click the header.   In episode two, we created arrow buttons, which are obviously clickable and also offer more control for the user. In this episode, we’ll be making it easy to tell at a glance what the current sort order is by highlighting the selected option.\r\n\r\nTo highlight the arrows, we’ll use ‘gold’ class.  It just changes the color of the text, or in this case, the unicode arrow. That’s what it looks like.  Of course, we’re going to make it so it only highlights the currently selected option.\r\n\r\nWe only want to apply the highlight when certain conditions are true.  We’ll start just caring about the sortProperty, so we’ll use the class isCurrentSort as the condition for both the up and the down arrow.  We’re using ember 1.11, but if you’re using 1.10 or before you’ll have to use bind-attr.  How do we determine whether isSelected sort is true or false? Let’s look at the information flow.  We’re currently giving each component a sortProperty that sets it apart from the other components. We can feed in the sortProperties array and then use that to determine whether each current component has the current sort.  Let’s implement this.\r\n\r\nWe’ll start with the controller, feeding in the sortProperties array as selectedSorts.  I use the plural to indicate that it’s still an array. Then we’ll compare the first item in selectedSorts with sortProperty. This feeds back to the conditional classes we already put in place. So only one component is highlighted.  Click an arrow in another component, and the highlight changes.\r\n \r\nLet’s do the same things for the directionality of the sort. We’ll feed in isAscending to each of the components Then we’ll create upArrowHighlighted and downArrowHighlighted classes.  Both of them will be determined by a combination of isCurrentSort and isAscending. We’ll make the gold class dependent on upArrowHighlighted and downArrowHighlighted.  And now we have the current sort highlighted.\r\n\r\nEven though the component calls are a bit more verbose now, it’s important to note that the conditional highlighting would have been much more verbose and convoluted had we not been using a component.  The component let us separate scope and therefore reuse logic.\r\n\r\nThis is looking like a pretty complete feature, but there’s one more thing.  When we refresh the page, it goes back to sorting by createdAt.  In this week’s pro episode, we’ll use query parameters to save our sorting state in the url, and then replace our actions with links.", publish_date: "2015-03-20", links: "* [Ember 1.11 beta release notes](http://emberjs.com/blog/2015/02/07/ember-1-10-0-released.html)", thumbnail_image: "Screenshot_2015-03-21_15.12.33.png", permalink: "22-highlight-selected-sort-options", free: true, difficulty: "intermediate", seconds: 218, wistia_embed: "<div id=\"wistia_2opglhhmrp\" class=\"wistia_embed\" style=\"width:800px;height:528px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"22-highlight-selected-sort\" /><meta itemprop=\"duration\" content=\"PT3M37S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/839c1910f936b78bfcf7adc827afdfd4f0e789ef.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/54877198e4243df314a5d1e8ca5c4acba8b56230.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=15255848&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F5478c1f188ddfd78ef861583654a1bf368221b18.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=217.893&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F839c1910f936b78bfcf7adc827afdfd4f0e789ef.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F54877198e4243df314a5d1e8ca5c4acba8b56230.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-07-03T04:12:02Z\" /><object id=\"wistia_2opglhhmrp_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:500px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=15255848&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F5478c1f188ddfd78ef861583654a1bf368221b18.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=217.893&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F839c1910f936b78bfcf7adc827afdfd4f0e789ef.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F54877198e4243df314a5d1e8ca5c4acba8b56230.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=15255848&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F5478c1f188ddfd78ef861583654a1bf368221b18.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=217.893&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F839c1910f936b78bfcf7adc827afdfd4f0e789ef.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F54877198e4243df314a5d1e8ca5c4acba8b56230.bin\" name=\"wistia_2opglhhmrp_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">22-highlight-selected-sort</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"2opglhhmrp\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/2opglhhmrp/metadata.js\"></script>", code: "", guid: "1edfe971d77a27f05f4638eca17442eb804bc230"},
  {title: "16: Ember Inspector 1 - Installing the Ember Inspector", video_url: "https://www.youtube.com/embed/SbrvgzTnh-M", description: "How to install the Ember Inspector, including setting up options to display in more situations and to show the tomster in the address bar.", transcript: "Hey, welcome to Sparkcasts. Today is the first of a many part series about Ember Inspector which is a really useful tool for exploring your code and how your program runs in the wild. First, you have to install it. It's a Chrome plug-in. It can also be done in Firefox and Opera and even a bookmarklet for Internet Explorer. For some reason, you're developing in Internet Explorer, Ember Inspector has you covered.\r\n\r\nAll right, how do you install it? I'll just show you the steps for Chrome today. Go to the Chrome web store. You hit add to Chrome and then I believe you might have to restart your browser. But once you've done that, you can go to any website that has Ember installed. We're going to go to [a game that I made](http://www.mathmonstersgame.com) and hit Inspect Element and Ember. This is the Ember Inspector. That's the basic installation for Ember Inspector. \r\n\r\nHowever, there's a little bit more you can do. You can go to Chrome extensions, go down to Ember Inspector. Make sure that both of these boxes are checked because that will allow it to run in more situations. You should also hit options and click the Display the Tomster. When you're on a site that runs Ember, you'll see the Tomster right there. \r\n\r\nThat's how you install Ember Inspector.  In the next few videos, I'll be exploring each of these tabs and show you what you can do with them. I'll see you then.", publish_date: "2015-02-14", links: "* [Ember Inspector on the Chrome Web Store](https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi?hl=en)\r\n* [Ember Inspector on Github](https://github.com/emberjs/ember-inspector)", thumbnail_image: "Screenshot_2015-02-15_11.58.54.png", permalink: "16-ember-inspector-1-installing-the-ember-inspector", free: false, difficulty: "basic", seconds: 113, wistia_embed: "<div id=\"wistia_pdem6fi34h\" class=\"wistia_embed\" style=\"width:800px;height:528px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"pdem6fi34h\");\r\n</script>", code: "", guid: "5dbea01e1bedf82cc37e4ea72d9821c459ee91d4"},
  {title: "12: Moving to Ember CLI from Ember Appkit", video_url: "http://www.youtube.com/embed/BXp_dc5UOk8", description: "Ember CLI is replacing Ember App Kit.  It's easier to install and update, it runs faster, and it has all the conveniences of Ember App Kit and more.\r\n\r\nIn this screencast, we're moving our Ember App Kit application to Ember CLI.  It's a pretty smooth transition, but I guide you through a few common speed bumps.\r\n\r\nThis is the first pro episode.  Sometime in July I'll be starting a subscription service, and pro episodes (3 episodes a month from now on) will be behind a paywall.  Until then, please enjoy them for free.\r\n\r\nUpdate:  July 2014 turned into February/March 2015.  Woops!  The schema for what is free and what is paywalled has also changed slightly.", transcript: "Hey, welcome back. In this SparkCast, we're going to be taking a look at Ember CLI. We're going to be taking our application and converting it into an Ember CLI application.\r\n\r\nEmber CLI is a framework for creating Ember applications. It uses a lot of lessons learned from Ember App Kit. However, it's much easier to install and update since it's based on npm. It also uses the broccoli build tool instead of grunt. This screencast won't be talking about all the details. Here, I'll be telling you just enough so you can switch your Ember App Kit application to the current \r\nversion of Ember CLI.\r\n\r\nThe first step is to install Ember CLI. Do it through npm. We're making sure to install it globally so we can access it on the command line. Now, we can create a new Ember CLI project by typing \"ember new\" and then the name of our project. It will create all the files and then it will do an npm and Bower install automatically. You'll see that, just like in Ember App Kit, Ember CLI creates a lot of folders for you and already gives you a bunch of the boiler plate. \r\n\r\nNow, there are two ways we can proceed. We can either copy and paste our files from out old project into our new Ember CLI project, or we can do Ember init in our old project. That will put in a bunch of Ember CLI files into that project. The downsides of the copy and paste are that it takes a little bit of time, you lose your commit history, and copy and paste is just ...\r\n\r\nThe downsides of Ember init are that you're going to have to overwrite and merge quite a few files, some of which you'll need parts from both so you'll have to end up going back to those and adding what you need back in. The other downside is that you don't really know which files are now useless. There are some that were needed in Ember App Kit that aren't now. They've been replaced by newer methods.\r\n\r\nHere's a quick run-down of the files that we won't be needing anymore. To start off, your grunt file. That's been replaced with broccoli. Included with that are all the Bower and Npm modules that are supporting grunt. You'll notice that these lists are a lot shorter. Then, we won't be needing the API stubs folder anymore. That's been replaced with server, which is a full-on node server. Also, the task directory, which is there to support grunt. Finally, the environments folder in config. Go ahead and delete those and there might even be more, I'm not sure.\r\n\r\nNow that you've either got your files copied over or you've done Ember init and deleted the excess files, we need to get a few things back into working order. The first will be getting our dependencies back into our app. In Ember App Kit, we had a file called index.html in the app folder and we used that to pull in all our vendor files. In Ember CLI, in our broc file, we say app.import which will do the same thing but quicker because broccoli is optimized for things like this. \r\n\r\nThe second big difference is how we use the proxy. In Ember App Kit, we use proxy URL and proxy path, specified in package.json. Here, we're going to use proxy as a command when we're running the Ember server. We'll run Ember server proxy and then give the full path. Except, if we use it just like that, it won't work. There's currently a bug in Ember CLI, version 0.28, that causes it to be able to get from the server but not to post to the server, unless you comment out this one line in server, index.js. If you comment this out, then it will work.\r\n\r\nLet's test it out. We'll change the author name to Ben Franklin and then save, and it works. But, you will notice that our nice styling is going so we're going to get Bootstrap back in here. Let's start off by installing the Bootstrap sass package through Bower. Then, we're going to install an npm package that makes broccoli work well with sass. Then, we'll rename app.css to app.scss. Finally, in your app.scss, add this line that will import all of Bootstrap's css. We'll restart the server and then, when you load the page, Bootstrap is there. Now, you're completely on Ember CLI.\r\n\r\nThis week, I'd like to give a big shout-out to the Octolabs blog, where I took a few of the commands for getting Bootstrap working. I'd also like to thank Adolfo Builes, sorry if I mispronounced your name, who helped me out a lot on Ember CLI in IRC. Finally, if you're still watching on YouTube, you should know that I have a website and you can view stuff there. All right, I'll see you guys next week.", publish_date: "2014-05-29", links: "* [Ember CLI](http://iamstef.net/ember-cli/)\r\n* [Getting Bootstrap into Ember CLI]( http://www.octolabs.com/blogs/octoblog/2014/05/10/ember-cli-broccoli-bootstrap-sass-part-2/#new-project)", thumbnail_image: "12-ember-cli-from-ember-appkit.jpg", permalink: "12-moving-to-ember-cli-from-ember-appkit-pro", free: false, difficulty: "basic", seconds: 372, wistia_embed: "<div id=\"wistia_ikypf81egc\" class=\"wistia_embed\" style=\"width:800px;height:500px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"ikypf81egc\");\r\n</script>", code: "", guid: "802f9788d29a9a3d236acab8a9db1f6be7cace61"},
  {title: "30- Rearranging Table Columns", video_url: "https://www.youtube.com/embed/LhncYPPwdQs", description: "The stunning conclusion to the Tables of Data series.  Watch in awe as the master plan comes together, and we are able to... rearrange the columns of the table!", transcript: "In the last two episodes we made it so that you could change the columns that are shown just by clicking a button. That's pretty powerful, but what if we want to show them in a different order? What if the created at column is the most important information for your user? For that we're going to need to be able to rearrange how the columns are displayed. \r\n\r\n## A More Amenable Algorithm\r\n\r\nTo do this we're first going to have to rearrange how columns is calculated. Currently, we get all the available columns, and then we go through them, and we only return the ones that are contained in columns used.While that definitely gets us everything that's in columns used, it inevitably spits them out as the order that they are in available columns. We'll have to do this a slightly different way. \r\n\r\nIn this new way, we start with columns used then we map a function onto it that basically goes in to available columns, and finds the available column with the property that matches the sting in columns used. That's what this does, and then it returns the first one in that array.  You get the same result, but you get it in the order of columns used instead of the order of available columns. \r\n\r\nWhat this first small change means in practice is that instead of these always being displayed in the same order as here, now it adds them onto the end. This technically accomplishes our goal since we could do as much rearranging as we want, with this really hacky system, but it'll be much better if we had arrows to the left and right of everything that would push them to the side. Let's go ahead and build those.\r\n\r\n## Left/Right arrows\r\n\r\nIn the sortable header component we'll place the move left button and the move right button. Those call out to move left and move right, which we're going create, and they also use the show brackets helper, because if you just put a bracket then it's going to think it's a HTML, so we have to use this very simple helper. Let's look at what that looks like. These look pretty good, be better if I had an icon or something, but you can't have it all. Now, let's get to work making these buttons work.\r\n\r\nWe'll start by passing up the actions through the component, making sure to add on the current sort property. In our declaration of sortable header we'll have to add in the move left and move right actions. Fortunately, we'll only need to do it once since we dried up our column declarations back in episode twenty-eight. \r\n\r\nNow we need to add the actions to our posts controller. Fortunately, these are relatively straightforward. We'll start with move left, so it gets the property that we're wanting to move, and then it's going to find the index of that property in the columns used array.\r\n\r\nIt's going to remove that object, and then if it was already at index zero this is going to keep it where it was. Otherwise, it's going to move it one index less, so that it's moving left in the array. Move right is very similar except it's moving it to the right instead of to the left. We can see that this works. We now have full control over how our columns are displayed. Not only do we have control of how it displays here, but if we copy the URL and go to a new page it will display exactly as we had it before.\r\n\r\n## End of an Era\r\n\r\nThis ends, for now, our series on tables of data. We started off with simple sorting, and we went on to do some extremely powerful things. You can extend this even further in your own apps. If, on the other hand, you're not immediately inspired to go rewrite your entire app right now to take advantage of this, you can explore this week’s pro episode, which is showing the data pane on Ember Inspector. It opens up lots of different debugging and information gathering possibilities. I'll see you there.\r\n", publish_date: "2015-04-17", links: "* [github diff](https://github.com/jeffreybiles/bloggr-cli-client/commit/b230dbfa8d01451d7dfd655a3133c2b5590bc438)", thumbnail_image: "Screenshot_2015-04-18_14.33.36.png", permalink: "30-rearranging-table-columns", free: true, difficulty: "advanced", seconds: 306, wistia_embed: "<div id=\"wistia_shqthfjs2x\" class=\"wistia_embed\" style=\"width:800px;height:500px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"30-rearranging-columns\" /><meta itemprop=\"duration\" content=\"PT5M5S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/ec71da41b5bef69a77e9851c70039f6986df1373.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/9daa33459c6bbb973b02d6847354f34789b176cf.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=31074899&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F72b7910c2e131c86ba8a92bbd6486860391d847b.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=305.78&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fec71da41b5bef69a77e9851c70039f6986df1373.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F9daa33459c6bbb973b02d6847354f34789b176cf.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-06-21T15:33:23Z\" /><object id=\"wistia_shqthfjs2x_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:500px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=31074899&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F72b7910c2e131c86ba8a92bbd6486860391d847b.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=305.78&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fec71da41b5bef69a77e9851c70039f6986df1373.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F9daa33459c6bbb973b02d6847354f34789b176cf.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=31074899&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F72b7910c2e131c86ba8a92bbd6486860391d847b.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=305.78&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fec71da41b5bef69a77e9851c70039f6986df1373.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F9daa33459c6bbb973b02d6847354f34789b176cf.bin\" name=\"wistia_shqthfjs2x_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">30-rearranging-columns</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"shqthfjs2x\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/shqthfjs2x/metadata.js\"></script><script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"shqthfjs2x\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/shqthfjs2x/metadata.js\"></script>", code: "", guid: "9b9110708e77ce41928c2f320288f891334342a0"},
  {title: "28 - Metaprogramming Magic with arrays and the ember get helper addon", video_url: "https://www.youtube.com/embed/MBAkCHZYURs", description: "It's easy to hand-code your markup for every column in a table... but it's not always the right choice.  Especially when you want to be able to easily change things later.\r\n\r\nToday we use metaprogramming (and a sweet ember addon) to make it easy to add columns to our table- and unlock crazy new abilities that we'll use in episodes 29 and 30.", transcript: "## Preview of Awesomeness\r\n\r\nIn the next couple screencasts, we're going to make something really awesome. Let me show you. Let's say that you're wanting to show these posts, but you don't really care when they're updated. That's fine. You also don't care who the author is. That's cool too. Oh, and you want to display created before the title. Yeah, we can do that. Best of all, it's all in the URL, so you can keep your settings. \r\n\r\nI show you this at the start because we're going to have put in a little bit of work before we get to the cool parts, and I don't want you giving up part way through. So let's get started.\r\n\r\n\r\n## Abstract the Columns\r\n\r\nThe first bit of work we'll have to do is abstract the columns. Right now, you can see all 4 of them are hard-coded, both in the header and in the body, so let's move that array to our JavaScript. Here we have the available columns array, and it has important information like the title and the property, as well as the way we want it to be displayed. It's different for plain text versus a date because we'll want to do some processing on the date. Then we have columns, which right now is just an alias for available columns, but will be much more later on.\r\n\r\nWhen we go to the template, we'll want to replace the headers and the body. Let's start with the header. We'll loop through each of the columns and set the title as the column title, and then the sort property as the column property. Then, selected sorts and is ascending will be the same as before. With that, we can delete the hard-coded ones. Let's check and make sure, and it is still displaying like before. \r\n\r\nNow we'll pull the same trick with the data display, but it's going to be a little bit harder, as you can see, because all of these are much less homogeneous than the sortable headers are. We start off with our each loop, but then we have a little bit of a problem because we can't just do post.author, like we could down here, because each of these columns is going to have a different property they want to call, and that property is stored on column.property, but that won't work either because then post is going to look for a column property on itself. \r\n\r\n## ember-get-helper\r\n\r\nLuckily, there's an ember add-on for this, ember-get-helper from Jane Murphy. I've already installed the add-on, so we can just use it here, get, and then the object, and then the key, the dynamic key. Let's go ahead and surround this by a TD, and then remove the previous things. When we check, we can see that it's working just like before, but the date isn't formatted quite like we would want, so let's go ahead and fix that. \r\n\r\nWe have our format date helper, however, we only want to apply it to dates. Luckily, we have our display property, so we can use that. We can check to see what the display property is, and display based on that, and we go back and we see that our dates are much more readable while still not processing the author and title as dates. \r\n\r\n## A Hint of Awesome\r\n\r\nSo far in this episode, we've dried up some code and made it a little bit easier to read, but we haven't really done anything powerful yet. Now let me show you how to add a column. That's all you have to do. It's that easy to add columns, whereas before, we would have had to add several rather long lines. It also paves the way for the amazing things we're going to be doing in the next episode, so join us in this week's Pro episode as we learn how to toggle columns at will, and then save that information in the URL. I'll see you soon.\r\n", publish_date: "2015-04-11", links: "* [Github diff](https://github.com/jeffreybiles/bloggr-cli-client/commit/87a73d96b5aba8bd068e7e66873c74f37a95d68d)\r\n* [Get Helper Addon](https://github.com/jmurphyau/ember-get-helper)", thumbnail_image: "Screenshot_2015-04-12_13.50.36.png", permalink: "28-metaprogramming-magic-with-arrays-and-the-ember-get-helper-addon", free: true, difficulty: "advanced", seconds: 311, wistia_embed: "<div id=\"wistia_2ppotskma8\" class=\"wistia_embed\" style=\"width:800px;height:528px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"28-metaprogramming-magic-with-arrays-and-ember-get-helper\" /><meta itemprop=\"duration\" content=\"PT5M10S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/1cdb15e23bcf11d3f818b15dfb08bd857ca24632.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/954a1c715d825a60e8729650bf273b4d682d69d9.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=36426519&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F600bb7ac172411b1bf13956b542a5bc419e96c3a.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=310.796&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F1cdb15e23bcf11d3f818b15dfb08bd857ca24632.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F954a1c715d825a60e8729650bf273b4d682d69d9.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-07-03T03:36:25Z\" /><object id=\"wistia_2ppotskma8_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:500px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=36426519&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F600bb7ac172411b1bf13956b542a5bc419e96c3a.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=310.796&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F1cdb15e23bcf11d3f818b15dfb08bd857ca24632.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F954a1c715d825a60e8729650bf273b4d682d69d9.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=36426519&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F600bb7ac172411b1bf13956b542a5bc419e96c3a.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=310.796&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F1cdb15e23bcf11d3f818b15dfb08bd857ca24632.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F954a1c715d825a60e8729650bf273b4d682d69d9.bin\" name=\"wistia_2ppotskma8_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">28-metaprogramming-magic-with-arrays-and-ember-get-helper</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"2ppotskma8\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/2ppotskma8/metadata.js\"></script>", code: "", guid: "6ba9f97c2268e8db4c82cc282178081f7741e764"},
  {title: "17 - Ember Inspector 2 - Exploring Objects", video_url: "https://www.youtube.com/embed/Rp9rOHt8JGE", description: "Use the Ember Inspector to explore the Ember Object Model, and the various attributes and connections on your app's Objects (Models, Controllers, Components, etc.)", transcript: "One of the big advantages of using the Ember Inspector, is the ability to explore your objects. There's two ways to do that and I'll show you both of them during this screencast. \r\n\r\nThe first way is whenever you see a $E, you can click on it and that will then make $E in the console. It'll set it to whatever you clicked on. Then you can use that to start exploring. You can get the name, you can get various properties, you can call methods on it. This is the more flexible method, but it requires you to know a lot about your model, what it's able to do.\r\n\r\nIf you're wanting more to explore and discover, the second method is simply to click on the name and then it will show you all the attributes. Not only can you see the attributes, you can change them as well. We'll take the under construction attribute, which is now false, and turn it into true. When I hit enter, you'll see that the village will disappear. You can change and edit your page live to see what happens.\r\n\r\nAnother thing you can do in this view is explore the object hierarchy. Ember uses an object model that's very similar to Ruby or other object oriented languages and different than the JavaScript prototypes. Using this view, you can explore what that looks like. We can see that Ember Observable is the farthest up in the chain. These objects inherit from Ember.Observable, then Ember.CoreObject, Ember.Object, Ember.Evented, DS.model.  Then from there, it gets a little complicated because this view is showing you Ember Data specific things that I'll explore more in the screen cast on Ember Inspector and Ember Data. \r\n\r\nYou'll see that in these you can look and see what properties are being set on the core object, on DS.model. Here we have the empty loading, dirty, and several things that Ember Data takes care of for you.\r\n\r\nLet's go ahead and look at this hierarchy on a controller. Here we have the properties for the controller and then going down we have properties that are common to an ArrayController, which we have over ridden. Then properties that are common to this subclass of the controller, and so on. We can go back up the chain and see where it diverges from the Ember Data. Here we can see that has Ember Observable, Core Object, and Object, just like Ember Data. Then it starts diverging. You can see how different objects have similarities to each other, how close they are in the hierarchy.  \r\n\r\nAlso included in this hierarchy are mixins. You'll be able to see and explore which mixins have been included in this object. \r\n\r\nThe exploration in Ember Inspector isn't good for just going up and down the object hierarchy. You can also go to other objects that are connected to the one you're currently on. For example, this controller has an arranged content property. Let's see what's in there. This has several different territories. If we click this one, we're back at where we got by clicking here.\r\n\r\nWe can start to see the relationships between various objects. If we go here, we can keep clicking through and keep discovering how things are related. If you want to go back, just hit this button here. If you want to close this side panel, just hit this button.\r\n\r\nThat's how we explore objects in the Ember Inspector. Next time we'll be taking a closer look at the view tree and what we can learn from that. See you then.", publish_date: "2015-02-15", links: "* [Sparkcast on installing Ember Inspector](/posts/16-ember-inspector-1-installing-the-ember-inspector)", thumbnail_image: "Screenshot_2015-02-15_11.53.05.png", permalink: "17-ember-inspector-2-exploring-objects", free: true, difficulty: "basic", seconds: 268, wistia_embed: "<div id=\"wistia_o9tqnf43n3\" class=\"wistia_embed\" style=\"width:800px;height:528px;\"><div itemprop=\"video\" itemscope itemtype=\"http://schema.org/VideoObject\"><meta itemprop=\"name\" content=\"sparkcasts 17- Ember Inspector 2- Exploring Objects\" /><meta itemprop=\"duration\" content=\"PT4M28S\" /><meta itemprop=\"thumbnailUrl\" content=\"https://embed-ssl.wistia.com/deliveries/f289c52cbc758576e38b9abf9d770f21dbabdc75.bin\" /><meta itemprop=\"contentURL\" content=\"https://embed-ssl.wistia.com/deliveries/a26b3987361c797b1202a1a3aa3934c089850644.bin\" /><meta itemprop=\"embedURL\" content=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27&autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=23155211&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F152c0fb71cd8947c0d593e183ebd68d978badea4.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=268.512&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Ff289c52cbc758576e38b9abf9d770f21dbabdc75.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fa26b3987361c797b1202a1a3aa3934c089850644.bin\" /><meta itemprop=\"uploadDate\" content=\"2015-07-03T04:26:14Z\" /><object id=\"wistia_o9tqnf43n3_seo\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" style=\"display:block;height:500px;position:relative;width:800px;\"><param name=\"movie\" value=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"bgcolor\" value=\"#000000\"></param><param name=\"wmode\" value=\"opaque\"></param><param name=\"flashvars\" value=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=23155211&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F152c0fb71cd8947c0d593e183ebd68d978badea4.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=268.512&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Ff289c52cbc758576e38b9abf9d770f21dbabdc75.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fa26b3987361c797b1202a1a3aa3934c089850644.bin\"></param><embed src=\"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2015-02-27\" allowfullscreen=\"true\" bgcolor=#000000 flashvars=\"autoPlay=false&banner=false&controlsVisibleOnLoad=true&customColor=747571&endVideoBehavior=reset&fullscreenDisabled=true&hdUrl%5B2pass%5D=true&hdUrl%5Bext%5D=flv&hdUrl%5Bheight%5D=800&hdUrl%5Bsize%5D=23155211&hdUrl%5Btype%5D=hdflv&hdUrl%5Burl%5D=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2F152c0fb71cd8947c0d593e183ebd68d978badea4.bin&hdUrl%5Bwidth%5D=1280&mediaDuration=268.512&playButtonVisible=true&quality=&showPlayButton=true&showPlaybar=true&showVolume=true&stillUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Ff289c52cbc758576e38b9abf9d770f21dbabdc75.bin%3Fimage_crop_resized%3D800x500&unbufferedSeek=false&videoUrl=https%3A%2F%2Fembed-ssl.wistia.com%2Fdeliveries%2Fa26b3987361c797b1202a1a3aa3934c089850644.bin\" name=\"wistia_o9tqnf43n3_html\" style=\"display:block;height:100%;position:relative;width:100%;\" type=\"application/x-shockwave-flash\" wmode=\"opaque\"></embed></object><noscript itemprop=\"description\">sparkcasts 17- Ember Inspector 2- Exploring Objects</noscript></div></div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"o9tqnf43n3\");\r\n</script>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/embed/medias/o9tqnf43n3/metadata.js\"></script>", code: "", guid: "57f3e05006f543c831adab5bf2f944bb4100c443"},
  {title: "86 - Login Form", video_url: nil, description: "The login form is the gateway to your application.  Make sure it works right.\r\n\r\nIn this episode we create the template for a login form, and give it some toy functionality that we will expand upon in upcoming episodes.\r\n", transcript: "Today we’re going to be continuing talking about our session authentication by doing a login screen. So when we go to the Authenticated route, one that’s behind the paywall, we’re given a login screen.\r\n\r\n\r\n![1 Login Screen](/content/images/2015/10/1-10.jpg)\r\n\r\n\r\nAnd so, if we put in the correct password, then we’ll be signed in. \r\n\r\n\r\n![2 Signed in successfully](/content/images/2015/10/2-9.jpg)\r\n\r\n\r\nBut if we put in the wrong password or a user that don’t exist, then we’ll be shown errors.\r\n\r\n\r\n![3 Unsuccessful signing in](/content/images/2015/10/3-10.jpg)\r\n\r\n\r\nSo how do we get there? Let’s go back to where we ended the last screencast. \r\n\r\n\r\n![command line code for ember-2.0-frontend](/content/images/2015/10/4-9.jpg)\r\n\r\n\r\nAnd I’ve only changed one thing. It’s that the authenticated routes point you to the login page instead of the users page, and we’ll fill this in with the form during this screencast.  \r\n\r\n\r\n![Login page](/content/images/2015/10/5-9.jpg)\r\n\r\n\r\nThe form will actually be the easiest part of this. \r\n\r\n\r\nSo first we’ll paste in some minimal css so it looks okay, \r\n\r\n\r\n![Minimal css in app.css file](/content/images/2015/10/6-9.jpg)\r\n\r\n\r\nand then we’ll get working on the html. So we’ll put in fields and labels for our username and password. This is basic html. I’m just going to type really fast here, and then we’ll have the action of `login`.\r\n\r\n\r\n![Code for the login action in login.hbs file](/content/images/2015/10/7-9.jpg)\r\n\r\n\r\nThis is our form. Notice that when we type in the password it does little dots. \r\n\r\n\r\n![Login page with a hidden password](/content/images/2015/10/8-8.jpg)\r\n\r\n\r\nThat’s because we had it `type=”password”`. \r\n\r\n\r\n![type=\"password\" code](/content/images/2015/10/9-8.jpg)\r\n\r\n\r\nAnd then when we hit in the login button, we want it to do something. We want it to try to log us in. So we have login methods both in our controller and in our session service.\r\n\r\n\r\n![login method written in login.js file](/content/images/2015/10/10-7.jpg)\r\n\r\n![login method written in session.js file](/content/images/2015/10/11-8.jpg)\r\n\r\n\r\nBut they’re predicated on just being handed the user and logging them in with no questions asked. And obviously that’s not going to work for us.\r\n\r\n\r\nSo in our controller, first we’re going to do a little bit of cleanup. We’re going to take all of this logic and we’re going to put it in a separate method,\r\n\r\n\r\n![Copying a chunk of code from the login method](/content/images/2015/10/12-7.jpg)\r\n\r\n\r\nso we can just have it named nicely and it won’t be confusing us, because we’re going to put a lot more logic that has directly to do with the login into this controller.\r\n\r\n\r\n![Code for the login.js controller](/content/images/2015/10/13-7.jpg)\r\n\r\n\r\nOkay, now that that’s out of the way, first we’ll recognize that we’re not just going to get a user passed to us. What we’re going to get is a username and a password. Then we’ll be passing those two to the login method on the session. Then we’ll be wanting it to do something different based on how that returns, so we’ll go ahead and assume it’s a `promise` and act accordingly. Here you can see that if it goes correctly, then we’re transitioning to the previous route like we were before, but if something goes wrong, then we’re logging `error` into the `console`, \r\n\r\n\r\n![Code which logs an error into the console](/content/images/2015/10/14-7.jpg)\r\n\r\n\r\nAnd now we need to change the session service, the login method, so that it takes the correct parameters and it returns a promise. So first we’ll put in the `userName` and the `password` parameters, then we’ll set it to return a `promise`. So most of what we’re about to do here is horrible and will be fixed in the next episode, so I’m just going to speed through it and go through the important things. \r\n\r\n\r\n![Code from session.js](/content/images/2015/10/15-7.jpg)\r\n\r\n\r\nSo we have the `if` statement and it’s going to check if the `userName` and `password` match. In the official one this will be going to the server. So if it’s true, then we’re going to set the `currentUser` and set the `cookies` like we did before and then we’re going to `resolve`. And we do still have to get the `user`, so we’re going to do something once again terrible, and I repeat, we’re going to be doing better next week. The important thing is that it’s a promise and if the things match then it gets resolved. Then, if the things don’t match, then we’re going to `reject` and we’ll send an `error`.\r\n\r\n\r\n![Code which rejects a user if the username and password don't match](/content/images/2015/10/16-6.jpg)\r\n\r\n\r\nWe’ll see this in action. We can just type random stuff, and when we hit login it will logout the error `Username and password did not match`.\r\n\r\n\r\n![Error text displaying in the console](/content/images/2015/10/17-6.jpg)\r\n\r\n\r\nBut if we put in our user name with the emberscreencasts and then our password of ‘awesome’ and we login, it logs us in. \r\n\r\n\r\nSo tracing our route through the code again, we’re grabbing the `username` and `password`, and then we’re calling the login method on `session`, and it’s going to be a `promise`, so if that `promise` resolves, then we’re going to `transitionToPreviousRoute`, and if it rejects, then we’re going to log the error,\r\n\r\n\r\n![console.log(\"Error: \", reason)](/content/images/2015/10/18-4.jpg)\r\n\r\n\r\nand this is how we set up our promise. \r\n\r\n\r\n![session.js code](/content/images/2015/10/19-4.jpg)\r\n\r\n\r\nSo I hope you’ll join me in the pro-episode where we first show the success and the failure messages using ember.cli.flash, and then we’ll add more granular validations besides just do they match or not. \r\n\r\n\r\nThen the week after that we’ll talk about the token authentication, the one we’ve all been waiting for, and then how to create a signup form. I hope to see you then.\r\n", publish_date: "2015-10-28", links: "* [Github diff](https://github.com/jeffreybiles/monster-demo-frontend/commit/30e3f969b655954abfe3e34e4a8cef3ca6ebd52f)\r\n", thumbnail_image: "Screenshot_2015-10-21_10.36.33.png", permalink: "86-login-form", free: true, difficulty: "intermediate", seconds: 279, wistia_embed: "<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script><div class=\"wistia_embed wistia_async_w3cmna7inz\" style=\"height:528px;width:800px\">&nbsp;</div>", code: "The login form itself:\r\n\r\n```hbs\r\n<h1>Login</h1>\r\n\r\n<div class=\"field\">\r\n  <label>User Name</label>\r\n  {{input value=userName}}\r\n</div>\r\n<div class=\"field\">\r\n  <label>Password</label>\r\n  {{input value=password type=\"password\"}}\r\n</div>\r\n<div class=\"btn btn-primary\" {{action 'login'}}>Login</div>\r\n```\r\n\r\nThe login action in the controller:\r\n\r\n```js\r\nactions: {\r\n    login(){\r\n      let {userName, password} = this.getProperties('userName', 'password');\r\n      this.get(\"session\").login(userName, password).then(()=>{\r\n        this.transitionToPreviousRoute()\r\n      }).catch((reason)=>{\r\n        console.log(\"Error: \" + reason)\r\n      })\r\n    }\r\n}\r\n```\r\n\r\nThen the login method in the session service.  This will be greatly improved upon next week.\r\n\r\n```js\r\nlogin(userName, password){\r\n  return new Promise((resolve, reject)=>{\r\n    if (userName === 'emberscreencasts' && password === 'awesome'){\r\n       //get user from somewhere\r\n       this.set('currentUser', user)\r\n       Cookies.set('userId', user.id)\r\n       resolve()\r\n    } else {\r\n       reject(\"Username and password did not match\")\r\n    }\r\n  })\r\n}\r\n```", guid: "2cd85b7441e697a782387769edc7e813e566d55a"},
  {title: "112 - Ember Data 2.0: Miscellaneous Adapter Customizations", video_url: nil, description: "In this video we go over the last of the Ember Data RESTAdapter customization methods.  The miscellaneous ones that didn’t make it into the top 5 of episode 110 or the deep dive of 111.  \r\n\r\nAll of them - the shouldReload set of methods, pluralization techniques, sortQueryParams, serializer, defaultSerializer, coalesceFindRequests, findMany, groupRecordsForFindMany, and generateIdForRecord.\r\n", transcript: "Two episodes ago, we looked at the most common ways to customize the RESTAdapter, and by extension the JSONAPIAdapter. In the last episode, we looked at some of the core methods like `buildURL`, or the private method `ajax`, and what those do and how those are called by things like `createRecord` and `deleteRecord`, and how they call out to things like `urlForCreateRecord` and all the other `urlFor` methods. \r\n\r\n\r\nIn this episode, we’re looking at the other miscellaneous methods that we can customize, such as the `shouldReload` methods, sorting query params, and others. \r\n\r\n\r\nWe’ll start with the `shouldReload` methods. So we have four of them, `shouldBackgroundReloadAll`, `shouldBackgroundReloadRecord`, `shouldReloadAll`, and `shouldReloadRecord`. Now all in record are the modifiers that do pretty much what you think they should. ‘All’ is when you’re finding an array, all of a certain type, and ‘record’ is when you’re finding just one record.\r\n\r\n\r\nBut what’s the difference between ‘reload’ and ‘background reload’? So the reload methods, they check basically to see whether it should reload every time a record is requested. And so if it’s true, then it will always go back and reload the record and it will wait while it’s doing that. If it’s false, then it will return immediately if it has a cached record. \r\n\r\n\r\nIf I was renaming this, I would rename it `ignoresCacheRecord`, and I would rename this `ignoresCacheAll`, because that’s essentially what you’re deciding, is whether it’s going to ignore the cache. \r\n\r\n\r\nThe ‘background reload’ is basically asking whether it reloads at all. So if you have true for `ignoresCache`, then it’s always going to reload, even before it returns something. But here it’s asking, okay, after we’ve returned what’s in the cache, should we go in the background and reload something? \r\n\r\n\r\nGenerally, your answer to this is going to be yes, we should stay up-to-date with the server. I’m not really sure of a situation where we'd want to return false. If you can think of one, please tell me in the comments because that’s interesting. \r\n\r\n\r\nNow moving on to our next miscellaneous methods. Next, we have `serialize`, which it just proxies to the serializer’s `serialize` method, so not much to see here in the default. You can overwrite it or overwrite it and call `super` if you want it to do more stuff. And then we have `defaultSerializer` which is more for people who are making add-ons, and if you specify your `defaultSerializer`, then it’ll automatically do that without the user having to go in and overwrite their application serializer for each one. \r\n\r\n\r\nAn important customization you can do that isn’t directly a method on the adapter is inflections. So you can make a word have an irregular pluralization or an uncountable pluralization. And this is important because when you’re remember `pathForType`, it calls `pluralize`. So it’s important that you get the verbs the same as they are on the server. I’ve gotten this to work mostly in our app, so it’s changing it from taco... the plural was previously tacos, just adding an ‘s’, and now it’s tacqi, but there’s an interaction somewhere here where it messes up one of the other models. So somewhere in our app we’ve customized something that broke this. Hopefully that won’t happen in your app.\r\n\r\n\r\nSo back to our methods. We have `sortQueryParams` which as you’ve noticed, you might’ve noticed, I’ve added some query params to our query, and by default, it sorts them in alphabetical order. However, we can change that. The documentation has a great example of a way that we can change it, so we’ll go ahead and just copy that, and we’ll see that it’s sorting it in reverse alphabetical order. And of course it’s not just alphabetical order of the keys or reverse alphabetical order of the keys. You could do it by the value, by several other things.\r\n\r\n\r\nThe next three come in a trio. The first and one you’re most likely to overwrite is `coalesceFindRequests`.  It is false by default in the RESTAdapter, but if you turn it on to true, then it will group together your `findRecord` requests and do those in a `findMany`. And so if you want to find user with an id of 3, user with an id of 5, user with an id of 6, if this is false it will be three separate calls, if it’s true it’s just going to be one call, and that’s obviously better for your load times. \r\n\r\n\r\nIf you decide to turn this to true, then they’re going to be grouped in different ways using `groupRecordsForFindMany`, and you can decide how those are going to be grouped together based on what your server can handle. And then eventually, it’s going to call `findMany`.\r\n\r\n\r\nFinally, the last one we’re going to go over today is `generateIdForRecord`. And this won’t be used very often. It’s only going to be used if you’re generating the id on the client’s side. And typically what happens is you send your record to the server, and then the server gives it an id, and then when it’s sent back, the client gets that id, and that’s really good because if it’s generated on the client, there’s a much greater chance of there being an id collision with other users. But there could be situations where you need it and `generateIdForRecord` will help you out in those situations. \r\n\r\n\r\nAlright. In the past three episodes, we’ve gone over I believe all of these, and hopefully that will help you when you’re trying to make your own adapter or customize the RESTAdapter. \r\n\r\n\r\nIn the final episode on adapters, we’re going to go over the differences between the RESTAdapter and the JSONAPIAdapter. I’ll see you then.", publish_date: "2016-01-27", links: "* [DS.Adapter base class](http://emberjs.com/api/data/classes/DS.Adapter.html#method_createRecord )\r\n* [DS.RESTAdapter class](http://emberjs.com/api/data/classes/DS.RESTAdapter.html) \r\n\r\n", thumbnail_image: "Screenshot_2016-01-04_18.31.08.png", permalink: "112-ember-data-20-miscellaneous-adapter-customizations", free: true, difficulty: "advanced", seconds: 373, wistia_embed: "<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script><div class=\"wistia_embed wistia_async_ybgd9n8ot7\" style=\"height:528px;width:800px\">&nbsp;</div>", code: "* **shouldReload set of methods** together decide when to check for updates from the server- before returning the current cache value, after returning current cache value, or never.\r\n* **pluralization techniques** are how you add unconventional pluralizations (`Ember.Inflector.inflector.irregular('taco', 'tacqi')`)\r\n* **sortQueryParams** changes how the query params are sorted in the request\r\n* **serializer** proxies to the serializer's serialize method.\r\n* **defaultSerializer** is for people creating addons who want to specify which serializer to default to.\r\n* **coalesceFindRequests** says whether to delegate many find requests to findMany at a time, to save # of network requests.  Default true.\r\n* **findMany** finds many specific records based on the IDs given.\r\n* **groupRecordsForFindMany** is used to determine how to group the IDs given to findMany\r\n* **generateIdForRecord** generates a (hopefully) unique ID for the record, should you (unwisely) want to generate those cliest-side.", guid: "55532c53ccbb8805586a9bc2b50ae388b2b8f4e3"},
  {title: "87 - Login Form - Validations and Flash Messages", video_url: nil, description: "Users want to know that their login attempt succeeded or failed… and if it failed, they want to know why.\r\n\r\nGive them that knowledge with Validations and Flash Messages.\r\n", transcript: "Hey and welcome back. So last time we made a login screen but it wasn’t very good at communicating back to the user. For example, we put the error in the console. So, let’s take care of that first with some ember-cli-flash, and this whole episode will act as a review of ember-cli-flash, of the login field, and of the ember validation sequence and tying them all together to make a much better login screen.\r\n\r\n\r\n![1 Current, unacceptable login screen](/content/images/2015/10/1-9.jpg)\r\n\r\n\r\nSo first we’ll install the ember-cli-flash add-on, and of course restart the server. \r\n\r\n\r\n![2 installing ember-cli-flash and restarting the server](/content/images/2015/10/2-8.jpg)\r\n\r\n\r\nThen in the top level handlebars, we’ll go ahead and put a place to display the flash messages. \r\n\r\n\r\n![3 Leaving a place to install flash messages in the application.hbs code](/content/images/2015/10/3-9.jpg)\r\n\r\n\r\nThen in the `login` controller, we’ll display the error with the `flashMessages`. As a bonus, we’ll go ahead and display a positive flash message whenever the session login works. \r\n\r\n\r\n![4 code putting in a positive flash message](/content/images/2015/10/4-8.jpg)\r\n\r\n\r\nWe’ll see this in action real quick. \r\n\r\n\r\n![5 ‘You have signed in successfully’ message](/content/images/2015/10/5-8.jpg)\r\n\r\n\r\nIf you felt that explanation was too fast, you can go back to Episode 57 where we take longer to explain it in more detail. \r\n\r\n\r\n![6 Episode 57](/content/images/2015/10/6-8.jpg)\r\n\r\n\r\nIn the same way when we’re doing the validations, we’ll be taking a lot of content from Episodes 64 and 65, so if you have more questions, go ahead and look those up. \r\n\r\n\r\n![7 Episode 64 & 65](/content/images/2015/10/7-8.jpg)\r\n\r\n\r\nGetting started with Ember-Validations is fairly easy. First, we put this in our `package.json`. It’s still on `alpha.4`.\r\n\r\n\r\n![8 package.json code](/content/images/2015/10/8-7.jpg)\r\n\r\n\r\nAnd then, we just run `npm install` and then we restart the server. \r\n\r\n\r\n![10 running npm install and restarting the server with the command line](/content/images/2015/10/9-7.jpg)\r\n\r\n\r\nIn our `login` controller, we’ll import the `ember-validations` mixin and then mix it in. Then we’ll put in our `validations` hash so we’re making sure that the username is present and that the password is both present and a minimum length of 6. \r\n\r\n\r\n![11 login.js code which establishes that the password meets the qualifications](/content/images/2015/10/10-6.jpg)\r\n\r\n\r\nNow we need to display those errors, and we’ll go ahead and display them in line. We’ll create the `display-errors` component \r\n\r\n\r\n![12 Creating a new code file for the display-errors component](/content/images/2015/10/11-7.jpg)\r\n\r\n\r\nand it will be passed two things, `showErrors` and `errors`. \r\n\r\n\r\n![13 Code which passes the display-errors component 'showErrors' and 'errors'](/content/images/2015/10/12-6.jpg)\r\n\r\n\r\nIn the `login` controller handlebars, we’ll put the `display-errors` components and pass them in the specific errors as well as the `showErrors` property that we’ll be defining soon. \r\n\r\n\r\n![14 login.js code](/content/images/2015/10/13-6.jpg)\r\n\r\n\r\nSo we can define `showErrors` as `true` right off the bat, and then it’ll show all the errors, \r\n\r\n\r\n![15 setting 'showErrors' to 'true'](/content/images/2015/10/14-6.jpg)\r\n\r\n\r\nbut the problem is it’ll show all the errors right off the bat, and users don’t want to start off with a broken form. \r\n\r\n\r\n![16 Ugly login form, a result of setting showErrors to 'true'](/content/images/2015/10/15-6.jpg)\r\n\r\n\r\nSo what we’ll do is we’ll start `showErrors` as `false`, and then if the login action fails, then we’ll set the `showErrors` to `true`. \r\n\r\n\r\n![17 using this.set() to change 'showErrors' to true if the login fails](/content/images/2015/10/16-5.jpg)\r\n\r\n\r\nAnd we can see our login form behaving how we would want, showing no errors at first and then showing errors once they try to login incorrectly.\r\n\r\n\r\n![18 Correct, improved login form](/content/images/2015/10/17-5.jpg)\r\n\r\n\r\nSo there we have it, the login form is working like we want and we had a whirlwind tour of three previous episodes. So I’ll see you next week when we discuss token authentication and the signup form.\r\n", publish_date: "2015-10-30", links: "* [Screencasts on ember-validations](https://www.emberscreencasts.com/tags/form-validations)\r\n* [Screencast on ember-cli-flash](https://www.emberscreencasts.com/posts/57-ember-cli-flash)\r\n* [Github diff](https://github.com/jeffreybiles/monster-demo-frontend/commit/432890483add0085cfeea6db5fb90a93fb256052)\r\n", thumbnail_image: "Screenshot_2015-10-21_10.37.02.png", permalink: "87-login-form-validations-and-flash-messages", free: false, difficulty: "intermediate", seconds: 186, wistia_embed: "<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script><div class=\"wistia_embed wistia_async_414i3lh2mh\" style=\"height:528px;width:800px\">&nbsp;</div>", code: "Add ember-cli-flash:\r\n\r\n```js\r\n\"ember-cli-flash\": \"1.3.6\"\r\n```\r\n\r\nPut a place for flash messages in application.hbs\r\n\r\n```hbs\r\n  <div class=\"flash-messages\">\r\n    {{#each flashMessages.queue as |flash|}}\r\n      {{flash-message flash=flash}}\r\n    {{/each}}\r\n  </div>\r\n  {{outlet}}\r\n```\r\n\r\nThen you can create flash messages during your login action:\r\n\r\n```js\r\n    login(){\r\n      let {userName, password} = this.getProperties('userName', 'password');\r\n      this.get(\"session\").login(userName, password).then(()=>{\r\n        this.get('flashMessages').success('You have signed in successfully')\r\n        this.transitionToPreviousRoute()\r\n      }).catch((reason)=>{\r\n        this.get('flashMessages').danger(reason)\r\n      })\r\n    }\r\n```\r\n\r\nTo get validations, add the ember-validations addon\r\n\r\n```js\r\n\"ember-validations\": \"2.0.0-alpha.4\"\r\n```\r\n\r\nSet validations in controller:\r\n\r\n```js\r\nimport EmberValidations from 'ember-validations';\r\n\r\nexport default Ember.Controller.extend(EmberValidations, {\r\n  showErrors: false,\r\n  session: Ember.inject.service(),\r\n  validations: {\r\n    userName: {\r\n      presence: true\r\n    },\r\n    password: {\r\n      presence: true,\r\n      length: {minimum: 6}\r\n    }\r\n  },\r\n  //...\r\n  // In the login action, if there's an error, showErrors turns to true\r\n})\r\n```\r\n\r\nA component for displaying errors: \r\n\r\n```hbs\r\n{{#if showErrors}}\r\n  {{#each errors as |error|}}\r\n    <p style=\"color: red;\">{{error}}</p>\r\n  {{/each}}\r\n{{/if}}\r\n```\r\n\r\nThe component is used:\r\n\r\n```hbs\r\n<div class=\"field\">\r\n  <label>User Name</label>\r\n  {{input value=userName}}\r\n  {{display-errors errors=errors.userName showErrors=showErrors}}\r\n</div>\r\n<div class=\"field\">\r\n  <label>Password</label>\r\n  {{input value=password type=\"password\"}}\r\n  {{display-errors errors=errors.password showErrors=showErrors}}\r\n</div>\r\n```", guid: "db1005ef958e9eb13f1aba516b0eab5662943808"},
  {title: "89 - Registration Form", video_url: nil, description: "In the final part of our series on hand-rolling an authentication system, we tackle the registration form- how users become a part of the system.\r\n\t\r\nTo do this, we copy a lot of what worked in the login system, but change some key things and put in some more robust validation.\r\n", transcript: "Hello and welcome back. This is the last in our series about hand rolling your own authentication system. So previously we had authenticated routes as well as ways to login, but we don’t have a way to register a user yet. We’re going to be doing that today, and we’re going to be combining the stuff we’ve learned in the previous episodes to create something that is similar but has its own special requirements. \r\n\r\n\r\nSo first we’re going to create the `register` route, \r\n\r\n\r\n![1 Code for the register route](/content/images/2015/10/1-11.jpg)\r\n\r\n\r\nand then we’ll add a `link-to` register if you’re not signed in. \r\n\r\n\r\n![2 Code for adding a link-to register](/content/images/2015/10/2-10.jpg)\r\n\r\n\r\nThen we’ll need a template for our new route. We’ll go ahead and copy the login template since it’s going to be very similar, and then just change a few things so that it makes sense.\r\n\r\n\r\n![3 login.hbs file](/content/images/2015/10/3-11.jpg)\r\n\r\n![4 naming the register.hbs file](/content/images/2015/10/4-10.jpg)\r\n\r\n![5 Code for a register button](/content/images/2015/10/5-10.jpg)\r\n\r\n\r\nThis form as well as several other things we do this episode do repeat themselves, and so are good candidates for a refactor. However, we won’t be tackling that this episode. \r\n\r\n\r\nSo this is what that gets us. Now we need to make the Register button do something.\r\n\r\n\r\n![6 Registration page, now with a 'Register' button](/content/images/2015/10/6-10.jpg)\r\n\r\n\r\nThe login controller already has functionality very similar to what we need, so we’ll copy it and change a few things like we did before, but here we’re going to have to change a few more things.\r\n\r\n\r\n![7 Copying login.js code](/content/images/2015/10/7-10.jpg)\r\n\r\n![8 Renaming the new file as register.js](/content/images/2015/10/8-9.jpg)\r\n\r\n![9 Code for register.js file](/content/images/2015/10/9-9.jpg)\r\n\r\n\r\nThe first is that we want our validations to explicitly run before we call anything on the session. We could’ve done this on Login, and we probably should’ve, but it’s even more important now. \r\n\r\n\r\nSo the validations are a promise and then our session register is also a promise, so we’ll go ahead and stack those promises. \r\n\r\n\r\n![10 Stacking validation and session register codes](/content/images/2015/10/10-8.jpg)\r\n\r\n\r\nSo we have several different promises happening here, stacked on top of each other, and they’re caught by the same catch block.\r\n\r\n\r\n![11 Catch block of code](/content/images/2015/10/11-9.jpg)\r\n\r\n\r\nAnd this is generally good, except now we have the `reason` coming back, the error coming back, in different formats sometimes. So we’ll need to take care of that. \r\n\r\n\r\nWe’ll do this by checking the `type` and if it’s a `string`, something that’ll look nice to the user, will show a flash message. Otherwise we just take the error and assume that it’s the type that is going to show up in the template already. \r\n\r\n\r\n![12 Showing a flash message if the error is a string](/content/images/2015/10/12-8.jpg)\r\n\r\n\r\nNow obviously this won’t work for all situations. You need to customize this so it’s specific to what you’re expecting to be returned.\r\n\r\n\r\n![13 Code for register.js file](/content/images/2015/10/13-9.jpg)\r\n\r\n\r\nSo now we have the `register` action in the `register` controller. Let’s build the `register` method in the session service. \r\n\r\n\r\n![14 Locating the register action in the register controller](/content/images/2015/10/14-8.jpg)\r\n\r\n\r\nOnce again, we’re going to copy the login and then expand on it. \r\n\r\n\r\n![15 Copying the login.js file](/content/images/2015/10/15-8.jpg)\r\n\r\n\r\nThe changes here are fairly easy. So we name it `register` instead of `login`, and then instead of posting to the `sessions` route, we post to the `users` route. We could also post to a `register` route if we wanted to, if we made our server like that.\r\n\r\n\r\n![16 Code for session.js file](/content/images/2015/10/16-7.jpg)\r\n\r\n\r\nFinally, we make changes in our error handling. \r\n\r\n\r\nSo previously, there was always the same error, \r\n\r\n\r\n![17 Code for the error message 'Username and password did not match'](/content/images/2015/10/17-7.jpg)\r\n\r\n\r\nbut now we might get back multiple errors, so we have to take that into account. So we’ll get the `response` and then we’ll get the `responseJSON` and the `error` from that using `Ember.get`. \r\n\r\n\r\n![18 using Ember.get to make use of different kind of error messages](/content/images/2015/10/18-5.jpg)\r\n\r\n\r\nNow this screencast is mostly about the JavaScript, but let’s take a quick peek at our server method. So this is the `create` users method, and we’ll basically be getting the email and password. If there’s already a user with that email, then we’ll send back an error. Otherwise, we’ll create the user, save it, and then send back their `authentication_token` and their `user_id`. \r\n\r\n\r\nYou also note that although we usually do the `authorize_user` action before everything, we create an exception for the `create` method.\r\n\r\n\r\n![19 Code for the 'create' method exception](/content/images/2015/10/19-5.jpg)\r\n\r\n\r\nSo now let’s see this in action. So we type a user name, and of course before it even sends off to the server, it does the validations.\r\n\r\n\r\n![20 Warning messages for an incorrect password](/content/images/2015/10/20-4.jpg)\r\n\r\n\r\nSo let’s get rid of those validations, and good, we’ve registered. \r\n\r\n\r\n![21 Webpage after a successful registration](/content/images/2015/10/21-4.jpg)\r\n\r\n\r\nNow we can try to register that same one again and it’ll give us the server error. \r\n\r\n\r\n![22 Server error resulting from trying to register the same username and password](/content/images/2015/10/22-4.jpg)\r\n\r\n\r\nSo this is the end of our series about how to rule your own authentication method in Ember. This understanding that you’ve gained should help you in the next week or two when we explore Ember Simple Auth and Torii, and we’ll see how they can make things we’ve done easier and how they can do things that we hadn’t yet created. I’ll see you then.\r\n", publish_date: "2015-11-06", links: "", thumbnail_image: "Screenshot_2015-10-29_15.36.21.png", permalink: "89-registration-form", free: false, difficulty: "intermediate", seconds: 247, wistia_embed: "<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script><div class=\"wistia_embed wistia_async_knal24ns39\" style=\"height:528px;width:800px\">&nbsp;</div>", code: "The register template is similar to the login template:\r\n\r\n```hbs\r\n<h1>Register</h1>\r\n\r\n<div class=\"field\">\r\n  <label>User Name</label>\r\n  {{input value=userName}}\r\n  {{display-errors errors=errors.userName showErrors=showErrors}}\r\n</div>\r\n<div class=\"field\">\r\n  <label>Password</label>\r\n  {{input value=password type=\"password\"}}\r\n  {{display-errors errors=errors.password showErrors=showErrors}}\r\n</div>\r\n<div class=\"btn btn-primary\" {{action 'register'}}>Register</div>\r\n```\r\n\r\nThe register controller is also very similar, but the validation logic has been tightened up, along with the error-handling logic:\r\n\r\n```js\r\nimport Ember from 'ember';\r\nimport EmberValidations from 'ember-validations';\r\n\r\nexport default Ember.Controller.extend(EmberValidations, {\r\n  showErrors: false,\r\n  session: Ember.inject.service(),\r\n  validations: {\r\n    userName: {\r\n      presence: true\r\n    },\r\n    password: {\r\n      presence: true,\r\n      length: {minimum: 6}\r\n    }\r\n  },\r\n  actions: {\r\n    register(){\r\n      let {userName, password} = this.getProperties('userName', 'password');\r\n      this.validate().then(()=>{\r\n        return this.get(\"session\").register(userName, password)\r\n      }).then(()=>{\r\n          this.get('flashMessages').success('You have signed up successfully')\r\n          this.transitionToPreviousRoute()\r\n      }).catch((reason)=>{\r\n        this.set(\"showErrors\", true)\r\n        if(typeof(reason) === 'string'){\r\n          this.get('flashMessages').danger(reason, {sticky: true})\r\n        }\r\n      })\r\n    }\r\n  },\r\n\r\n  transitionToPreviousRoute(){\r\n    var previousTransition = this.get('previousTransition');\r\n    if (previousTransition) {\r\n      this.set('previousTransition', null);\r\n      previousTransition.retry();\r\n    } else {\r\n      // Default back to homepage\r\n      this.transitionToRoute('index');\r\n    }\r\n  }\r\n\r\n})\r\n```\r\n\r\nThe `register` method on the session service is also similar, just to a different endpoint:\r\n\r\n```js\r\nregister(userName, password){\r\n    return new Promise((resolve, reject)=>{\r\n      Ember.$.ajax({\r\n        method: \"POST\",\r\n        url: '/users',\r\n        data: {\r\n          email: userName,\r\n          password: password\r\n        }\r\n      }).then((data)=>{\r\n        var token = data['authentication_token']\r\n        var user_id = data['user_id']\r\n        Cookies.set('userId', user_id)\r\n        Cookies.set('authenticationToken', token)\r\n        this.initializeFromCookie()\r\n        resolve()\r\n      }, (reason)=>{\r\n        reject(`Server error: ${Ember.get(reason, 'responseJSON.error')}`)\r\n      })\r\n    })\r\n  },\r\n```\r\n\r\nOn the server side, I edited the POST /users endpoint:\r\n\r\n```rb\r\nclass UsersController < ApplicationController\r\n  before_action :authorize_user, except: [:create]\r\n\r\n  def resource_class_name\r\n    'user'\r\n  end\r\n\r\n  def create\r\n    email = params[:email]\r\n    password = params[:password]\r\n    if user = User.find_by(email: email)\r\n      render status: 400, json: {error: \"A user with that email address already exists\"}\r\n    else\r\n      user = User.create(email: email, password: password, password_confirmation: password)\r\n      user.save\r\n      render json: {authentication_token: user.authentication_token, user_id: user.id}\r\n    end\r\n  end\r\nend\r\n```", guid: "e4fad16eb481b49636390f0641ab5aa0ff0d7478"},
  {title: "88 - Token Authentication with Server Sessions", video_url: nil, description: "While client-side sessions are great for keeping regular users out of trouble, it’s not enough to stop a determined hacker.  For that, you’ll need token authentication.\r\n\r\nIn this episode we’ll set up token authentication between Ember and a Rails server session.  We’ll cover two different ways to pass the token in Ember, with the strengths and weaknesses of each.", transcript: "Hey and welcome back to Ember Screencasts. Today we’re going to continue talking about authentication. So last time we had our Monsters app and we had different pages that were authenticated that you couldn’t get to if you weren’t signed in. So if we log out and we try to get to those pages, it’ll just tell us to log back in. So our data is safe, right? Well, not so fast, because here we can still access all that data if we know a little bit about our API. \r\n\r\n\r\n![1 User data](/content/images/2015/11/1.jpg)\r\n\r\n\r\nSo a malicious hacker could probably guess something like this, especially if they’ve created web apps in the past. So today we’re going to be protecting this information with token authentication. We can think of this problem as having several different parts. One is like a security guard that’s asking for your identification. It wants to know that you have your ID badge. The second part is how our Ember app is displaying that ID badge. So we’ll set up the security guard first in our Rails app, and we’ll speed through that since it’s going to be a little bit different for every type of backend you use. And so with a snap, I’ve got a Rails app asking for identification, and since we haven’t yet set up our Ember app to give that authentication, it now blocks us out. That’s what we want. Let me show you how that works. \r\n\r\n\r\nSo first, we add an `authentication_token` to our `users`.\r\n\r\n\r\n![2 Adding an authentication_token to users](/content/images/2015/11/2.jpg)\r\n\r\n\r\nThen, in our `application_controller` which can be accessed by all of our other controllers, we create a method called `current_user` that’ll get the `X-CSRF-Token` from the frontend app. This is basically asking for your badge. And then it says alright, if your badge matches the user then you must be that user. So that’s our `current_user` method.\r\n\r\n\r\n![3 Code for current_user method](/content/images/2015/11/3.jpg)\r\n\r\n\r\nAnd then we have the `authorize_user` method which is saying, hey, check for the badge, and if not, give them a `401` unauthorized. And then we call that.\r\n\r\n\r\n![4 Calling the 401 error code in the authorize_user method](/content/images/2015/11/4.jpg)\r\n\r\n\r\nSo for example in `UsersController`, we use the `before_action` so it’s going to check for their badge before it ever gives them any user information. \r\n\r\n\r\n![5 before_action code in UsersController class](/content/images/2015/11/5.jpg)\r\n\r\n\r\nWe can also set up some API endpoints to only give you information that’s related to your current user. So here when we’re asking for multiple `team_memberships`, it’ll only give you the memberships that are on the `current_user`, not all the memberships. \r\n\r\n\r\n![6 current_user.team_memberships code](/content/images/2015/11/6.jpg)\r\n\r\n\r\nSo that’s what having a badge gets you. That’s how it protects you. But just checking for the badge isn’t enough. You have to give the user a badge. And so, we do that in the `sessions_controller`. So what it does is you send it the email and the password, this is what happens when you login, and then it tries to authenticate that user with the password. And if it authenticates, then it returns the `json` with the `user_id` in the `authentication_token`, their badge, and if it doesn’t authenticate then it gives them back a `401`, the ‘you’re not allowed here’ header.\r\n\r\n\r\n![7 Code which authenticates a user if they have valid login information but otherwise issues a '401' error](/content/images/2015/11/7.jpg)\r\n\r\n\r\nSo the specific Rails application for this is you do this with `bcrypt`, \r\n\r\n\r\n![8 'bcrypt' gem in the Gemfile](/content/images/2015/11/8.jpg)\r\n\r\n\r\nand `has_secure_password`.\r\n\r\n\r\n![9 has_secure_password code in the User class](/content/images/2015/11/9.jpg)\r\n\r\n\r\nAnd then also whenever you save a user for the first time, we have some stuff set up so it’ll create the authentication token. And for the passwords, it has a password hash so it never stores the plain password in the database. That’s very important, never save the plain password. \r\n\r\n\r\nAlright, so that is the Rails details, and I’ll go over this all as a system at the end after I go over the Ember stuff, and so that’ll help you when you’re trying to make it so you’re setting up with a different backend that’s not Rails. \r\n\r\n\r\nSo now we’re going to work on our Ember app. \r\n\r\n\r\n![10 Code for the ember app in session.js file](/content/images/2015/11/10.jpg)\r\n\r\n\r\nThis is the `login` method we had before. It’s obviously terrible. Let’s get rid of a lot of that terrible stuff, leaving the stuff that we’ll need to keep and put in somewhere in our new system.\r\n\r\n\r\n![11 Deleting bad code](/content/images/2015/11/11.jpg)\r\n\r\n\r\nAlright, so it’s returning a `promise`, and now we’re going to want to actually send something up to the server. We’ll do that with an `ajax` call. So we’ll take our `ajax` call, it’s a `POST`, and we’ll send it to the `url: '/sessions'` and send it the `userName` and `password`, and then it’ll get back the `data`. The `data` is the stuff that we’ve sent back from the create session method on our Rail server, so we’ll be getting the `user_id` and the `authentication_token`. So we’ve got our `token` and `user.id` and we’ll want to use those.\r\n\r\n\r\n![12 user.id code](/content/images/2015/11/12.jpg)\r\n\r\n\r\nFirst, we’ll set the `user.id` cookie, and we’ll have to change this to an underscore so it’s setting the user ID so Ember knows what is happening, who signed in, and then, we’ll also need to set another cookie, the `authenticationToken` cookie, and that will of course be `authentication_token` and we’ll be using that to send up to the server.\r\n\r\n\r\n![13 authentication_token code ](/content/images/2015/11/13.jpg)\r\n\r\n\r\nAnd then we’ll want to sign in the `user`. We don’t have the user yet. We’ll need to grab that from the server. Luckily, we’ve already built in the `initializeFromCookie` method which is usually done on `init`, but we can call it here.\r\n\r\n\r\n![14 Calling the 'initializedFromCookie' method](/content/images/2015/11/14.jpg)\r\n\r\n\r\nSo that will take the `userId`, and it’ll just find that user from the store. \r\n\r\n\r\nAlright. And finally we will `resolve`.\r\n\r\n\r\n![15 Code for resolve()](/content/images/2015/11/15.jpg)\r\n\r\n\r\nAnd of course we need to figure out how to `reject` it if it’s rejected, so we’ll put that in here, in the fail block.\r\n\r\n\r\n![16 Putting the reject code in the fail block](/content/images/2015/11/16.jpg)\r\n\r\n\r\nThen we’ll need to do some cleanup on `logout`. So we remove the `userId`. We’ll also want to remove the `authenticationToken`. \r\n\r\n\r\n![17 Cleaning up the 'logout' code](/content/images/2015/11/17.jpg)\r\n\r\n\r\nSo now that Ember has our badge, our authentication token set in our cookies, let’s go about using this, showing it on every request. How do we do that? \r\n\r\n\r\nWell, one way is to create an initializer, \r\n\r\n\r\n![18 Creating an initializer in the command line](/content/images/2015/11/18.jpg)\r\n\r\n\r\nand what this initializer does is it will... we’ll use jquery `ajaxPrefilter`, and then we’ll set the request header, the `X-CSRF-Token`, to the token that is set in our cookies. \r\n\r\n\r\n![19 Setting the request header equal to the token in the cookies](/content/images/2015/11/19.jpg)\r\n\r\n\r\nAnd so what this will do is every time we’re sending a request via `ajax`, it’ll set the request header, the `X-CSRF-Token` header, as the `token`. So this message of showing the `token` using the `ajaxPrefilter` will work on both Ember data calls and plain ajax calls. \r\n\r\n\r\nIf you’re sure that you’re only going to be using Ember data calls, then you can use the `headers` hash in your Ember data adapter. \r\n\r\n\r\n![20 Webpage for ember.js header customization](/content/images/2015/11/20.jpg)\r\n\r\n\r\nSo let’s try out our setup. \r\n\r\n\r\n![21 monster cards login page](/content/images/2015/11/21.jpg)\r\n\r\n![22 monster cards page after successful login](/content/images/2015/11/22.jpg)\r\n\r\n![23 monster cards login page](/content/images/2015/11/23.jpg)\r\n\r\n\r\nSo as we can see, it redirects us back to Login as it should, and we can’t access other people’s data. But if we login, then it’ll correctly show us everything.\r\n\r\n\r\n![24 logging in](/content/images/2015/11/24.jpg)\r\n\r\n![25 monster cards data for user, after having logged in](/content/images/2015/11/25.jpg)\r\n\r\n\r\nLet me walk you through every step of what just happened. So when the `login` method is called, it sends the `userName` and the `password` to the `sessions` create method in Rails.\r\n\r\n\r\n![26 Code for the sessions.js file](/content/images/2015/11/26.jpg)\r\n\r\n\r\nAnd so in the `sessions` create method, it tries to authenticate it by `email` and `password`. And if that works, then it sends back the `user_Id` and the `authentication_token`. \r\n\r\n\r\n![27 code for the authentication token](/content/images/2015/11/27.jpg)\r\n\r\n\r\nNow that authentication token and user ID are set in the `Cookies`, and then the user is initialized from `Cookies`. \r\n\r\n\r\n![28 session.js code](/content/images/2015/11/28.jpg)\r\n\r\n\r\nAnd so then whenever you send something, it’ll get passed through the `ajaxPrefilter`, and that’ll attach the authentication token to the request header.\r\n\r\n\r\n![29 ajax-prefilter.js code, with X-CSRF-Token code attached to the request header](/content/images/2015/11/29.jpg)\r\n\r\n![30 sessions_controller.rb code](/content/images/2015/11/30.jpg)\r\n\r\n\r\nThen in Rails, or your server, whenever you try to get something, it’ll get that request header, and then it’ll find the `current_user` from that token, like this. \r\n\r\n\r\n![31 User.find_by(authentication_token: token)](/content/images/2015/11/31.jpg)\r\n\r\n\r\nAnd there are also places where it won’t get by unless that `current_user` exists and you have the right token, and we call that before most of our methods.\r\n\r\n\r\n![32 application_controller.rb code](/content/images/2015/11/32.jpg)\r\n\r\n\r\nOf course if you have the correct `X-CSRF-Token`, then you’ll get what you had before and you’ll get all the information you need. \r\n\r\n\r\nSo that’s how you do token authentication with Ember and your backend server. \r\n\r\n\r\nNext session, we’ll be talking about how to create a user. So we have how to login a user and how to authenticate that user and get what they need, but we need a way to create that user. We’ll do that next time. I’ll see you then.\r\n", publish_date: "2015-11-04", links: "* [github diff for client](https://github.com/jeffreybiles/monster-demo-frontend/commit/5899b34b463e2e93a9768a57c35382df7bd6fef2)\r\n* [github diff for server](https://github.com/jeffreybiles/monster-demo/commit/d1d7ee7488bc1ca8d16c079fed16191d14ec90f2)", thumbnail_image: "Screenshot_2015-10-27_13.12.27.png", permalink: "88-token-authentication-with-server-sessions", free: true, difficulty: "advanced", seconds: 486, wistia_embed: "<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script><div class=\"wistia_embed wistia_async_fnx8ocbvkm\" style=\"height:528px;width:800px\">&nbsp;</div>", code: "In the session service, we take the userName and password, send them to the server, get back the token, then log in using the current ID and the token.\r\n\r\n```js\r\n  login(userName, password){\r\n    return new Promise((resolve, reject)=>{\r\n      Ember.$.ajax({\r\n        method: \"POST\",\r\n        url: '/sessions',\r\n        data: {\r\n          email: userName,\r\n          password: password\r\n        }\r\n      }).then((data)=>{\r\n        var token = data['authentication_token']\r\n        var user_id = data['user_id']\r\n        Cookies.set('userId', user_id)\r\n        Cookies.set('authenticationToken', token)\r\n        this.initializeFromCookie()\r\n        resolve()\r\n      }, ()=>{\r\n        reject('Username and password did not match')\r\n      })\r\n    })\r\n  },\r\n```\r\n\r\nIn `initializers/ajax-prefilter.js` we tell jQuery how to attach the token to our headers.  That's how `initializeFromCookie` in the above file succeeds, as well as all subsequent calls to protected APIs.\r\n\r\n```js\r\nexport function initialize( container, application ) {\r\n  Ember.$.ajaxPrefilter(function(options, originalOptions, jqXHR) {\r\n    var token = Cookies.get('authenticationToken')\r\n    if(token){\r\n      jqXHR.setRequestHeader('X-CSRF-Token', token);\r\n    }\r\n  });\r\n}\r\n\r\nexport default {\r\n  name: 'ajax-prefilter',\r\n  initialize: initialize\r\n};\r\n```\r\n\r\nThe server has to match the signature of these calls.  [Here is the Rails version of that code](https://github.com/jeffreybiles/monster-demo/commit/d1d7ee7488bc1ca8d16c079fed16191d14ec90f2)", guid: "316cb354dbaf9ae4b5fc35ee611f207772b74838"},
  {title: "73 - Action Bubbling", video_url: "", description: "Actions aren't just on controllers- they're also on routes (and, as we'll see next time, on components).\r\n  \r\nIn this video we discover how actions bubble up the route hierarchy, and explore methods you can use to block or propagate an action after catching it.\r\n\r\nWe also look at action bubbling on the DOM and the 'send' method.", transcript: "null", publish_date: "2015-09-11", links: "* [Ember Guides on action bubbling](http://guides.emberjs.com/v1.13.0/templates/actions/#toc_action-bubbling)\r\n* [Github diff for route actions](https://github.com/jeffreybiles/simpler-ember-sparks-website/commit/4860fb7780b5b0a8286027176ccedd21251046ee)\r\n* [Github diff for stopping DOM bubbling](https://github.com/jeffreybiles/simpler-ember-sparks-website/commit/51eb5147cb32fe91e85f122560dc43b127d20edb)", thumbnail_image: "Screenshot_2015-09-07_10.47.30.png", permalink: "73-action-bubbling", free: false, difficulty: "intermediate", seconds: 264, wistia_embed: "<div id=\"wistia_m1m3kn3nnn\" class=\"wistia_embed\" style=\"width:800px;height:528px;\">&nbsp;</div>\r\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\"></script>\r\n<script>\r\nwistiaEmbed = Wistia.embed(\"m1m3kn3nnn\");\r\n</script>", code: "Action bubbling happens from the controller to the parent route, to it's parent route, up until you reach the application route.\r\n\r\nReturning true (or not having a named action on the controller/route in question) will bubble it up.  You can \r\n\r\n```js\r\nactions: {\r\n  takeOffHat(){\r\n    this.set('hasHat', false)\r\n    return true\r\n  }\r\n}\r\n```\r\n\r\nYou can also send it to a specific action with `send`\r\n\r\n```js\r\nactions: {\r\n  putOnHat(color){\r\n    this.set('hatColor', color)\r\n    this.set('hasHat', true)\r\n    this.send('pressRelease')\r\n  }\r\n}\r\n```\r\n\r\nFinally, you can set `bubbles=false` in an action helper to stop DOM event bubbling (different than the action bubbling in the previous two examples)\r\n\r\n```hbs\r\n<button {{action 'takeOffHat'}}>Take off the hat <button {{action 'howToRemoveHat' bubbles=false}}>How?</button></button>\r\n```", guid: "542a07d3c0dd8c62c8bba3c4022b0d8090d0abc7"},
  {title: "94 - Finding Current Route and Creating Breadcrumbs with ui-navigator-service", video_url: nil, description: "Finding the current route name and doing cool stuff with it has become less difficult than it once was... and ui-navigator-service makes it even easier!\r\n\t\r\nIn this episode we use ui-navigator-service to create “breadcrumbs”, a series of links at the top of our page that shows our current route hierarchy.\r\n", transcript: "So, you may have at times wondered how to get the route name in Ember, and this used to be really hard. Fortunately, it’s gotten easier with time. Currently you can just call `currentRouteName` in the application controller, but a new add-on makes it even easier. So it’s built off the `currentRouteName` method, but then he adds a bunch of convenience methods, such as checking whether it’s an `indexRoute`, getting the `primaryRoute`, so the thing at the base, and getting the `currentNode`, as well as offering a shorter way to call it `currentPath` instead of `currentRouteName`.\r\n \r\n\r\nGetting started with it, this add-on, is really simple. You install it and now that service is in your app. To use this service, we’ll inject it onto one of our controllers. And then from within the template, we’ll call the `currentPath`. This gives us the full route, `tags.tag.show`. But this isn’t really good as a breadcrumb. We want them to be links and be able to be displayed a little bit differently. Let’s go ahead and do that now.\r\n\r\n\r\nSo to prepare for this, I had to change this tag route. It used to be a resource, but now it’s a route, because otherwise what we’re about to do wouldn’t have worked. So if you have nested resources and you want to do this technique, change them to routes. It’ll be a little bit of a pain, but this is where Ember is going anyways.\r\n\r\n\r\nSo our result that we want is an index route to the left here, and then a `tags` link and then a `tag` link and then a `show` link, and we’ll go ahead and put slashes between those. To make that happen, let’s create the template that we want, then we’ll create a data structure that can fill it. So we’ll loop through each of the breadcrumbs, and then we’ll `link-to` the breadcrumbs and we’ll give it a `path`, and then we’ll display the name. So we want a list of things, a list of objects, that have a path and a name. \r\n\r\n\r\nSo we’ll create that, the `breadCrumbs` property, on our controller. We’ll make it a `computed` property that depends on `navigator.currentPath`. And so first we’ll get `navigator.currentPath` and we’ll split it based on the periods, so it’ll be split into an array. And then, we’ll check to see if it’s the index route, and if it is the index route we’ll pop the last object which is the index because it’s going to be the same as the one above. \r\n\r\n\r\nNext, we’ll return those breadcrumbs but we’re going to map them so that they’re an object. So the `map` function takes the `crumb` and the `index`, and we’ll use that index to get the `path` from the array of `crumbs`. And then we’ll return that `path` as well as the `name`. \r\n\r\n\r\nSo that gets us these links, and the links take us where we want to go. That’s pretty great. We also want an index link here, so let’s go ahead and add that.\r\n\r\n\r\nWe’ll go ahead and we’ll change this to setting a variable. We’ll call them `breadedCrumbs`. And then what we’ll `return` is we’ll take an array that just has the `index` pasted onto the beginning. \r\n\r\n\r\nSo now we have what we want. We have the index at the beginning of it and that of course links to our index. \r\n\r\n\r\nNow this is all looking pretty great, but there are a few downsides to it. Number one being, let’s say you have a route, such as tag, that is kind of a dead route. It just passes through an outlet. In that case, you don’t really want to have it in there, but how to remove it is left as an exercise to the reader.\r\n\r\n\r\nThis particular implementation could also run into problems when you have unusual routes such as `hat.bar.foo`. It’s going to try to interpret this as three nested routes when it’s really just one. \r\n\r\n\r\nA more robust breadcrumb implementation that is more than just five minutes of video, can be found at Ember-crumbly with this add-on. But the point is still that `ui-navigator-service` is really useful. I know that I’ve wanted to use something like this in the past and I’m glad it’s here for us now. \r\n\r\n\r\nSo that’s all for right now. I hope you’ll join us in the pro-episode this week when we talk more about Ember promises.\r\n", publish_date: "2015-11-25", links: "* [ui-navigator-service](https://github.com/lifegadget/ui-navigator-service )\r\n* [ember-crumbly](https://github.com/poteto/ember-crumbly ) (a more complete breadcrumbs implementation)\r\n* [Github Diff](https://github.com/jeffreybiles/simpler-ember-sparks-website/commit/5f4beef3bf21256c05f48af221222c2c957d61c4)\r\n", thumbnail_image: "Screenshot_2015-11-25_20.24.26.png", permalink: "94-finding-current-route-and-creating-breadcrumbs-with-ui-navigator-service", free: true, difficulty: "intermediate", seconds: 269, wistia_embed: "<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script><div class=\"wistia_embed wistia_async_kn9vbtfgm0\" style=\"height:528px;width:800px\">&nbsp;</div>", code: "Using the navigator to define the breadcrumbs array in applicationt/controller.js:\r\n\r\n```js\r\nimport Ember from 'ember';\r\n\r\nexport default Ember.Controller.extend({\r\n  navigator: Ember.inject.service(),\r\n  breadCrumbs: Ember.computed('navigator.currentPath', function(){\r\n    var crumbs = this.get('navigator.currentPath').split('.');\r\n    if(this.get('navigator.isIndexRoute')){\r\n      crumbs.popObject() //get rid of the index route at end\r\n    }\r\n    var breadedCrumbs = crumbs.map(function(crumb, index){\r\n      var path = crumbs.slice(0, index).join('.');\r\n      return {\r\n        path: path == '' ? 'index' : path,\r\n        name: crumb\r\n      }\r\n    })\r\n    return [{path: 'index', name: 'index'}].concat(breadedCrumbs)\r\n  })\r\n})\r\n```\r\n\r\nDisplaying the breadcrumbs in the template:\r\n\r\n```hbs\r\n{{#each breadCrumbs as |breadCrumb|}}\r\n  {{#link-to breadCrumb.path}}{{breadCrumb.name}}{{/link-to}} /\r\n{{/each}}\r\n```", guid: "323f1bab90be6a9714ca73481b4676d4b4987f7d"},
  {title: "92 - Promises Basics", video_url: nil, description: "Promises are a tool for handling asynchronous communication, and they are commonly used in Ember applications.  They’re even built in to Ember Data, route handling, and other parts of the Ember source.\r\n\t\r\nThis episode introduces the `then`, `catch`, and `finally` blocks, how to chain them together, and how to use them with either named or anonymous functions.\r\n", transcript: "Today’s episode we’re going to be talking about promises. So we’ve used promises in previous episodes, most recently we’ve created the `login` method which was a promise, and then we used the `then` and `catch` methods in order to work with the promise. We’re going to find out more about what those are this week. \r\n\r\n\r\nPromises are a way of doing asynchronous communication. If you want to talk to a server, local storage, something that might take a little while to get back to you, then promises are a much better option than just callbacks, which is what we were doing before promises. In addition to being included by default within Ember, they’re also worked pretty deeply into the Ember ecosystem. For example, Ember data returns a promise when you do a find or a fetch, and the model hook in a route is set up so it’ll take a promise and then work with it so you don’t have to know that a promise ever happened. It looks like it’s all synchronous, and that’s part of the magic of promises. \r\n\r\n\r\nSo when you’re using a promise, there are three methods that you need to know about. They are `then`, `catch`, and `finally`. So `then` is what you call when something goes right, `catch` is what you call when something goes wrong, and `finally` is what you call no matter what, at the end. So let’s see how that applies to our `login` method. \r\n\r\n\r\nSo our `login` method, we created it as a promise and we’ll go more into that, how that happens, in this week’s pro-episode. But we created a promise and it can either resolve or reject. So if it resolves, if things went correctly, then we do whatever is in the `then` block. So we do a promise `.then`, and we put in, in this case, an anonymous function here and we do whatever is in there. \r\n\r\n\r\nAnd then if something goes poorly, then we call `.catch`, and you can return a `reason`, it’s usually a good idea. You can also return something from the `then`. So you could perhaps do like the `user`. We just didn’t in this case. \r\n\r\n\r\nAnd then you can call `finally`. Let’s go ahead and create a `finally` block here. So we put it after all this, and notice we’re chaining them, and then with the `finally` we can... we’ll just put in a `console.log`.\r\n\r\n\r\nThen we’ll go ahead and first we’ll trigger the `catch` block by putting in an incorrect user name and password, and it does the stuff in the `catch` block and it also logs 'We are done with the promises'. And then we’ll go ahead and fill out the correct information, and we’ll login, and notice it does the stuff in the `success` block, and then it still does the `finally`. And it does this even though we’re transitioning, we’re redirecting during the `then` block, but it still does the `finally`, even though we’re going to a different route. We can have our `then` blocks and our `catch` blocks and our `finally` blocks. We can also stack `then` blocks. \r\n\r\n\r\nSo we can do a series of steps. Let me show you a simple example. So we’re going to add a `then` block before what we have currently as our first `then` block. Now in this `then` block, we’re going to logout the `user_id`, what we have as the user, and then we’ll just return it, and then we’ll go ahead and put a `console.log` in the next `then` block to make sure it’s been passed on. And as you can see, we’ve added a little bit of extra text here so that we can tell that it’s being passed on from this `return` block, and not directly from the original one. \r\n\r\n\r\nSo let’s access this again. Here we go. We’ve got our first console log, our second log that’s taking in the return value from the first `then`, and then of course our `finally`. So to go over this order it does the first `then` and then whenever this has been returned, it does the second `then`, and then there have been no thrown errors so it skips the `catch` block and it goes to the `finally` block. If at any point there’s an error, or the promise is rejected instead of resolved, it’ll go to the `catch` block. \r\n\r\n\r\nSo far we’ve only been using anonymous functions, functions that we define for the express purpose of this promise. But we can also have named functions. So we’ll go ahead and take all this and we’ll rename it to `logId`. And so with just a couple of quick changes, we can have it as a named function and call it like this. Then in our app we’ll see that it works the same way. We could actually do all of these as named methods. So I’m going to do that with a snap of my fingers. So look how cool this is. We can tell what’s happening. So first we `login`, and then we log the ID, and then we do a `successfulLoginTransition`. If there’s any errors, we `catch` and `displayErrors`, and then `finally` we do a `sillyLog`. So this is a beautiful way to structure your code that makes it extremely easy to read, and we can do this, thanks to promises. \r\n\r\n\r\nHey, one correction from future Jeffrey. So in these two we’re calling `this`, but we’re not specifying which `this` it is here, so we’re going to have to call `.bind(this)` so we get the context right. Previously that was fine because we were using the fat arrows, but now we aren’t and so we have to do this. In the rest of the video this will not be done like this because I’m making this correction from the future. Alright, now back to the regular show.\r\n\r\n\r\nIn addition to promise’s role in Ember data and the router, they’re also used in the test helpers, specifically the asynchronous test helpers. So all of these are a promise where they return a promise, and so you can `visit` something, `fillIn` something, `click` something, all that, and it will automatically wait until that action is complete. That’s really powerful, and if you’ve ever tried to test Ember into something like Capybara or Cucumber, you know that being able to use promises to help you know when it’s okay to move on rather than just waiting and hope you’ve waited long enough, which is error-prone and slows down your tests. Using promises is much better. \r\n\r\n\r\nSo in this episode we learned about promises, how to chain them, how to use the `then`, `catch`, and `finally` blocks, and how to do named promises, how to put a named method in there. In the next episode, we’ll be showing how to create a promise from scratch, how to start the promise chain like we did in our `login` method. Then next week we’ll be talking about how to handle multiple concurrent promises using the arrays and hashes. I’ll see you then. \r\n", publish_date: "2015-11-18", links: "* [API docs](http://emberjs.com/api/classes/RSVP.Promise.html)\r\n* [rsvp.js](https://github.com/tildeio/rsvp.js/)\r\n* [Promise-aware test helpers](http://guides.emberjs.com/v1.10.0/testing/test-helpers/ )\r\n", thumbnail_image: "Screenshot_2015-11-08_09.56.46.png", permalink: "92-promises-basics", free: true, difficulty: "intermediate", seconds: 424, wistia_embed: "<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script><div class=\"wistia_embed wistia_async_sv6kq5zsk0\" style=\"height:528px;width:800px\">&nbsp;</div>", code: "The login action calls a series of methods.  The first is `login`, which starts the promise chain.  Each `then` continues the promise chain.  `catch` catches any errors.  `finally` is called at the end no matter what.  Each function here is named, though anonymous functions are allowed.  `.bind(this)` is required for two of them since the function uses `this` and therefore needs correct scope.\r\n\r\n```js\r\nactions: {\r\n    login(){\r\n      let {userName, password} = this.getProperties('userName', 'password');\r\n      this.get(\"session\")\r\n            .login(userName, password)\r\n            .then(this.logId)\r\n            .then(this.successfulLoginTransition.bind(this))\r\n            .catch(this.displayErrors.bind(this))\r\n            .finally(this.sillyLog)\r\n    }\r\n  },\r\n```\r\n\r\nThese are the named functions.   They are not particularly instructive, but are here for your reference.\r\n\r\n```js\r\n  logId(user){\r\n    console.log('user_id', user)\r\n    return \"user's ID is \" + user\r\n  },\r\n\r\n  successfulLoginTransition(user){\r\n    console.log(user)\r\n    this.get('flashMessages').success('You have signed in successfully')\r\n    this.transitionToPreviousRoute()\r\n  },\r\n\r\n  displayErrors(reason){\r\n    this.set(\"showErrors\", true)\r\n    this.get('flashMessages').danger(reason)\r\n  },\r\n\r\n  sillyLog(){\r\n    console.log('We are done with the promises!')\r\n  },\r\n```\r\n", guid: "1b02a7fc4ef1c5a8e51381d564fa8c44d0b5b73b"},
  {title: "93 - Creating New Promises", video_url: nil, description: "Sometimes you want to start a new promise chain or have greater control over the timing of events.  By manually creating a promise, you can do that.\r\n\t\r\nIn this video we cover creating a new promise and resolving or rejecting the promise.  We use two examples- a custom AJAX login and an Ember Data findAll request.\r\n", transcript: "In our last episode we talked about promises, and we did some really nice, readable things with promises, but we left kind of a mystery how we got this whole promise chain started because `get(“session”)` isn’t a promise and then `login` returns a promise. How does it do that?\r\n\r\n\r\nWell, so you `return` a new promise, you create a new promise by doing this, `Ember.RSVP.Promise`, and then as arguments you pass in `resolve` and `reject` which are two functions that are passed to every promise. If things are successful then you call `resolve` and you pass it whatever arguments you want passed back. \r\n\r\n\r\nSo here we’re resolving with the `user_id` and then if the `logId` method here, it gets it as an argument. Then if something went wrong, we call the `reject` method and we send back whatever we want, usually a stream representing the reason. And then, here we use the `displayErrors` method, and of course we’re grabbing the `reason` here. \r\n\r\n\r\nSo to get out of a promise, to `return` from a promise we call either `resolve` or `reject`, and we send back the arguments that we want the thing that’s going to handle this promise to have.\r\n\r\n \r\nSo now that we know the basics of creating a promise, let’s go over this one in detail, and we’ll explain why we want to use this here. So here within our promise, the first thing we do is we create an `ajax` call. This is in itself a promise, but why can’t we just return that? One reason is that `jquery` promises are slightly different than `RSVP` promises. One major difference is that although they can both take `.then`s, the `ajax` promises, the `jquery` promises, can’t take the `.catch`s or `.finally`s. Beyond that I’m sure there are other reasons and if you’d like to add more in the comments, please do. \r\n\r\n\r\nAnyway, so our `ajax` call is a promise, and so it’s thenable, so we call `then` on it, and we’re getting back the `data`, so we process the data like we showed in a previous episode, and then we’re taking one piece of that data and we’re calling `resolve` to return it. So in the happy path, we create this promise and then we create another promise inside there from the `ajax` call. We go through after that promise returns, we `then` it, and we take all these steps, and then we `resolve`. That resolution returns the `user_id` which is what triggers this `then` which takes the `user_id` as an argument. So that’s the happy path. \r\n\r\n\r\nThe sad path is the second function given to `.then` since the `ajax` promises don’t have a `.catch`, we have to use the second function. And `.catch` in `RSVP` is just shorthand for\ta null first function and the function you give it is the second function. Anyways, so all we do here is call `reject` with the reason which is then caught by this `.catch`\r\n\r\n\r\nAnd that’s how you create a promise and start a promise chain. Let’s go ahead and do another example. So here remember I said `this.store.findAll`. That returns a promise. And so that is if we wanted to do something with this data afterwards and maybe return something else in the model, then we’re going to have to create a new promise. So we’ll start by creating a new `RSVP.Promise` and we’ll have a `resolve` and `reject` handlers, and we’ll stick our `findAll` method in there. And that `findAll` method is thenable, so we’ll do a `then`, we’ll get the `response` from it, and then we’ll go ahead and `logout` the response for now. That’s all we’ll do for now. And then we’ll go ahead and `resolve` the `response`, and then we’ll go ahead and add a `catch` method if something goes wrong. We’ll get the `reason`, we’ll `logout` the `reason` as well as an explanation if `finding monsters failed`, and then we’ll `reject` with that reason. \r\n\r\n\r\nThen when we load the page, we’ll see that it’s logged out correctly as well as loaded correctly. And there’s more stuff you can do in here.  For the most common stuff there are helpers that are more Embery, so don’t go doing this all the time, but it’s a good example of how `RSVP` promises can be created and used. \r\n\r\n\r\nSo that’s it for today. In the future I’ll be talking about how you can handle multiple asynchronous calls in one promise, in either arrays or hashes. I’ll see you then.\r\n", publish_date: "2015-11-20", links: "* [Promise API docs](http://emberjs.com/api/classes/RSVP.Promise.html)\r\n* [RSVP API docs](http://emberjs.com/api/classes/RSVP.html)\r\n", thumbnail_image: "Screenshot_2015-11-08_14.14.38.png", permalink: "93-creating-new-promises", free: false, difficulty: "intermediate", seconds: 296, wistia_embed: "<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script><div class=\"wistia_embed wistia_async_dydh53q5h7\" style=\"height:528px;width:800px\">&nbsp;</div>", code: "The method that starts the promise chain.  Notice the resolve and reject handlers.  Notice we can't use the `catch` block because the ajax call returns a different type of promise than RSVP.  We also can't use the `finally` block.  This is one of the reasons we must wrap it in a new promise.\r\n\r\n```js\r\n  login(userName, password){\r\n    return new Ember.RSVP.Promise((resolve, reject)=>{\r\n      Ember.$.ajax({\r\n        method: \"POST\",\r\n        url: '/sessions',\r\n        data: {\r\n          email: userName,\r\n          password: password\r\n        }\r\n      }).then((data)=>{\r\n        var token = data['authentication_token']\r\n        var user_id = data['user_id']\r\n        Cookies.set('userId', user_id)\r\n        Cookies.set('authenticationToken', token)\r\n        this.initializeFromCookie()\r\n        resolve(user_id)\r\n      }, ()=>{\r\n        reject('Username and password did not match')\r\n      })\r\n    })\r\n  },\r\n```\r\n\r\nWe also can use promises in the model hook of the route.\r\n\r\n```js\r\nexport default Ember.Route.extend(Authenticated, {\r\n  model(){\r\n    return new Ember.RSVP.Promise((resolve, reject)=>{\r\n      this.store.findAll('monster').then((response)=>{\r\n        console.log('the response is', response)\r\n        resolve(response)\r\n      }).catch((reason)=>{\r\n        console.log('finding monsters failed', reason)\r\n        reject(reason)\r\n      })\r\n    })\r\n  }\r\n});\r\n```", guid: "661b7800d69e2ec640f0985087ac9ddb8475374e"},
  {title: "97 - Ember Data 2.0: Getting Data from the Server with findRecord and findAll", video_url: nil, description: "In this second installment of our Ember Data 2.0 series, we go over two of the most common ways to get data from the server: findRecord and findAll.\r\n\t\r\nAlong the way, we’re introduced to the store, and discover that Ember automatically calls findRecord for us in some routes.\r\n", transcript: "In the last episode, we showed how to set up Ember data and how to make our DS models. This week, we’ll talk about the two most common ways to get data from the server, starting with `findAll`. \r\n\r\n\r\nSo the `store` is where we’re going to put all the data after we have it from the server. It is a data store, very well-named. And this store gives us a lot of very useful methods. We’ll be looking at `findAll` and `findRecord` today, and some of these other ones soon.\r\n\r\n\r\nHow it fits in is the store sits just outside of your application, I mean it’s in it, but we can think of it as separate, and then it interacts with the Cloud, with our server, through the adapter. So no matter which adapter you use, you’ll still interact with the store the same way. That’s really useful, because that means that if you need to change adapters, you won’t have to change much code within your application.\r\n\r\n \r\nSo now we know what the store is, and the store is automatically available on all routes. You can get to it on other Ember objects by injecting it. It’s now a service. \r\n\r\nSo on the store, we can call `findAll`, and it’s going to find all of the type `monster`, as described here in our `models/monster`. \r\n\r\n\r\nSo you ask the store to `findAll` monsters, and then it’ll go to the adapter, here the `ActiveModelAdapter`, and we've only defined it in an application, you can specify different adapters per model. We haven’t done that here. We’ll get to that in a later video in this series. So the `ActiveModelAdapter` knows how to ask the server for information. \r\n\r\n\r\nSo this is the path that it’s having. The application calls `findAll` on the store, the store calls `findAll` on adapter, and then it sends an Ajax request to your server, and your store and your application are getting back promises. \r\n\r\n\r\nSo this is the XHR request that our adapter is sending. There’s a lot there. We can see that it’s a GET one, it is being sent to a certain URL, and this is a lot of stuff that I’m really glad we did not have to worry about. But of course if you do want to change this stuff, there are ways to do it which we’ll cover later in the series.\r\n\r\n\r\nSo you send that request to the Cloud, and then you get it back and it resolves the promises. Now for the purposes of this router, we can think of it as just returning an array. But it actually returns a `DS.AdapterPopulatedRecordArray`, and through all that magic... Well, it returns monsters and team memberships, because that’s how our `ActiveModelAdapter` works. \r\n\r\n\r\nAnd somehow, notice that it’s only calling monsters, it’s not calling team memberships. Ember data has both monsters and team memberships. So somewhere in here it adds them both to the store. If we trace the promises we can see that it happens in something called ‘Extract payload’, which we won’t discuss this episode. For now you can just think of it as magic, but there is a method to this magic and if you dig deep in Ember, you will always find what’s happening. It’s never truly magic. \r\n\r\n\r\nAnyways, this `findAll` and the monsters model, including the `hasMany` relationship with team members, is enough to get the monsters and the team members into the store and useable by you. I’m very glad I don’t have to do that myself. \r\n\r\n\r\nSo now our second method of the day, `findRecord`. We’re already calling `findRecord`. It’s just happening automatically. The default model method in a route calls `findRecord` on the name of the route, monster in this case, and it takes the monster ID. So if we build this out, then this will end up doing the same thing as just not defining the model. \r\n\r\n\r\nIf you want to demonstrate this, then you could remove what’s happening here, and we’ll see that this ends up making this route not work. So what used to be a `findRecord`, either explicitly or by default, if you remove that line it doesn’t work. \r\n\r\n\r\nSo `findRecord` acts a lot like `findAll`. It takes the type of record it wants, but then it also takes an ID, and it’s going to use that ID to get just one record from the server. \r\n\r\n\r\nBut you’ll notice something interesting. If we go to our network, we’ll see that... here yes, it did call the monsters too. Here is what it gets back, just a single monster as well as an array of team memberships. But then when we change, it’s not calling any more, and that’s because `findRecord`, it first checks the store to see if it’s already there. \r\n\r\n\r\nSo it’s illustrated here, if it’s already in the store, it resolves immediately. This is an example of the caching that Ember data does for you that can save you a lot of time when you’re navigating around your application.\r\n\r\n\r\nOf course you may be wondering why... if the monsters, the `findAll` was called before the `findRecord` for two, why was this called at all? And presumably that’s because these promises weren’t resolved by the time this call was made. \r\n\r\n\r\nSo there you have it, `findAll` and `findRecord`. These are the two most common ways of grabbing data from the store, and they’ll get you a long way when you’re doing read-only things with Ember data.\r\n\r\n\r\nNext time, we’ll talk more about the store and the cache, and different ways we can manipulate it. I’ll see you then.\r\n", publish_date: "2015-12-04", links: "* [Ember Data architecture overview](http://guides.emberjs.com/v2.2.0/models/#toc_architecture-overview)\r\n* [findAll API docs](http://emberjs.com/api/data/classes/DS.Store.html#method_findAll)\r\n* [findRecord API docs](http://emberjs.com/api/data/classes/DS.Store.html#method_findRecord )\r\n", thumbnail_image: "Screenshot_2015-11-25_20.52.31.png", permalink: "97-ember-data-20-getting-data-from-the-server-with-findrecord-and-findall", free: false, difficulty: "basic", seconds: 373, wistia_embed: "<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script><div class=\"wistia_embed wistia_async_z5paxmuzgc\" style=\"height:528px;width:800px\">&nbsp;</div>", code: "Find all of the monsters on the server:\r\n\r\n```js\r\nmodel(){\r\n  return this.store.findAll('monster')\r\n}\r\n```\r\n\r\nFind one particular monster (this is the default model method in routes with params):\r\n\r\n```js\r\nmodel(params){\r\n  return this.store.findRecord('monster', params.monster_id)\r\n}\r\n```", guid: "34b2eebe431d0fd8d38fe60d337c8f0771cd0eed"},
  {title: "113 - RESTAdapter vs JSONAPIAdapter vs ActiveModelAdapter", video_url: nil, description: "The past three videos have covered the RESTAdapter in depth, but there are several other commonly used Adapters.\r\n   \r\nIn this video we look at how the JSONAPIAdapter (included in Ember Data) and the ActiveModelAdapter (previously in Ember Data, now in an addon) differ from the RESTAdapter.\r\n", transcript: "In the last three episodes, we’ve gone over every customizable method in the RESTAdapter that comes with Ember data. However, that’s not the only adapter that comes with Ember data. There’s also the JSONAPIAdapter, and there used to be the ActiveModelAdapter, although that is now in an add-on instead of as part of Ember data. So we’ll go over those and discover the differences between the RESTAdapter and these other two commonly used adapters.\r\n\r\n\r\nTo start us off, here’s the app that we’ve been using to show the routes that are given by the various methods for an adapter. Here we have the RESTAdapter, and we’re using the model `taco-taco`, and we’ll see that it camelCases it and pluralizes it. And then for these sets of methods, we have `POST`, `PUT`, `DELETE`, and then four `GET`s.\r\n\r\n\r\nIf we change this from the `RESTAdapter` to the `JSONAPIAdapter`, then we’ll notice that it does kebab-case instead of camelCase, and it’s changed this `PUT` to a `PATCH`. Let’s go ahead and see how it does that.\r\n\r\n\r\nSo here we have the JSONAPIAdapter in Ember data. We’ll see that it extends the RESTAdapter, and then it makes it so unless you specify it otherwise, it’ll use the JSONAPI Serializer. Then it messes with `ajaxOptions`. We didn’t go over these last time because it’s a private method and we went over all the public methods. But what this does, first it calls the default `ajaxOptions` that we have in the RESTAdapter, and then it changes the content type to something that JSONAPI expects. And then it adds a request header before sending. \r\n\r\n\r\nThis construct may look a little confusing, but it’s basically taking the `beforeSend` method, setting it somewhere else, adding something to the new one, and then calling the old version of `beforeSend`. So it’s like calling `super` but on a method instead of a class. And then it just returns the hash. \r\n\r\n\r\nSo `coalesceFindRequests`, this is the same as in RESTAdapter. It’s just put in there I guess for emphasis. And then `findMany`, the difference here is that instead of... here we’ll see the `findMany`... it puts the ids as an array in the data hash. And here it’s in the data hash but also under `filter`, and then the ids aren’t in an array. They’re in a string joined by a comma. So once again just little things that JSONAPI expects to be different. \r\n\r\n\r\nThen `pathForType` is something that... this is the thing that we saw earlier. It dasherizes it instead of having it camelCase. And then it pluralizes it, just like it did in the RESTAdapter. \r\n\r\n\r\nThen finally `updateRecord` is largely the same thing as the `updateRecord` in RESTAdapter, but it’s `PATCH` instead of `PUT`, and as you can see by this comment, this is unfortunately still the best way to overwrite an HTTP verb, even though it’s repeating these five lines. \r\n\r\n\r\nAnd those are all the changes that we need to make to the adapter in order to have JSONAPI. Of course when we get to serializer, there’s going to be a lot more changes than that, so get ready. \r\n\r\n\r\nAlright, so that was JSONAPIAdapter. Let’s look at the ActiveModelAdapter. And we’ve imported this from the add-ons since in Ember data 2.0 it’s been moved to an add-on. \r\n\r\nHere we see that it has underscore or snake case instead of dasherized or camelCase, and we’re back to having a `PUT` instead of a `PATCH`. \r\n\r\n\r\nThe ActiveModelAdapter is even simpler of a change than the JSONAPIAdapter. Of course you have your `defaultSerializer`, which is `active-model`, and that’s where most of the changes are going to be happening. Ones that happen in the adapter itself are `pathForType`, which it decamelizes it, and then it underscores it, and then it pluralizes it. So that’s how we get this. \r\n\r\n\r\nAnd then when you’re handling the response, it checks `isInvalid` first, and then it handles those errors differently. \r\n\r\n\r\nAnd so that wraps up our series on Ember data adapters. In the next set of episodes, we’ll be going over Ember data serializers, and how you can use and customize those, as well as find our way around the default ones that are available. Alright, I’ll see you then.\r\n", publish_date: "2016-01-29", links: "* [DS.RESTAdapter API docs](http://emberjs.com/api/data/classes/DS.RESTAdapter.html) \r\n* [JSONAPIAdapter code](https://github.com/emberjs/data/blob/master/addon/adapters/json-api.js)\r\n* [ActiveModelAdapter code](https://github.com/ember-data/active-model-adapter/blob/master/addon/active-model-adapter.js)\r\n", thumbnail_image: "Screenshot_2016-01-11_10.52.58.png", permalink: "113-restadapter-vs-jsonapiadapter-vs-activemodeladapter", free: false, difficulty: "advanced", seconds: 293, wistia_embed: "<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script><div class=\"wistia_embed wistia_async_6nuuf1448q\" style=\"height:528px;width:800px\">&nbsp;</div>", code: "The code for this screencast is entirely in [the JSONAPIAdapter](https://github.com/emberjs/data/blob/master/addon/adapters/json-api.js) and [the ActiveModelAdapter](https://github.com/ember-data/active-model-adapter/blob/master/addon/active-model-adapter.js)", guid: "80e6d98f69900dcd9a62ebfa3bc59f0d6b9c0075"},
  {title: "98 - Ember Data 2.0: Store Manipulation with Peek, Unload, and More", video_url: nil, description: "Last episode we saw findAll and findRecord, the two most common ways of getting data into the store.  Oftentimes those will be enough, but Ember also provides several ways to manipulate the data store in a more fine-grained way.\r\n\t\r\nIn this advanced episode, we’ll explore the methods peekAll, peekRecord, unloadAll, unloadRecord, recordIsLoaded, and hasRecordForId.  \r\n\r\nIf you’re just getting started with Ember Data, feel free to skip this episode and go straight to episode 099.\r\n", transcript: "Hey and welcome back to our series on Ember data. In the last episode, we talked about `findAll` and `findRecord`, two methods that help you get data from the server. In this episode, we’ll be talking about `peekAll` and `peekRecord`.\r\n\r\n\r\nSo I’m going to start off by showing you `peekAll` in action, and then we’ll get more into the details. Here we have a route which does `this.store.peekAll('monster')`. Notice the similarities between `this.store.findAll('monster')`.\r\n\r\n\r\nAlright, so this is our route.  Currently there are no monsters loaded yet, but here we’re going to go to the monsters route, and it’s going to load all the monsters. And then we go back to the peek route, it’ll have all the monsters that we had on here. This is because `peekAll`, it never actually hits the server. It only finds all the records that you currently have in your data store.\r\n\r\n\r\nIn addition to `peekAll`, you also have `peekRecord`, which is once again like `findRecord`, except it never hits your backend. It only takes stuff that’s already in the data store. \r\n\r\n\r\nIn addition to `find` and `peek`, there’s a third set of records starting with `unload`, so `unloadAll` and `unloadRecord`. Using these we can play around with what’s in the data store. \r\n\r\n\r\nSo we’ll start by loading all our monsters and then going to `peek`, and then using Ember dev tools, we’ll be able to access the store from the console and call, let’s say `unloadAll`, for monster. As you can see, it will take all of the monsters out of the data store. It will unload all of them. \r\n\r\n\r\nYou can also unload individual records, although it’s a little bit asymmetrical with how the other record methods work, since you first have to find that record and have a PR into the documentation to update this to `findRecord`, and then you call `unloadRecord` on the store and feed it the actual record instead of the type and the ID. \r\n\r\n\r\nOf course using `unload` isn’t without its problems. For example if we go to the monsters route again, then they’ll load but it gives us these errors, something about destroyed object. You’ll also note it didn’t actually take us to the monsters route. We’re still on monsters peek, even though all the monsters have loaded again. We click again, we’re there, and we see that there are problems with the current team. So one of the ways in which we’ve loaded the current team has created problems with its interaction with `unloadAll`. So that’s something to be aware of. It can cause problems. \r\n\r\n\r\nSo that’s the `peek` methods and the `unload` methods. Before I sign off for today, I want to show you a little bit more, a little bit deeper about how stuff is handled with the store. \r\n\r\n\r\nHere’s another method, `recordIsLoaded`. And what this does, it basically tells you whether a record is loaded or not. Now this method is basically... it’s defined and never used except to test it, but `recordIsLoaded` does call `hasRecordForId`, which is used in a lot of places, including in things like `findRecord` to check whether the record is already there. It’s used fairly transparently in `peekRecord`. It checks whether the ID is there, and if it is then it returns an `internalModel` for that ID, so basically getting it from the store. Otherwise, it’ll return `null`. \r\n\r\n\r\nFor `findRecord`, it’s a little more complicated, but basically it will... if it is there then it will return the record that is in the store. If it’s not there, then it will find it from the server. You can overwrite this by doing `findRecord` and passing in the option `{reload: true}`. And this will always try to find the record from the server even if it has one in the cache. So it might get it from the cache but then replace it with one from the server. \r\n\r\n\r\nSo in this episode we’ve gone over six different methods on the Ember data store, `peekAll` and `peekRecord`, `unloadAll` and `unloadRecord`, and `recordIsLoaded` and `hasRecordForId`. These should help you understand more about how the caching works on the store and how you can manipulate that by hand.\r\n\r\n\r\nIn the next episode, we’ll show how to create and delete records using these methods as well as several methods on the model itself, including `deleteRecord`, `destroyRecord`, and `save`. I’ll see you then.\r\n", publish_date: "2015-12-09", links: "* [peekAll API docs](http://emberjs.com/api/data/classes/DS.Store.html#method_peekAll ) (scroll down for peekRecord)\r\n* [unloadAll API docs](http://emberjs.com/api/data/classes/DS.Store.html#method_unloadAll ) (scroll down for unloadRecord)\r\n* [recordIsLoaded API docs](http://emberjs.com/api/data/classes/DS.Store.html#method_recordIsLoaded )\r\n* [hasRecordForId API docs](http://emberjs.com/api/data/classes/DS.Store.html#method_hasRecordForId )\r\n* [store.js for Ember Data 2.2.1](https://github.com/emberjs/data/blob/v2.2.1/packages/ember-data/lib/system/store.js )\r\n", thumbnail_image: "Screenshot_2015-11-30_13.32.25.png", permalink: "98-ember-data-20-store-manipulation-with-peek-unload-and-more", free: true, difficulty: "advanced", seconds: 288, wistia_embed: "<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script><div class=\"wistia_embed wistia_async_op4mnhu3db\" style=\"height:528px;width:800px\">&nbsp;</div>", code: "You can call peekAll in a very similar way to findAll:\r\n\r\n```js\r\nmodel(){\r\n  this.store.peekAll('monster')\r\n}\r\n```\r\n\r\nThe difference is that peekAll will never go to the server- it will only use what's in the store.  The same is true with peekRecord:\r\n\r\n```js\r\nthis.store.peekRecord('monster', 1)\r\n```\r\n\r\nYou can remove records from the store with the unload methods:\r\n\r\n```js\r\n//remove all data from store\r\nthis.store.unloadAll()\r\n//remove all data of a specific type from the store\r\nthis.store.unloadAll('monster')\r\n//remove a specific record from the store\r\nthis.store.unloadRecord(monsterRecord)\r\n```\r\n\r\nYou can ask if a record is in the datastore:\r\n\r\n```js\r\nthis.store.recordIsLoaded('monster', 1) //=>boolean\r\nthis.store.hasRecordForId('monster', 1) //=>boolean\r\n```\r\n\r\nThe difference between the two methods is that `hasRecordForId` can take a model object as well as a string with the model name for the first parameter.  `hasRecordForId` is also used throughout the codebase, while `recordIsLoaded` is an outward-facing API.\r\n\r\n> Written with [StackEdit](https://stackedit.io/).", guid: "0c714a5488950db2d829af71cb1ecd007581f25a"},
  {title: "99 - Ember Data 2.0: Create, Save, and Destroy Records", video_url: nil, description: "Ember Data isn’t just for displaying data- you can also add and remove data!\r\n\r\nIn this episode we go over the createRecord, save, deleteRecord, and destroyRecord methods.\r\n", transcript: "So far in our Ember data series, we’ve been manipulating data that already exists. Today we’re going to start adding new data and removing data that we no longer want. We’ll start by learning about `createRecord`. \r\n\r\n\r\nSo we can add new records by going `this.store.createRecord`, and then we give it the name of the type that we want to add, so we’re wanting to add a monster, and then we give it a hash. So we’re going to go ahead and just add an empty hash, and we can see that it creates a monster, although it doesn’t really have all the data that it needs. \r\n\r\n\r\nLet’s go ahead and create another monster, this one with a bunch more data, and we can see that it shows up just like the other monsters. And since we assigned it to the `newMonster` variable, we can go ahead and save it. And so saving it will persist it to the server. Notice it sends out a post request. So when we reload, this monster will still be there, but this monster will disappear. \r\n\r\n\r\nSo in order to create a record, you do `.createRecord`. In order to get it to the server and persist it, you do `.save`. \r\n\r\n\r\nNow there are several ways to delete a record. Most of them involve first getting a copy of the record. So we’ll go ahead and grab a copy of our Quartinon, and then in the console, here `$E` is a copy of that, and then we’ll call `deleteRecord` on it. \r\n\r\n\r\nNotice here that it’s changed and it has `isDeleted` as `true`, but it hasn’t removed it from here, and it also didn’t send anything to the server. To do that you have to call `$E.save`, and now it disappears, as well as it sends a `deleteRequest` to the server. There is a way to do that all at once. So let’s go ahead and grab another monster, and you can call `deleteRecord` and `save` by calling `destroyRecord`, and it does both of those steps at once. \r\n\r\n\r\nYou can also call `deleteRecord` on the store, and it takes a record. However it has the same problems as `deleteRecord`. In fact, it just calls `deleteRecord` on the thing that you pass it, on the model that you pass it, and so I don’t really see a reason to use this version of it. I would rather do `model.deleteRecord`, or even better, `model.destroyRecord`. \r\n\r\n\r\nSo now that you’ve seen how to create and destroy records, let’s go ahead and look at what that looks like within an application. While you weren’t looking, I added a way to create monsters, as well as a way to edit and destroy monsters. So let’s go ahead and see how that works in the code.\r\n\r\n\r\nSo when we’re destroying the monster, we get the model, this is the record, and then we call `destroyRecord`. After that’s done, we just transition to a different route. \r\n\r\n\r\nWhen we’re creating a new record, first we get the attributes, and those have been decided on in the template, the user puts those in, and this is an ES6 construct, putting it from a hash into multiple variables. \r\n\r\n \r\nAnd then here’s another ES6 construct. If we’re doing it the ES5 way, it would look like this, but this is much shorter. So that’s in our `createRecord`, and once we have the record we call `save`, and then once that promise returns then we transition to that monster’s route, the newly created monster’s route. \r\n\r\n\r\nSo one quick thing to notice is that `save`, it returns a promise, it’s thenable, and the same thing is true of `destroyRecord`.\r\n\r\n\r\nIn the next episode, we’re going to be looking deeper into editing the monster. We’re going to be making it so that if you make changes, let’s say you make a bunch of changes, maybe you have a kid crawling all over and he puts it onto a huge level and price for $0. Let’s say you can’t remember what you had it at before. You want to be able to be able to roll back those changes before they’re saved. We’re going to show you how to do that easily. I’ll see you then.\r\n", publish_date: "2015-12-11", links: "* [createRecord API docs](http://emberjs.com/api/data/classes/DS.Store.html#method_createRecord)\r\n* [save API docs](http://emberjs.com/api/data/classes/DS.Model.html#method_save)\r\n* [deleteRecord and destroyRecord API docs](http://emberjs.com/api/data/classes/DS.Model.html#method_deleteRecord)\r\n", thumbnail_image: "Screenshot_2015-12-02_02.51.05.png", permalink: "99-ember-data-20-create-save-and-destroy-records", free: false, difficulty: "basic", seconds: 257, wistia_embed: "<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script><div class=\"wistia_embed wistia_async_fu09byzla9\" style=\"height:528px;width:800px\">&nbsp;</div>", code: "You can create a record by using `createRecord`.  The first argument is the type, the second is the hash of attribute values.\r\n\r\ncreateRecord puts it in the store.  You must then save it if you want it to go to the server.\r\n\r\n```js\r\nvar newMonster = this.store.createRecord(‘monster’, {\r\n  name: ‘Quartinon’,\r\n  imageUrl: 'https://s3.amazonaws.com/monsterbattle/quartinon.png'\r\n  level: 3,\r\n  price: 23\r\n})\r\n\r\nnewMonster.save()\r\n```\r\n\r\nThe result of `save` is a promise.\r\n\r\nThere are several ways to delete a record.  You can call `deleteRecord` on it directly, and then call `save`.  `deleteRecord` just marks it as deleted, which is enough to make it disappear from your templates.\r\n\r\n```js\r\nrecord.deleteRecord()\r\nrecord.save()\r\n```\r\n\r\nYou can also call `destroyRecord` which does both of those steps.\r\n\r\n```js\r\nrecord.destroyRecord()\r\n```\r\n\r\nYou can also call `deleteRecord` on the store and pass in the record.  This just calls `deleteRecord` on that record and still requires a call to `save`, so not sure why you would prefer this way.\r\n\r\n```js\r\nthis.store.deleteRecord(record)\r\n```\r\n\r\nThe code for our in-app examples can be found [here]\r\n\r\n> Written with [StackEdit](https://stackedit.io/).", guid: "555e7e73374690015cc9bdef44d36c992e5c1f15"},
  {title: "91 - Ember 2.0 Class Helpers", video_url: nil, description: "In Ember 1.13, a more powerful version of Handlebars Helpers was introduced: Class Helpers.  Within these new helpers, you can access services and recompute the value at will.\r\n\t\r\nToday’s episode shows how to upgrade our example helper with information from currency conversion service.", transcript: "So in the last episode, we introduced the Ember. JS Helper API, specifically the new version that was introduced in 1.13, and we used it to display the prices. So we have our helper that... it adds a bold thing around it, and then a dollar sign, and then it makes sure the price is safe and it does some stuff to make sure everything displays correctly. And then we can use that, and every time we use the price helper we automatically get that bold and that dollar sign and our price. That’s pretty nice but it’s not the full power of helpers.\r\n\r\n\r\nSo the full power of helpers, you can call services and you can use the compute and recompute methods. To do that we’re going to have to do a class helper, and I’ll show you how to do that today.\r\n\r\n\r\nSo we’ll start off by taking this same functionality and just doing it in a class helper. So instead of `Helper.helper`, we’re going to be doing `Helper.extend`, and then we’re going to have the `compute` method on that class. Within that `compute` method we’re going to be doing the same thing as we did up in `price`, and so we’ll just copy and paste that in there and we’re good to go. \r\n\r\n\r\nWe can see that everything is still displaying as it should. So like our function before, the `compute` helper takes the `params` and then a `hash` of `params`, and then it returns something, and whatever is returned from the `compute` helper is what it is displayed in the template. \r\n\r\n\r\nSo now let’s add to our functionality. We want to be able to display our prices in yen as well as dollars since our business is moving partly to Japan. So luckily we made a `yenConverter` service, but how do we get that in here? Well, it’s simple. Because this is a class, we can just inject the service like we would in any other class and then we can start using it. \r\n\r\n\r\nSo we’ll start by changing the `symbol`. So if our `yenConverter` says that we’re in dollars, then it’ll show the Dollar sign. Otherwise, it’ll show the Yen sign. And we’ll insert this here. \r\n\r\n\r\nAnd now since our `yenConverter` is in `\tYen`, it’ll show up as yen. And we forgot the ending semicolon. Now it will show up as the Yen symbol. Then we’ll go ahead and convert the price and round it and stick that within our expression. \r\n\r\n\r\nThen that gets us not only the Yen sign, but the price is converted into yen. So this `yenConverter` that we’ve used so far and our helper is great if we only want to show it in yen, but we want to be able to switch between English Dollars and Yen, so we’re going to have to do more than just inject a service. We’re going to have to find a way to change it and then recompute our helper when that value is changed. \r\n\r\n\r\nSo I’m going to quickly put in a little row here that shows the currency and gives you a `switchCurrency` button, and then it shows the amount of `Yen per Dollar` and allows you to change it. And then to handle some of these actions, we’ll create a monsters controller and it’ll inject the `yenConverter` and then have a `switchCurrency` action which calls the `switchCurrency` method on the `yenConverter`. \r\n\r\n\r\nSo now we can change the amount of ‘Yen per Dollar’ and switch, but even though it’s switching, it’s not reflected here. That’s because this is a helper and it’s only computed at the start. \r\n\r\n\r\nSo in our helper, we’ll create the `recomputeWhenChanged` method. So that will take an `observer` and will watch both the `currentCurrency` and the `exchangeRate`. And then whenever either of those are called, we’ll call `recompute`. Now when we hit ‘Switch’, we’ll see that everything changes to dollars. And when we change the ‘Yen per Dollar’, it recomputes. \r\n\r\n\r\nLet’s review our class helpers. So a class helper can do everything a function helper can, and if all you want to do is recreate that, then you just use the `compute` function, and you pass in the same parameters, and hash of parameters, and then you return whatever you want to show in the template. However, you’re not limited to just that. Because it’s a class you can inject services and you can recompute whenever something is changed on one of those services. If you wanted to expand this, you could do something like connect this service up to an API that will create the `exchangeRate`, it’ll pull it in and get it in real time. That would be really cool. Let me know what other ways you think of to make cool things with this in the comments. I’ll see you later.\r\n", publish_date: "2015-11-13", links: "* [API docs](http://emberjs.com/api/classes/Ember.Helper.html)\r\n* [Episode where we create the price helper](https://www.emberscreencasts.com/posts/90-ember-20-function-helpers)\r\n* [github diff](https://github.com/jeffreybiles/monster-demo-frontend/commit/0a40caf92a1198bd5cc8100540ba13fb1dedaf20)", thumbnail_image: "Screenshot_2015-11-05_14.18.37.png", permalink: "91-ember-20-class-helpers", free: false, difficulty: "intermediate", seconds: 285, wistia_embed: "<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script><div class=\"wistia_embed wistia_async_e0v5vl6uuh\" style=\"height:528px;width:800px\">&nbsp;</div>", code: "Call with `Ember.Helper.extend({})`.  Helper will output return value of `compute` function.  `this.recompute()` will recompute.\r\n\r\nThe price helper:\r\n\r\n```js\r\nimport Ember from 'ember';\r\n\r\nexport default Ember.Helper.extend({\r\n  yenConverter: Ember.inject.service(),\r\n  compute(params, {price}) {\r\n    var symbol = this.get('yenConverter.isInDollars') ? '$' : '&#165;';\r\n    var convertedPrice = this.get('yenConverter').exchange(price);\r\n    var roundedPrice = Math.round(convertedPrice * 100)/100\r\n    return Ember.String.htmlSafe(`<b>${symbol}${Ember.Handlebars.Utils.escapeExpression(roundedPrice)}</b>`);\r\n  },\r\n  recomputeWhenChanged: Ember.observer('yenConverter.currentCurrency', 'yenConverter.exchangeRate', function(){\r\n    this.recompute()\r\n  })\r\n});\r\n```\r\n\r\nCalling the helper:\r\n\r\n```hbs\r\n{{price price=monster.price}}\r\n```\r\n", guid: "2e381a72ee07b4df0c77a055ad9abe2c67816d0c"},
  {title: "101 - Ember Data 2.0: Metaprogramming with DS.Model Attributes Property", video_url: nil, description: "In this video we learn how to display all the attributes of several different models using the same route and template.\r\n\r\nThis amazing feat is made possible using the DS.Model attributes property and metaprogramming.  Near the end we go over many other properties on DS.Model that lend themselves well to metaprogramming.\r\n", transcript: "If you’ve been watching a while, you may remember how much I love metaprogramming. So an opportunity came up to do it with `ds.model` and I couldn’t resist, and I hope you enjoy it as well. \r\n\r\n\r\nHere’s what we’re going to be making today. So notice that we have all the available models here, and when you click here, it gives us each of the attributes and their type, and here’s a list of all the records from that model. We can change what’s displaying, and then click through to get all the info for one. And using these exact same routes, we can do it for other models. And we can do it for any model with the exact same code. I’m going to show you how.\r\n\r\n\r\nFirst, let me introduce you to the star of today’s episode, the `attributes` property. So the attribute property is used on a model class and it gives you the type and the name, as well as several other things about a specific attribute that is defined on a `ds.model`. \r\n\r\n\r\nOne thing to keep in mind is that this is a static property. So here we have an instance of a model, and if we try to use attributes on it, it’s undefined. But if we call for the constructor, which is the model class itself, and then use attributes, then it will give us something. And here it’s giving us a `ComputedProperty`, so it’s kind of difficult to explore in the console, but we’ll be exploring it in the code. \r\n\r\n\r\nSo first we have the route structure, which is first the route `anything`, and then a model which is just the `model_name`, and then record which is just the `record_id`.\r\n\r\n\r\nThen we have the `anything` route, which it looks up the `data-adapter` on the `container` and gets all the model types. This is code that I stole from the `ember-admin` project, which does something similar to what we’re building, just more robust. \r\n\r\n\r\nSo then we take that list of models, we loop through them, and we `link-to` them based on their name. And you see here, we’ve got three in this particular project. We click it and it takes us to the monster index route, or the model index route, in this case monster.\r\n\r\n\r\nHere we’re doing two different things. First, we’re pulling the same trick as we pulled in the `anything` route to get all the model types, but then we’re just finding the one that has that model name, monster in this case. And then we’re also using that model name to find all the records with that model name, and putting them into our return value. \r\n\r\n\r\nThen what we’re doing with that is we’re giving the name of that model, and then we’re looping through each of these attributes. So we have the object, and we call `.klass` on it, and that gets us the klass, and then we can call `.attributes`. And then we’re listing them by name and by type.\r\n\r\n\r\nThat gets us this, here. Well actually it gets us these four. We put on `id` on the top separately. You will notice that although it does all the attributes, it’s not doing any of the relationships, so it’s not showing its relationship to `team-membership`. That is done with the `relationships` property, which we’ll go over it in a later screencast. \r\n\r\n\r\nSo that’s what that this ends up showing. And it should be noted that, remember we called `.constructor` earlier on an instance? This `modelObject.klass` gets us the same thing as the `instance.constructor` did. And so the `.attributes` we’re calling is the same as we called on the console earlier.\r\n\r\n\r\nAlright, so that’s what’s up on the top. On the bottom here, in the `index`, what we’re showing is all of the records. So we’re looping through the records and then we’re linking to `anything.model.record`, with the record, and of course we’re showing the `record.id` down here. So we click through it, and it’ll show all the info. \r\n\r\n\r\nAnd here it’s fairly straightforward. We’re first getting the `params` for the `anything.model` controller, and grabbing the `model_name` off of that, and so that’s the parent controls, the one we were just talking about. \r\n\r\n\r\nAnd then we’re just calling a plain `findRecord` for that `modelName`, and using the `record_id` params that we pass in. And that will get us the `model`, which we then call `.constructor.attributes`  on, and we loop through those, the `attribute.name`, and then we’re doing another bit of metaprogramming, we’re using the gitHelper to call `attribute.name` on the model. So it might be `model.getImageUrl`, or something like that. And that will get us this nice listing, like we saw before.\r\n\r\n\r\nSo that’s how you use the static attributes property in order to do some really cool metaprogramming. \r\n\r\n\r\nNow two things before you go. First, you notice that we didn’t choose which field you display. We didn’t make that yet. I created a separate commit for that, it's just some query params. Second, there are a lot more properties besides just attributes. There’s static properties like `fields`, or `relatedTypes`, `relationshipNames`, `relationships`, `relationshipsByName`, and `transformedAttributes`. And not only that, there are methods that are related to those, such as `eachAttribute`, `eachRelatedType`, `eachRelationship`, and `eachTransformedAttribute`. So those are pretty useful, and we’ll go over some of the relationship ones when we expand this to do not just the attributes, but also the relationships, and we’ll do that in a later screencast. \r\n\r\n\r\nI hope you’ve enjoyed this detour into metaprogramming as much as I have. I’ll see you next week.\r\n", publish_date: "2015-12-18", links: "* [attributes API docs](http://emberjs.com/api/data/classes/DS.Model.html#property_attributes)\r\n* [ember-admin addon](https://github.com/dockyard/ember-admin)\r\n* [github diff for main code](https://github.com/jeffreybiles/monster-demo-frontend/commit/bd0772ebec7f65fc98d3b440a5e369f380496c7c)\r\n* [github diff for queryParams stuff](https://github.com/jeffreybiles/monster-demo-frontend/commit/ae51849553c60dcda7a0595fe97d0615800dca3f)\r\n", thumbnail_image: "Screenshot_2015-12-08_11.34.38.png", permalink: "101-ember-data-20-metaprogramming-with-dsmodel-attributes-property", free: false, difficulty: "advanced", seconds: 395, wistia_embed: "<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script><div class=\"wistia_embed wistia_async_vv6aou9c3t\" style=\"height:528px;width:800px\">&nbsp;</div>", code: "The attributes property returns an array of hashes that tell you about the attributes on a DS.Model.  Note that you must have access to the model class and not just the model instance (it can be accessed by calling `constructor` on the model instance).\r\n\r\n```js\r\nmodel.constructor.attributes\r\n//=> [{type: 'string', name: 'name', ...}, {type: 'number', name: 'level', ...}]\r\n```\r\n\r\nIn the context of the app, it can be used like this:\r\n\r\n```hbs\r\n{{#each model.constructor.attributes as |attribute|}}\r\n  {{attribute.name}}: {{get model attribute.name}}\r\n  <br>\r\n{{/each}}\r\n```\r\n\r\nYou can also get the constructor in other ways.  For example, you can get the modelType from the data adapter:\r\n\r\n```js\r\nmodel(params){\r\n  let modelObject = this.container.lookup('data-adapter:main').getModelTypes().findBy('name', params.model_name);\r\n  let records = this.store.findAll(params.model_name)\r\n  return {\r\n    modelObject: modelObject,\r\n    records: records\r\n  }\r\n}\r\n```\r\n\r\nThen you can call `.klass` on it to get the constructor, and find the attributes from there.  In the following code you can also see us using the `type`\tproperty on the attributes.\r\n\r\n```hbs\r\n{{#each model.modelObject.klass.attributes as |attr|}}\r\n  <br>\r\n  {{attr.name}}: {{attr.type}}\r\n{{/each}}\r\n```", guid: "8504930531adc83f34ab7804e27519cca0cd387c"},
  {title: "100 - Ember Data 2.0: Updating Data, Tracking Changes, and Rolling Them Back", video_url: nil, description: "Not only can update your Ember Data records, but you track the unsaved changes and easily roll them back.\r\n\r\nIn this episode we go over `set`, `rollbackAttributes`, and `changedAttributes`, and show an imaginative use for `changedAttributes`\r\n", transcript: "Hey and welcome back to Ember Screencasts. This is our 100th episode, and before we get started I wanted to say quick thank you to everyone who’s watched. It’s been a huge encouragement, especially the people who subscribed. If it wasn’t for you guys I wouldn’t have made it to 100. Here’s to another 100. Now on to some Ember data.\r\n\r\n\r\nWe’ve been working with our Monster Card example, and last episode we figured out how to destroy monsters, as well as to create new monsters. But you’ll notice that we had an ‘Edit’ page that we didn’t really talk much about. We’re going to be doing some really cool things with this `Edit` page in this episode. \r\n\r\n\r\nSo here are the basics of editing. We have our `save` action which grabs the `model` and then calls `save`. We haven’t changed anything in this action because in our template we’ve got first this two-way bound to the `monster-form`, and then we’ve got the inputs which are two-way bound. And so when we’re typing on the screen, it’s changing the data. \r\n\r\n\r\nThere are other ways of doing this, maybe better ways of doing this, but right now this is the simplest, is to two-way bind on inputs. And so that’s changing the model, that’s updating those attributes, and then we can call `save`. \r\n\r\n\r\nWe can also pass in attributes here, like you can pass in a `name`, and then we can use `set` to update stuff. And of course that won’t update on the server until we hit ‘Save’. \r\n\r\n\r\nSo to your basics of editing, you change stuff, and you call save. You can change stuff either by calling `.set` or by changing it in an `input`. \r\n\r\n\r\nNow comes the fun part. The first thing we’ll do is create a `cancel` button, a button where if you made changes you didn’t like, you can just press it and they go away. The action for this easy. You just call the `rollbackAttributes` method on the model.\r\n\r\n\r\nSo we’ll take our example and let’s say we accidentally change this guy’s level and his image source and we can see that it’s a mistake, so we hit ‘Cancel’, and we’re back to normal. \r\n\r\n\r\nSo that’s useful but fairly easy. We’re going to be doing something more complicated and way cooler using the `changedAttributes` method. So the `changedAttributes` method, you call it and then it returns a hash, which has... for each key it has the previous attribute and the current attribute. \r\n\r\n\r\nSo what we’re going to do is when we change anything here, we’re going to have it tell us what it used to be and what it is now, so we’ll see what changes we’re making before we hit the ‘Save’ button. \r\n\r\n\r\nBecause this is a method and not a property, we’ll have to make our own property. We’ll compute it based on the four attributes that we can change, and there’s probably a better way to do this, hopefully someone of you will tell me in the comments, and then we’ll go ahead and we’ll call the `changedAttributes` method and get that variable.\r\n\r\n\r\nAlright, so with that, it’s not in a very usable form. So, we’ll assign it to the `usableHash`, we’ll make a more `usableHash`, we’ll get the `changedAttributes`, we’ll get the `keys`, and we’ll `map` those `keys` and `return` a hash that we can use. \r\n\r\n\r\nThis hash will have three attributes, the `key` which is the `attributeName`, the `earlierValue` which we’ll get from the `changedAttributes` hash, and then the `currentValue` which we’ll also get from the `changedAttributes` hash. Then it will `return` the `usableHash`.\r\n\r\n\r\nThen, in the `handlebars` template, we’ll loop over that `changedAttributesHash`, and we’ll go ahead and say the `key`, then the `earlierValue`, then the `currentValue`.\r\n\r\n\r\nNow we’ll see this in action. We can see that there are currently no changed attributes. But if we start changing attributes, we’ll see that okay, the name has changed from Rhauk to RhaukHi, and the level has changed from 2 to 23, and we can keep on seeing these changes. So if we back out some of these changes, then it’ll no longer show them as changed, whereas other ones it will show them as changed, because this first one is an integer and that last one is a string. \r\n\r\n\r\nSo this feature is already pretty cool, but here are some more things you could do with it. You could put a ‘Cancel’ button beside each piece of data if you wanted to cancel each one individually. You could keep track of every single change, so when you hit ‘Save’, it would create another record showing that these changes were made. That’s a great way to keep track of the data that you used to have. That same implementation would also lead pretty well to a history or an `Undo` button. \r\n\r\n\r\nI look forward to hearing about all the cool things you can do with these methods that I’ve showed you today, and \tonce again to review, those methods are `rollbackAttributes` and `changedAttributes`.\r\n\r\n\r\nIn the next episode, we’ll be going over the `attributes` property, and we’ll see how that can be used with metaprogramming to do some really cool stuff, like here we don’t have explicit code for any of these attributes. They are all based on the `attributes` property. And we can change to a different model in the same route, and it’s using the same template. This is pretty magical. We’ll show you how in the pro-episode.\r\n", publish_date: "2015-12-16", links: "* [rollbackAttributes API docs](http://emberjs.com/api/data/classes/DS.Model.html#method_rollbackAttributes)\r\n* [changedAttributes API docs](http://emberjs.com/api/data/classes/DS.Model.html#method_changedAttributes)\r\n", thumbnail_image: "Screenshot_2015-12-03_16.43.56.png", permalink: "100-ember-data-20-updating-data-tracking-changes-and-rolling-them-back", free: true, difficulty: "advanced", seconds: 335, wistia_embed: "<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script><div class=\"wistia_embed wistia_async_rxn6pvrcp6\" style=\"height:528px;width:800px\">&nbsp;</div>", code: "The most common way of updating data records is to change their either with a two-way-bound input field or to call `set` on the record.  Then you call save on the record.\r\n\r\nHowever, there are a lot of things you can do before calling save.\r\n\r\nYou can roll back the changes:\r\n\r\n```js\r\nmodel.rollbackAttributes()\r\n```\r\n\r\nYou can also see which attributes have changed:\r\n\r\n```js\r\nmodel.changedAttributes() //=> {name: ['Rhauk', 'Rhaukky']} \r\n```\r\n\r\nWe created a method that gets those attributes in an easy-to-use way:\r\n\r\n```js\r\nchangedAttributesHash: Ember.computed('model.{name,level,imageUrl,price}', function(){\r\n  let changedAttributes = this.get(\"model\").changedAttributes();\r\n  let usableHash = Object.keys(changedAttributes).map(function(attributeName){\r\n    return {\r\n      key: attributeName,\r\n      earlierValue: changedAttributes[attributeName][0],\r\n      currentValue: changedAttributes[attributeName][1]\r\n    }\r\n  })\r\n  return usableHash\r\n})\r\n```\r\n\r\nWe can use that hash in the template:\r\n\r\n```hbs\r\n{{#each changedAttributesHash as |attribute|}}\r\n  {{attribute.key}}: {{attribute.earlierValue}} -> {{attribute.currentValue}}\r\n  <br>\r\n{{/each}}\r\n```\r\n", guid: "73feafb5660afd5c1485c3458d312e1179349208"},
  {title: "90 - Ember 2.0 Function Helpers", video_url: nil, description: "Ember 1.13 revamped the Helper API, making it simpler, more cohesive, and more powerful.\r\n\t\r\nIn this episode we show how to create function helpers- helpers that take in data and return stuff that looks good in a template.", transcript: "In today’s episode we’re going to be covering the new helper API introduced in Ember 1.13. It will be the helper API you’re going to want to use when you’re working in Ember 2.0 and above. It’s a lot more powerful and there are two parts to it. There’s the regular helper API which we’ll cover in this episode, and then there is the class helper which is even more powerful, and we’ll cover that in this week’s pro-episode. \r\n\r\n\r\nSo our situation today is that we’ve got our Monster Cards that we’ve been using, and now we’ve added a price to each of them. This is what it cost to get those trading cards. But let’s say we didn’t like how this was displayed. We want it the dollar sign ‘$’ instead of just saying ‘dollars’. \r\n\r\n\r\nSo we could go in here and change it. So this changes it but over here it’s still ‘dollars’. If we do it this way, we have to remember every place we displayed this price and change it there. Pretty easy when you have one or two, not so easy when you have more. This is why we need a helper.\r\n\r\n\r\nSo let’s go ahead and generate our helper. Notice that unlike a component, a helper doesn’t have to have a dash. So this is the auto-generated helper. It’s exporting as default `Ember.Helper.helper` and then it includes the function there. That function takes some `params`, it can also take some named `params`, we’ll be working with those later, and then it does stuff with them, and then it will return the return value, in this case just the `params`. So it’s a pure function. There should be no side effects. It just takes value, outputs a different value, and it should be the same output for the same input every time. The analogy isn’t perfect but I think of them as computed properties for your template. \r\n\r\n\r\nSo the first order of business is to get the `price` out of the `params`. The `params` are just an array of any parameters you give it. We just gave it `1` so we’re going to get parameters zero-indexed, and that’ll be our price. And then we’ll go ahead and add a dollar sign ‘$’ to that and return it. Then we’ll go ahead and use this helper in both of our templates. We’ll go to the monsters template and put that helper there, so we’re sending it `1` `param`, and then we’re going to go to the monster show template and we’ll put it in there as well. And we can see that both of these, both over here in the list and over here in the show are displaying what we want. They’re using the helper to compute what to display. \r\n\r\n\r\nSo currently we’re passing in the price as an unnamed parameter, but what if we want to pass it in as a named parameter, like this? Well, we can do that. So we go in here and we have the `params`. We also have the `hash`. So the `params` will now be an empty array, but the `hash` will contain a `price`, like this. We can also destructure it using ES6. \r\n\r\n\r\nSo here we send in all the keys that we want to get, and there we go. If you don’t understand it, that’s okay. You don’t have to do it that way. You can do it the old way if you want. But as we’ll see, this works as well and it’s much shorter. So then we’ll go ahead and make sure to have that as a named parameter as well, and we’ll see this working, just like before. \r\n\r\n\r\nSo what do we want to do if we want to make this bold? So we could wrap every single price helper with bold, but it’s much easier to do it just within the helper itself. So we wrap it with our bold tags, but there’s going to be a problem. Ember doesn’t know that it’s safe so it goes ahead and doesn’t interpret it as HTML, it just interprets it as text. This is great for protecting you from malicious user strings but not so great when you want to display HTML. \r\n\r\n\r\nFortunately there’s a way to fix that. So we can go here and we can return it with `Ember.String.htmlSafe`. And if we wrap it with this, then it will tell Ember that we believe it’s safe, and so it can display it as HTML. But what if it’s not actually safe? What if a malicious user sets the price such that it messes up the experience of other users? Fortunately, there’s another thing in Ember called `Ember.Handlebars.Utils.escapeExpression`, so we’re going to escape the expression of just the price, and then we’re going to interpret everything else as safe. You can see that this is still working and we can’t see the security but it’s much better.\r\n\r\n\r\nSo these are the most basic form of helpers that you can use now in Ember 2.0. However there are also class helpers which are more powerful. They let you bring in information from services and use that, so stuff like your current user or stuff you’re getting from an API. We’ll go over that in this week’s pro-episode. I’ll see you then. \r\n", publish_date: "2015-11-11", links: "* [Blog announcement](http://emberjs.com/blog/2015/06/12/ember-1-13-0-released.html#toc_new-ember-js-helper-api)\r\n* [Ember Guide on writing helpers](http://guides.emberjs.com/v2.1.0/templates/writing-helpers/ )\r\n* [Github diff](https://github.com/jeffreybiles/monster-demo-frontend/commit/500340c6e4bea77d204cb469d8c8c53e94c9040d )\r\n", thumbnail_image: "Screenshot_2015-11-05_14.20.37.png", permalink: "90-ember-20-function-helpers", free: true, difficulty: "basic", seconds: 315, wistia_embed: "<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script><div class=\"wistia_embed wistia_async_y3fw7c4nwm\" style=\"height:528px;width:800px\">&nbsp;</div>", code: "The helper goes in helpers/price.js:\r\n\r\n```js\r\nimport Ember from 'ember';\r\n\r\nexport function price(params, {price}) {\r\n  return Ember.String.htmlSafe(`<b>$${Ember.Handlebars.Utils.escapeExpression(price)}</b>`);\r\n}\r\n\r\nexport default Ember.Helper.helper(price);\r\n```\r\n\r\nUsing the helper\r\n\r\n```hbs\r\n{{price price=monster.price}}\r\n```", guid: "8bbf7b4fc359421b13e801c016a984a1aa5c5d2f"}
])
Tag.create!([
  {name: "Ember Data", description: "Ember Data is a library for managing your client-side model data.", tag_type: "subject", priority: nil, permalink: "ember-data", most_recent_publish_date: "2016-01-29", taggings_count: 21},
  {name: "metaprogramming", description: nil, tag_type: "subject", priority: nil, permalink: "metaprogramming", most_recent_publish_date: "2016-01-08", taggings_count: 10},
  {name: "components", description: nil, tag_type: "subject", priority: nil, permalink: "components", most_recent_publish_date: "2016-01-08", taggings_count: 9},
  {name: "ember-cli", description: nil, tag_type: "subject", priority: nil, permalink: "ember-cli", most_recent_publish_date: "2015-08-07", taggings_count: 4},
  {name: "ember-inspector", description: "The Ember Inspector is a great way to discover more about Ember apps- both apps you own, and others! Learn how to explore and manipulate Ember apps live.", tag_type: "series", priority: nil, permalink: "ember-inspector", most_recent_publish_date: "2015-04-18", taggings_count: 5},
  {name: "Tables of Data", description: "There are many ways to manipulate tables of data. We start with sorting and pagination, then go to changing the data columns themselves.", tag_type: "series", priority: nil, permalink: "tables-of-data", most_recent_publish_date: "2015-04-11", taggings_count: 8},
  {name: "query-params", description: nil, tag_type: "subject", priority: nil, permalink: "query-params", most_recent_publish_date: "2015-04-17", taggings_count: 6},
  {name: "handlebars", description: nil, tag_type: "subject", priority: nil, permalink: "handlebars", most_recent_publish_date: "2015-08-03", taggings_count: 3},
  {name: "Addons", description: nil, tag_type: "subject", priority: nil, permalink: "addons", most_recent_publish_date: "2015-11-25", taggings_count: 13},
  {name: "ESNext", description: "", tag_type: "subject", priority: nil, permalink: "esnext", most_recent_publish_date: "2016-02-05", taggings_count: 8},
  {name: "Building the CRUD-builder addon", description: "We build an addon that generates a CRUD (Create, Read, Update, Destroy) interface that interacts with a REST API via Ember Data.", tag_type: "series", priority: nil, permalink: "building-the-crud-builder-addon", most_recent_publish_date: "2015-05-10", taggings_count: 6},
  {name: "Journey to Ember-CLI", description: "A trek through the history of Ember build tooling. No longer useful as a how-to.", tag_type: "series", priority: nil, permalink: "journey-to-ember-cli", most_recent_publish_date: "2015-01-31", taggings_count: 5},
  {name: "Ember utilities", description: "Small bits of ember that are helpful to know.", tag_type: "subject", priority: nil, permalink: "ember-utilities", most_recent_publish_date: "2015-05-17", taggings_count: 4},
  {name: "Greatest Hits", description: "My favorites", tag_type: "subject", priority: nil, permalink: "greatest-hits", most_recent_publish_date: "2015-07-27", taggings_count: 6},
  {name: "Object System", description: "Ember's Object System makes inheritance easier to reason about than in vanilla javascript.", tag_type: "subject", priority: nil, permalink: "object-system", most_recent_publish_date: "2015-05-31", taggings_count: 5},
  {name: "Testing", description: "Testing helps prevent errors from sneaking into your code.  Learn how to do it!  Maybe even write tests for everything!", tag_type: "subject", priority: nil, permalink: "testing", most_recent_publish_date: "2015-06-07", taggings_count: 2},
  {name: "DataViz", description: "All about data visualization", tag_type: "subject", priority: nil, permalink: "dataviz", most_recent_publish_date: "2015-06-15", taggings_count: 2},
  {name: "Uploads", description: "", tag_type: "subject", priority: nil, permalink: "uploads", most_recent_publish_date: "2015-07-05", taggings_count: 4},
  {name: "Browser Events", description: "", tag_type: "subject", priority: nil, permalink: "browser-events", most_recent_publish_date: "2015-09-09", taggings_count: 5},
  {name: "Forms", description: "", tag_type: "subject", priority: nil, permalink: "forms", most_recent_publish_date: "2015-10-30", taggings_count: 5},
  {name: "Computed Properties", description: "Computed Properties are one of my favorite (and most underrated) features of Ember.  They help turn the framework into a functional programmer's paradise.", tag_type: "series", priority: nil, permalink: "computed-properties", most_recent_publish_date: "2015-07-29", taggings_count: 4},
  {name: "Revised", description: "", tag_type: "subject", priority: nil, permalink: "revised", most_recent_publish_date: "2015-08-03", taggings_count: 2},
  {name: "Form Validations", description: "Client-side form validations are easy(er) with the ember-validations library!  Learn how to display validations, use advanced features of the ember-validations library, and even create custom validators.", tag_type: "series", priority: nil, permalink: "form-validations", most_recent_publish_date: "2015-08-28", taggings_count: 6},
  {name: "Upgrades", description: "", tag_type: "subject", priority: nil, permalink: "upgrades", most_recent_publish_date: "2015-09-04", taggings_count: 1},
  {name: "Actions", description: "", tag_type: "subject", priority: nil, permalink: "actions", most_recent_publish_date: "2015-09-30", taggings_count: 6},
  {name: "Routes", description: "", tag_type: "subject", priority: nil, permalink: "routes", most_recent_publish_date: "2015-11-25", taggings_count: 2},
  {name: "Ember 2.0", description: "", tag_type: "subject", priority: nil, permalink: "ember-20", most_recent_publish_date: "2015-12-16", taggings_count: 13},
  {name: "Initializers", description: "", tag_type: "subject", priority: nil, permalink: "initializers", most_recent_publish_date: "2015-10-09", taggings_count: 2},
  {name: "Dependency Injection", description: "", tag_type: "subject", priority: nil, permalink: "dependency-injection", most_recent_publish_date: "2015-10-16", taggings_count: 3},
  {name: "Ember Actions", description: "Actions are at the forefront of the data-down/actions-up paradigm that is becoming more important in the Ember 2.x series.", tag_type: "series", priority: nil, permalink: "ember-actions", most_recent_publish_date: "2015-10-02", taggings_count: 8},
  {name: "User Auth", description: "User authentication is necessary for serving up a personalized or secure experience.  \n\nIn this series we first build a simple user authentication and authorization system from scratch and then explore different addons like torii and ember-simple-auth.", tag_type: "series", priority: nil, permalink: "user-auth", most_recent_publish_date: "2015-11-06", taggings_count: 7},
  {name: "Services", description: "", tag_type: "subject", priority: nil, permalink: "services", most_recent_publish_date: "2015-11-13", taggings_count: 2},
  {name: "Sessions", description: "", tag_type: "subject", priority: nil, permalink: "sessions", most_recent_publish_date: "2015-10-28", taggings_count: 2},
  {name: "Authentication", description: "", tag_type: "subject", priority: nil, permalink: "authentication", most_recent_publish_date: "2015-11-06", taggings_count: 7},
  {name: "Helpers", description: "", tag_type: "subject", priority: nil, permalink: "helpers", most_recent_publish_date: "2015-11-13", taggings_count: 2},
  {name: "Async", description: "", tag_type: "subject", priority: nil, permalink: "async", most_recent_publish_date: "2015-11-27", taggings_count: 3},
  {name: "Promises", description: "", tag_type: "subject", priority: nil, permalink: "promises", most_recent_publish_date: "2015-11-27", taggings_count: 3},
  {name: "Introduction to Ember Data 2.0", description: "", tag_type: "series", priority: nil, permalink: "introduction-to-ember-data-20", most_recent_publish_date: "2016-01-29", taggings_count: 13},
  {name: "Adapters", description: "", tag_type: "subject", priority: nil, permalink: "adaptors", most_recent_publish_date: "2016-01-29", taggings_count: 6},
  {name: "Serializers", description: "", tag_type: "subject", priority: nil, permalink: "serializers", most_recent_publish_date: "2016-01-15", taggings_count: 2}
])
Tagging.create!([
  {tag_id: 43, taggable_type: nil, post_id: 69},
  {tag_id: 4, taggable_type: "Post", post_id: nil},
  {tag_id: 5, taggable_type: "Post", post_id: nil},
  {tag_id: 4, taggable_type: "Post", post_id: nil},
  {tag_id: 6, taggable_type: "Post", post_id: nil},
  {tag_id: 4, taggable_type: "Post", post_id: nil},
  {tag_id: 7, taggable_type: "Post", post_id: nil},
  {tag_id: 8, taggable_type: "Post", post_id: nil},
  {tag_id: 9, taggable_type: "Post", post_id: nil},
  {tag_id: 10, taggable_type: "Post", post_id: nil},
  {tag_id: 11, taggable_type: "Post", post_id: nil},
  {tag_id: 12, taggable_type: "Post", post_id: nil},
  {tag_id: 13, taggable_type: "Post", post_id: nil},
  {tag_id: 6, taggable_type: "Post", post_id: nil},
  {tag_id: 5, taggable_type: "Post", post_id: nil},
  {tag_id: 15, taggable_type: "Post", post_id: nil},
  {tag_id: 16, taggable_type: "Post", post_id: nil},
  {tag_id: 5, taggable_type: "Post", post_id: nil},
  {tag_id: 17, taggable_type: "Post", post_id: nil},
  {tag_id: 4, taggable_type: "Post", post_id: nil},
  {tag_id: 6, taggable_type: "Post", post_id: nil},
  {tag_id: 20, taggable_type: "Post", post_id: nil},
  {tag_id: 21, taggable_type: "Post", post_id: nil},
  {tag_id: 22, taggable_type: "Post", post_id: nil},
  {tag_id: 23, taggable_type: "Post", post_id: nil},
  {tag_id: 25, taggable_type: "Post", post_id: nil},
  {tag_id: 26, taggable_type: "Post", post_id: nil},
  {tag_id: 28, taggable_type: "Post", post_id: nil},
  {tag_id: 29, taggable_type: "Post", post_id: nil},
  {tag_id: 30, taggable_type: "Post", post_id: nil},
  {tag_id: 33, taggable_type: "Post", post_id: nil},
  {tag_id: 36, taggable_type: "Post", post_id: nil},
  {tag_id: 36, taggable_type: "Post", post_id: nil},
  {tag_id: 37, taggable_type: "Post", post_id: nil},
  {tag_id: 38, taggable_type: "Post", post_id: nil},
  {tag_id: 33, taggable_type: "Post", post_id: nil},
  {tag_id: 38, taggable_type: "Post", post_id: nil},
  {tag_id: 39, taggable_type: "Post", post_id: nil},
  {tag_id: 41, taggable_type: "Post", post_id: nil},
  {tag_id: 42, taggable_type: "Post", post_id: nil},
  {tag_id: 3, taggable_type: nil, post_id: 8},
  {tag_id: 3, taggable_type: nil, post_id: 3},
  {tag_id: 3, taggable_type: nil, post_id: 34},
  {tag_id: 14, taggable_type: nil, post_id: 2},
  {tag_id: 14, taggable_type: nil, post_id: 42},
  {tag_id: 32, taggable_type: nil, post_id: 22},
  {tag_id: 32, taggable_type: nil, post_id: 24},
  {tag_id: 32, taggable_type: nil, post_id: 25},
  {tag_id: 32, taggable_type: nil, post_id: 23},
  {tag_id: 32, taggable_type: nil, post_id: 26},
  {tag_id: 32, taggable_type: nil, post_id: 28},
  {tag_id: 32, taggable_type: nil, post_id: 29},
  {tag_id: 32, taggable_type: nil, post_id: 30},
  {tag_id: 44, taggable_type: nil, post_id: 35},
  {tag_id: 44, taggable_type: nil, post_id: 36},
  {tag_id: 44, taggable_type: nil, post_id: 38},
  {tag_id: 44, taggable_type: nil, post_id: 39},
  {tag_id: 44, taggable_type: nil, post_id: 40},
  {tag_id: 44, taggable_type: nil, post_id: 41},
  {tag_id: 27, taggable_type: nil, post_id: 18},
  {tag_id: 27, taggable_type: nil, post_id: 19},
  {tag_id: 27, taggable_type: nil, post_id: 20},
  {tag_id: 27, taggable_type: nil, post_id: 21},
  {tag_id: 27, taggable_type: nil, post_id: 34},
  {tag_id: 45, taggable_type: nil, post_id: 6},
  {tag_id: 45, taggable_type: nil, post_id: 7},
  {tag_id: 45, taggable_type: nil, post_id: 8},
  {tag_id: 45, taggable_type: nil, post_id: 13},
  {tag_id: 45, taggable_type: nil, post_id: 16},
  {tag_id: 43, taggable_type: nil, post_id: 42},
  {tag_id: 19, taggable_type: nil, post_id: 40},
  {tag_id: 19, taggable_type: nil, post_id: 41},
  {tag_id: 19, taggable_type: nil, post_id: 36},
  {tag_id: 35, taggable_type: nil, post_id: 26},
  {tag_id: 35, taggable_type: nil, post_id: 27},
  {tag_id: 34, taggable_type: nil, post_id: 25},
  {tag_id: 34, taggable_type: nil, post_id: 28},
  {tag_id: 34, taggable_type: nil, post_id: 29},
  {tag_id: 34, taggable_type: nil, post_id: 30},
  {tag_id: 34, taggable_type: nil, post_id: 31},
  {tag_id: 34, taggable_type: nil, post_id: 32},
  {tag_id: 46, taggable_type: nil, post_id: 43},
  {tag_id: 46, taggable_type: nil, post_id: 2},
  {tag_id: 46, taggable_type: nil, post_id: 36},
  {tag_id: 46, taggable_type: nil, post_id: 35},
  {tag_id: 40, taggable_type: nil, post_id: 30},
  {tag_id: 40, taggable_type: nil, post_id: 14},
  {tag_id: 18, taggable_type: nil, post_id: 12},
  {tag_id: 18, taggable_type: nil, post_id: 39},
  {tag_id: 18, taggable_type: nil, post_id: 20},
  {tag_id: 47, taggable_type: nil, post_id: 37},
  {tag_id: 47, taggable_type: nil, post_id: 32},
  {tag_id: 47, taggable_type: nil, post_id: 30},
  {tag_id: 47, taggable_type: nil, post_id: 1},
  {tag_id: 14, taggable_type: nil, post_id: 30},
  {tag_id: 14, taggable_type: nil, post_id: 31},
  {tag_id: 14, taggable_type: nil, post_id: 32},
  {tag_id: 18, taggable_type: nil, post_id: 27},
  {tag_id: 14, taggable_type: nil, post_id: 27},
  {tag_id: 3, taggable_type: nil, post_id: 1},
  {tag_id: 3, taggable_type: nil, post_id: 39},
  {tag_id: 3, taggable_type: nil, post_id: 38},
  {tag_id: 48, taggable_type: nil, post_id: 44},
  {tag_id: 48, taggable_type: nil, post_id: 45},
  {tag_id: 48, taggable_type: nil, post_id: 19},
  {tag_id: 48, taggable_type: nil, post_id: 46},
  {tag_id: 48, taggable_type: nil, post_id: 47},
  {tag_id: 49, taggable_type: nil, post_id: 4},
  {tag_id: 49, taggable_type: nil, post_id: 49},
  {tag_id: 43, taggable_type: nil, post_id: 48},
  {tag_id: 50, taggable_type: nil, post_id: 50},
  {tag_id: 50, taggable_type: nil, post_id: 52},
  {tag_id: 40, taggable_type: nil, post_id: 53},
  {tag_id: 51, taggable_type: nil, post_id: 53},
  {tag_id: 51, taggable_type: nil, post_id: 54},
  {tag_id: 52, taggable_type: nil, post_id: 55},
  {tag_id: 51, taggable_type: nil, post_id: 56},
  {tag_id: 52, taggable_type: nil, post_id: 56},
  {tag_id: 40, taggable_type: nil, post_id: 57},
  {tag_id: 52, taggable_type: nil, post_id: 58},
  {tag_id: 51, taggable_type: nil, post_id: 58},
  {tag_id: 52, taggable_type: nil, post_id: 59},
  {tag_id: 40, taggable_type: nil, post_id: 59},
  {tag_id: 53, taggable_type: nil, post_id: 59},
  {tag_id: 53, taggable_type: nil, post_id: 60},
  {tag_id: 40, taggable_type: nil, post_id: 61},
  {tag_id: 53, taggable_type: nil, post_id: 61},
  {tag_id: 40, taggable_type: nil, post_id: 62},
  {tag_id: 54, taggable_type: nil, post_id: 63},
  {tag_id: 54, taggable_type: nil, post_id: 64},
  {tag_id: 54, taggable_type: nil, post_id: 65},
  {tag_id: 56, taggable_type: nil, post_id: 65},
  {tag_id: 54, taggable_type: nil, post_id: 66},
  {tag_id: 47, taggable_type: nil, post_id: 65},
  {tag_id: 47, taggable_type: nil, post_id: 59},
  {tag_id: 35, taggable_type: nil, post_id: 68},
  {tag_id: 56, taggable_type: nil, post_id: 68},
  {tag_id: 59, taggable_type: nil, post_id: 73},
  {tag_id: 40, taggable_type: nil, post_id: 70},
  {tag_id: 19, taggable_type: nil, post_id: 70},
  {tag_id: 59, taggable_type: nil, post_id: 71},
  {tag_id: 59, taggable_type: nil, post_id: 72},
  {tag_id: 59, taggable_type: nil, post_id: 74},
  {tag_id: 59, taggable_type: nil, post_id: 75},
  {tag_id: 59, taggable_type: nil, post_id: 76},
  {tag_id: 40, taggable_type: nil, post_id: 77},
  {tag_id: 40, taggable_type: nil, post_id: 78},
  {tag_id: 60, taggable_type: nil, post_id: 78},
  {tag_id: 52, taggable_type: nil, post_id: 79},
  {tag_id: 61, taggable_type: nil, post_id: 79},
  {tag_id: 61, taggable_type: nil, post_id: 80},
  {tag_id: 62, taggable_type: nil, post_id: 80},
  {tag_id: 40, taggable_type: nil, post_id: 81},
  {tag_id: 61, taggable_type: nil, post_id: 82},
  {tag_id: 18, taggable_type: nil, post_id: 82},
  {tag_id: 61, taggable_type: nil, post_id: 83},
  {tag_id: 18, taggable_type: nil, post_id: 83},
  {tag_id: 63, taggable_type: nil, post_id: 83},
  {tag_id: 61, taggable_type: nil, post_id: 84},
  {tag_id: 18, taggable_type: nil, post_id: 84},
  {tag_id: 63, taggable_type: nil, post_id: 84},
  {tag_id: 14, taggable_type: nil, post_id: 84},
  {tag_id: 61, taggable_type: nil, post_id: 85},
  {tag_id: 18, taggable_type: nil, post_id: 85},
  {tag_id: 63, taggable_type: nil, post_id: 85},
  {tag_id: 64, taggable_type: nil, post_id: 87},
  {tag_id: 64, taggable_type: nil, post_id: 88},
  {tag_id: 65, taggable_type: nil, post_id: 88},
  {tag_id: 66, taggable_type: nil, post_id: 79},
  {tag_id: 66, taggable_type: nil, post_id: 80},
  {tag_id: 66, taggable_type: nil, post_id: 81},
  {tag_id: 66, taggable_type: nil, post_id: 82},
  {tag_id: 66, taggable_type: nil, post_id: 83},
  {tag_id: 66, taggable_type: nil, post_id: 84},
  {tag_id: 66, taggable_type: nil, post_id: 85},
  {tag_id: 66, taggable_type: nil, post_id: 86},
  {tag_id: 65, taggable_type: nil, post_id: 89},
  {tag_id: 65, taggable_type: nil, post_id: 90},
  {tag_id: 68, taggable_type: nil, post_id: 90},
  {tag_id: 63, taggable_type: nil, post_id: 59},
  {tag_id: 63, taggable_type: nil, post_id: 88},
  {tag_id: 63, taggable_type: nil, post_id: 86},
  {tag_id: 69, taggable_type: nil, post_id: 91},
  {tag_id: 70, taggable_type: nil, post_id: 91},
  {tag_id: 68, taggable_type: nil, post_id: 91},
  {tag_id: 68, taggable_type: nil, post_id: 92},
  {tag_id: 53, taggable_type: nil, post_id: 93},
  {tag_id: 70, taggable_type: nil, post_id: 93},
  {tag_id: 40, taggable_type: nil, post_id: 94},
  {tag_id: 53, taggable_type: nil, post_id: 94},
  {tag_id: 68, taggable_type: nil, post_id: 96},
  {tag_id: 68, taggable_type: nil, post_id: 95},
  {tag_id: 68, taggable_type: nil, post_id: 94},
  {tag_id: 68, taggable_type: nil, post_id: 93},
  {tag_id: 71, taggable_type: nil, post_id: 90},
  {tag_id: 71, taggable_type: nil, post_id: 96},
  {tag_id: 71, taggable_type: nil, post_id: 95},
  {tag_id: 71, taggable_type: nil, post_id: 94},
  {tag_id: 71, taggable_type: nil, post_id: 93},
  {tag_id: 71, taggable_type: nil, post_id: 92},
  {tag_id: 71, taggable_type: nil, post_id: 91},
  {tag_id: 63, taggable_type: nil, post_id: 97},
  {tag_id: 72, taggable_type: nil, post_id: 97},
  {tag_id: 63, taggable_type: nil, post_id: 98},
  {tag_id: 72, taggable_type: nil, post_id: 98},
  {tag_id: 69, taggable_type: nil, post_id: 98},
  {tag_id: 74, taggable_type: nil, post_id: 99},
  {tag_id: 75, taggable_type: nil, post_id: 99},
  {tag_id: 3, taggable_type: nil, post_id: 100},
  {tag_id: 74, taggable_type: nil, post_id: 100},
  {tag_id: 75, taggable_type: nil, post_id: 100},
  {tag_id: 40, taggable_type: nil, post_id: 101},
  {tag_id: 62, taggable_type: nil, post_id: 101},
  {tag_id: 75, taggable_type: nil, post_id: 102},
  {tag_id: 74, taggable_type: nil, post_id: 102},
  {tag_id: 3, taggable_type: nil, post_id: 103},
  {tag_id: 63, taggable_type: nil, post_id: 103},
  {tag_id: 63, taggable_type: nil, post_id: 104},
  {tag_id: 3, taggable_type: nil, post_id: 104},
  {tag_id: 76, taggable_type: nil, post_id: 103},
  {tag_id: 76, taggable_type: nil, post_id: 104},
  {tag_id: 63, taggable_type: nil, post_id: 105},
  {tag_id: 3, taggable_type: nil, post_id: 105},
  {tag_id: 76, taggable_type: nil, post_id: 105},
  {tag_id: 63, taggable_type: nil, post_id: 106},
  {tag_id: 3, taggable_type: nil, post_id: 106},
  {tag_id: 76, taggable_type: nil, post_id: 106},
  {tag_id: 3, taggable_type: nil, post_id: 108},
  {tag_id: 14, taggable_type: nil, post_id: 108},
  {tag_id: 76, taggable_type: nil, post_id: 107},
  {tag_id: 76, taggable_type: nil, post_id: 108},
  {tag_id: 3, taggable_type: nil, post_id: 107},
  {tag_id: 63, taggable_type: nil, post_id: 107},
  {tag_id: 43, taggable_type: nil, post_id: 99},
  {tag_id: 43, taggable_type: nil, post_id: 100},
  {tag_id: 43, taggable_type: nil, post_id: 102},
  {tag_id: 3, taggable_type: nil, post_id: 113},
  {tag_id: 14, taggable_type: nil, post_id: 113},
  {tag_id: 3, taggable_type: nil, post_id: 114},
  {tag_id: 14, taggable_type: nil, post_id: 114},
  {tag_id: 18, taggable_type: nil, post_id: 114},
  {tag_id: 76, taggable_type: nil, post_id: 113},
  {tag_id: 3, taggable_type: nil, post_id: 115},
  {tag_id: 76, taggable_type: nil, post_id: 115},
  {tag_id: 77, taggable_type: nil, post_id: 115},
  {tag_id: 78, taggable_type: nil, post_id: 115},
  {tag_id: 77, taggable_type: nil, post_id: 116},
  {tag_id: 78, taggable_type: nil, post_id: 116},
  {tag_id: 3, taggable_type: nil, post_id: 116},
  {tag_id: 76, taggable_type: nil, post_id: 116},
  {tag_id: 3, taggable_type: nil, post_id: 117},
  {tag_id: 77, taggable_type: nil, post_id: 117},
  {tag_id: 76, taggable_type: nil, post_id: 117},
  {tag_id: 76, taggable_type: nil, post_id: 118},
  {tag_id: 3, taggable_type: nil, post_id: 118},
  {tag_id: 77, taggable_type: nil, post_id: 118},
  {tag_id: 76, taggable_type: nil, post_id: 119},
  {tag_id: 3, taggable_type: nil, post_id: 119},
  {tag_id: 77, taggable_type: nil, post_id: 119},
  {tag_id: 76, taggable_type: nil, post_id: 120},
  {tag_id: 3, taggable_type: nil, post_id: 120},
  {tag_id: 77, taggable_type: nil, post_id: 120},
  {tag_id: 43, taggable_type: nil, post_id: 121},
  {tag_id: 43, taggable_type: nil, post_id: 122}
])
